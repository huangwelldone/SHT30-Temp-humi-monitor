
f103_SHT30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007150  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001518  08007260  08007260  00008260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008778  08008778  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008778  08008778  00009778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008780  08008780  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008780  08008780  00009780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008784  08008784  00009784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008788  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  200001d4  0800895c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  0800895c  0000a868  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcd0  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002127  00000000  00000000  00015ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00017ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000875  00000000  00000000  00018af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018af5  00000000  00000000  00019365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6ad  00000000  00000000  00031e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f2a  00000000  00000000  00041507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8431  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e68  00000000  00000000  000c8474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000cc2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007248 	.word	0x08007248

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007248 	.word	0x08007248

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a23      	ldr	r2, [pc, #140]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105c:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a1d      	ldr	r2, [pc, #116]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a17      	ldr	r2, [pc, #92]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a11      	ldr	r2, [pc, #68]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_GPIO_Init+0xa8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010aa:	480c      	ldr	r0, [pc, #48]	@ (80010dc <MX_GPIO_Init+0xac>)
 80010ac:	f001 fbd0 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2302      	movs	r3, #2
 80010c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <MX_GPIO_Init+0xac>)
 80010ca:	f001 fa3d 	bl	8002548 <HAL_GPIO_Init>

}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40011000 	.word	0x40011000

080010e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	@ (8001134 <MX_I2C1_Init+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010ec:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <MX_I2C1_Init+0x58>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001102:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_I2C1_Init+0x50>)
 800111e:	f001 fbc9 	bl	80028b4 <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001128:	f000 faa7 	bl	800167a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001f0 	.word	0x200001f0
 8001134:	40005400 	.word	0x40005400
 8001138:	00061a80 	.word	0x00061a80

0800113c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <HAL_I2C_MspInit+0x70>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d123      	bne.n	80011a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <HAL_I2C_MspInit+0x74>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <HAL_I2C_MspInit+0x74>)
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_I2C_MspInit+0x74>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001174:	23c0      	movs	r3, #192	@ 0xc0
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001178:	2312      	movs	r3, #18
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <HAL_I2C_MspInit+0x78>)
 8001188:	f001 f9de 	bl	8002548 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <HAL_I2C_MspInit+0x74>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	4a07      	ldr	r2, [pc, #28]	@ (80011b0 <HAL_I2C_MspInit+0x74>)
 8001192:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001196:	61d3      	str	r3, [r2, #28]
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <HAL_I2C_MspInit+0x74>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40005400 	.word	0x40005400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010c00 	.word	0x40010c00

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b092      	sub	sp, #72	@ 0x48
 80011bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011be:	f001 f859 	bl	8002274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c2:	f000 fa15 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c6:	f7ff ff33 	bl	8001030 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ca:	f7ff ff89 	bl	80010e0 <MX_I2C1_Init>

  MX_USART1_UART_Init();
 80011ce:	f000 fb81 	bl	80018d4 <MX_USART1_UART_Init>
  char msg[50];
  float temp, humi;
  SHT30_Init(&hi2c1);
 80011d2:	48ad      	ldr	r0, [pc, #692]	@ (8001488 <main+0x2d0>)
 80011d4:	f000 fc50 	bl	8001a78 <SHT30_Init>

  /* USER CODE BEGIN 2 */
  OLED_Init();
 80011d8:	f000 fd24 	bl	8001c24 <OLED_Init>
  HAL_Delay(20);
 80011dc:	2014      	movs	r0, #20
 80011de:	f001 f8ab 	bl	8002338 <HAL_Delay>
  OLED_NewFrame();
 80011e2:	f000 fd7b 	bl	8001cdc <OLED_NewFrame>
  OLED_PrintString(4,20,"温度",&font16x16,0);
 80011e6:	2300      	movs	r3, #0
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	4ba8      	ldr	r3, [pc, #672]	@ (800148c <main+0x2d4>)
 80011ec:	4aa8      	ldr	r2, [pc, #672]	@ (8001490 <main+0x2d8>)
 80011ee:	2114      	movs	r1, #20
 80011f0:	2004      	movs	r0, #4
 80011f2:	f000 ff98 	bl	8002126 <OLED_PrintString>
  OLED_PrintString(4,46,"湿度",&font16x16,0);
 80011f6:	2300      	movs	r3, #0
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4ba4      	ldr	r3, [pc, #656]	@ (800148c <main+0x2d4>)
 80011fc:	4aa5      	ldr	r2, [pc, #660]	@ (8001494 <main+0x2dc>)
 80011fe:	212e      	movs	r1, #46	@ 0x2e
 8001200:	2004      	movs	r0, #4
 8001202:	f000 ff90 	bl	8002126 <OLED_PrintString>
  //OLED_PrintString(0,0,"STM32_Temp_Humi",&afont16x8,0);
  OLED_ShowFrame();
 8001206:	f000 fd75 	bl	8001cf4 <OLED_ShowFrame>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(SHT30_ReadData(&hi2c1, &temp, &humi) == SHT30_OK)
 800120a:	1d3a      	adds	r2, r7, #4
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	4619      	mov	r1, r3
 8001212:	489d      	ldr	r0, [pc, #628]	@ (8001488 <main+0x2d0>)
 8001214:	f000 fc4e 	bl	8001ab4 <SHT30_ReadData>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 81cf 	bne.w	80015be <main+0x406>
	  {
		  if(temp>16&&temp<20) {OLED_PrintString(30,0,"凉爽",&font16x16,0); OLED_ShowFrame();}
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fef8 	bl	800101c <__aeabi_fcmpgt>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d011      	beq.n	8001256 <main+0x9e>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	4998      	ldr	r1, [pc, #608]	@ (8001498 <main+0x2e0>)
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fed2 	bl	8000fe0 <__aeabi_fcmplt>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <main+0x9e>
 8001242:	2300      	movs	r3, #0
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4b91      	ldr	r3, [pc, #580]	@ (800148c <main+0x2d4>)
 8001248:	4a94      	ldr	r2, [pc, #592]	@ (800149c <main+0x2e4>)
 800124a:	2100      	movs	r1, #0
 800124c:	201e      	movs	r0, #30
 800124e:	f000 ff6a 	bl	8002126 <OLED_PrintString>
 8001252:	f000 fd4f 	bl	8001cf4 <OLED_ShowFrame>
		  if(temp>21&&temp<25) {OLED_PrintString(30,0,"舒适",&font16x16,0); OLED_ShowFrame();}
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	4991      	ldr	r1, [pc, #580]	@ (80014a0 <main+0x2e8>)
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fede 	bl	800101c <__aeabi_fcmpgt>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d011      	beq.n	800128a <main+0xd2>
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	498e      	ldr	r1, [pc, #568]	@ (80014a4 <main+0x2ec>)
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff feb8 	bl	8000fe0 <__aeabi_fcmplt>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <main+0xd2>
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4b84      	ldr	r3, [pc, #528]	@ (800148c <main+0x2d4>)
 800127c:	4a8a      	ldr	r2, [pc, #552]	@ (80014a8 <main+0x2f0>)
 800127e:	2100      	movs	r1, #0
 8001280:	201e      	movs	r0, #30
 8001282:	f000 ff50 	bl	8002126 <OLED_PrintString>
 8001286:	f000 fd35 	bl	8001cf4 <OLED_ShowFrame>
		  if(temp>26&&temp<31) {OLED_PrintString(30,0,"微热",&font16x16,0); OLED_ShowFrame();}
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4987      	ldr	r1, [pc, #540]	@ (80014ac <main+0x2f4>)
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fec4 	bl	800101c <__aeabi_fcmpgt>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d011      	beq.n	80012be <main+0x106>
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	4984      	ldr	r1, [pc, #528]	@ (80014b0 <main+0x2f8>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fe9e 	bl	8000fe0 <__aeabi_fcmplt>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <main+0x106>
 80012aa:	2300      	movs	r3, #0
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	4b77      	ldr	r3, [pc, #476]	@ (800148c <main+0x2d4>)
 80012b0:	4a80      	ldr	r2, [pc, #512]	@ (80014b4 <main+0x2fc>)
 80012b2:	2100      	movs	r1, #0
 80012b4:	201e      	movs	r0, #30
 80012b6:	f000 ff36 	bl	8002126 <OLED_PrintString>
 80012ba:	f000 fd1b 	bl	8001cf4 <OLED_ShowFrame>
		  if(temp>31&&temp<35) {OLED_PrintString(30,0,"炎热",&font16x16,0); OLED_ShowFrame();}
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	497b      	ldr	r1, [pc, #492]	@ (80014b0 <main+0x2f8>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff feaa 	bl	800101c <__aeabi_fcmpgt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d011      	beq.n	80012f2 <main+0x13a>
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	4979      	ldr	r1, [pc, #484]	@ (80014b8 <main+0x300>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fe84 	bl	8000fe0 <__aeabi_fcmplt>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d009      	beq.n	80012f2 <main+0x13a>
 80012de:	2300      	movs	r3, #0
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	4b6a      	ldr	r3, [pc, #424]	@ (800148c <main+0x2d4>)
 80012e4:	4a75      	ldr	r2, [pc, #468]	@ (80014bc <main+0x304>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	201e      	movs	r0, #30
 80012ea:	f000 ff1c 	bl	8002126 <OLED_PrintString>
 80012ee:	f000 fd01 	bl	8001cf4 <OLED_ShowFrame>
		  if(temp>35) {OLED_PrintString(30,0,"酷热",&font16x16,0); OLED_ShowFrame();}
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4970      	ldr	r1, [pc, #448]	@ (80014b8 <main+0x300>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fe90 	bl	800101c <__aeabi_fcmpgt>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <main+0x15e>
 8001302:	2300      	movs	r3, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	4b61      	ldr	r3, [pc, #388]	@ (800148c <main+0x2d4>)
 8001308:	4a6d      	ldr	r2, [pc, #436]	@ (80014c0 <main+0x308>)
 800130a:	2100      	movs	r1, #0
 800130c:	201e      	movs	r0, #30
 800130e:	f000 ff0a 	bl	8002126 <OLED_PrintString>
 8001312:	f000 fcef 	bl	8001cf4 <OLED_ShowFrame>
		  if(temp>10&&temp<15) {OLED_PrintString(30,0,"清冷",&font16x16,0); OLED_ShowFrame();}
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	496a      	ldr	r1, [pc, #424]	@ (80014c4 <main+0x30c>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe7e 	bl	800101c <__aeabi_fcmpgt>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d011      	beq.n	800134a <main+0x192>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4967      	ldr	r1, [pc, #412]	@ (80014c8 <main+0x310>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fe58 	bl	8000fe0 <__aeabi_fcmplt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <main+0x192>
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	4b54      	ldr	r3, [pc, #336]	@ (800148c <main+0x2d4>)
 800133c:	4a63      	ldr	r2, [pc, #396]	@ (80014cc <main+0x314>)
 800133e:	2100      	movs	r1, #0
 8001340:	201e      	movs	r0, #30
 8001342:	f000 fef0 	bl	8002126 <OLED_PrintString>
 8001346:	f000 fcd5 	bl	8001cf4 <OLED_ShowFrame>
		  if(temp>5&&temp<9) {OLED_PrintString(30,0,"寒冷",&font16x16,0); OLED_ShowFrame();}
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	4960      	ldr	r1, [pc, #384]	@ (80014d0 <main+0x318>)
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fe64 	bl	800101c <__aeabi_fcmpgt>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d011      	beq.n	800137e <main+0x1c6>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	495d      	ldr	r1, [pc, #372]	@ (80014d4 <main+0x31c>)
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fe3e 	bl	8000fe0 <__aeabi_fcmplt>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <main+0x1c6>
 800136a:	2300      	movs	r3, #0
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	4b47      	ldr	r3, [pc, #284]	@ (800148c <main+0x2d4>)
 8001370:	4a59      	ldr	r2, [pc, #356]	@ (80014d8 <main+0x320>)
 8001372:	2100      	movs	r1, #0
 8001374:	201e      	movs	r0, #30
 8001376:	f000 fed6 	bl	8002126 <OLED_PrintString>
 800137a:	f000 fcbb 	bl	8001cf4 <OLED_ShowFrame>
		  if(temp<5) {OLED_PrintString(30,0,"严冷",&font16x16,0); OLED_ShowFrame();}
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	4953      	ldr	r1, [pc, #332]	@ (80014d0 <main+0x318>)
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe2c 	bl	8000fe0 <__aeabi_fcmplt>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d009      	beq.n	80013a2 <main+0x1ea>
 800138e:	2300      	movs	r3, #0
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	4b3e      	ldr	r3, [pc, #248]	@ (800148c <main+0x2d4>)
 8001394:	4a51      	ldr	r2, [pc, #324]	@ (80014dc <main+0x324>)
 8001396:	2100      	movs	r1, #0
 8001398:	201e      	movs	r0, #30
 800139a:	f000 fec4 	bl	8002126 <OLED_PrintString>
 800139e:	f000 fca9 	bl	8001cf4 <OLED_ShowFrame>

		  if(humi>30&&humi<50) {OLED_PrintString(65,0,"宜人",&font16x16,0); OLED_ShowFrame();}
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	494e      	ldr	r1, [pc, #312]	@ (80014e0 <main+0x328>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fe38 	bl	800101c <__aeabi_fcmpgt>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d011      	beq.n	80013d6 <main+0x21e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	494b      	ldr	r1, [pc, #300]	@ (80014e4 <main+0x32c>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe12 	bl	8000fe0 <__aeabi_fcmplt>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <main+0x21e>
 80013c2:	2300      	movs	r3, #0
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4b31      	ldr	r3, [pc, #196]	@ (800148c <main+0x2d4>)
 80013c8:	4a47      	ldr	r2, [pc, #284]	@ (80014e8 <main+0x330>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	2041      	movs	r0, #65	@ 0x41
 80013ce:	f000 feaa 	bl	8002126 <OLED_PrintString>
 80013d2:	f000 fc8f 	bl	8001cf4 <OLED_ShowFrame>
		  if(humi>50&&humi<60) {OLED_PrintString(65,0,"润爽",&font16x16,0); OLED_ShowFrame();}
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4942      	ldr	r1, [pc, #264]	@ (80014e4 <main+0x32c>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fe1e 	bl	800101c <__aeabi_fcmpgt>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d011      	beq.n	800140a <main+0x252>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4940      	ldr	r1, [pc, #256]	@ (80014ec <main+0x334>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fdf8 	bl	8000fe0 <__aeabi_fcmplt>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <main+0x252>
 80013f6:	2300      	movs	r3, #0
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <main+0x2d4>)
 80013fc:	4a3c      	ldr	r2, [pc, #240]	@ (80014f0 <main+0x338>)
 80013fe:	2100      	movs	r1, #0
 8001400:	2041      	movs	r0, #65	@ 0x41
 8001402:	f000 fe90 	bl	8002126 <OLED_PrintString>
 8001406:	f000 fc75 	bl	8001cf4 <OLED_ShowFrame>
		  if(humi>60&&humi<70) {OLED_PrintString(65,0,"黏腻",&font16x16,0); OLED_ShowFrame();}
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4937      	ldr	r1, [pc, #220]	@ (80014ec <main+0x334>)
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fe04 	bl	800101c <__aeabi_fcmpgt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d011      	beq.n	800143e <main+0x286>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4935      	ldr	r1, [pc, #212]	@ (80014f4 <main+0x33c>)
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fdde 	bl	8000fe0 <__aeabi_fcmplt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d009      	beq.n	800143e <main+0x286>
 800142a:	2300      	movs	r3, #0
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <main+0x2d4>)
 8001430:	4a31      	ldr	r2, [pc, #196]	@ (80014f8 <main+0x340>)
 8001432:	2100      	movs	r1, #0
 8001434:	2041      	movs	r0, #65	@ 0x41
 8001436:	f000 fe76 	bl	8002126 <OLED_PrintString>
 800143a:	f000 fc5b 	bl	8001cf4 <OLED_ShowFrame>
		  if(humi>70) {OLED_PrintString(65,0,"湿闷",&font16x16,0); OLED_ShowFrame();}
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	492c      	ldr	r1, [pc, #176]	@ (80014f4 <main+0x33c>)
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fdea 	bl	800101c <__aeabi_fcmpgt>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <main+0x2aa>
 800144e:	2300      	movs	r3, #0
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <main+0x2d4>)
 8001454:	4a29      	ldr	r2, [pc, #164]	@ (80014fc <main+0x344>)
 8001456:	2100      	movs	r1, #0
 8001458:	2041      	movs	r0, #65	@ 0x41
 800145a:	f000 fe64 	bl	8002126 <OLED_PrintString>
 800145e:	f000 fc49 	bl	8001cf4 <OLED_ShowFrame>
		  if(humi<30) {OLED_PrintString(65,0,"干燥",&font16x16,0); OLED_ShowFrame();}
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	491e      	ldr	r1, [pc, #120]	@ (80014e0 <main+0x328>)
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fdba 	bl	8000fe0 <__aeabi_fcmplt>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d048      	beq.n	8001504 <main+0x34c>
 8001472:	2300      	movs	r3, #0
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <main+0x2d4>)
 8001478:	4a21      	ldr	r2, [pc, #132]	@ (8001500 <main+0x348>)
 800147a:	2100      	movs	r1, #0
 800147c:	2041      	movs	r0, #65	@ 0x41
 800147e:	f000 fe52 	bl	8002126 <OLED_PrintString>
 8001482:	f000 fc37 	bl	8001cf4 <OLED_ShowFrame>
 8001486:	e03d      	b.n	8001504 <main+0x34c>
 8001488:	200001f0 	.word	0x200001f0
 800148c:	080083e8 	.word	0x080083e8
 8001490:	08007260 	.word	0x08007260
 8001494:	08007268 	.word	0x08007268
 8001498:	41a00000 	.word	0x41a00000
 800149c:	08007270 	.word	0x08007270
 80014a0:	41a80000 	.word	0x41a80000
 80014a4:	41c80000 	.word	0x41c80000
 80014a8:	08007278 	.word	0x08007278
 80014ac:	41d00000 	.word	0x41d00000
 80014b0:	41f80000 	.word	0x41f80000
 80014b4:	08007280 	.word	0x08007280
 80014b8:	420c0000 	.word	0x420c0000
 80014bc:	08007288 	.word	0x08007288
 80014c0:	08007290 	.word	0x08007290
 80014c4:	41200000 	.word	0x41200000
 80014c8:	41700000 	.word	0x41700000
 80014cc:	08007298 	.word	0x08007298
 80014d0:	40a00000 	.word	0x40a00000
 80014d4:	41100000 	.word	0x41100000
 80014d8:	080072a0 	.word	0x080072a0
 80014dc:	080072a8 	.word	0x080072a8
 80014e0:	41f00000 	.word	0x41f00000
 80014e4:	42480000 	.word	0x42480000
 80014e8:	080072b0 	.word	0x080072b0
 80014ec:	42700000 	.word	0x42700000
 80014f0:	080072b8 	.word	0x080072b8
 80014f4:	428c0000 	.word	0x428c0000
 80014f8:	080072c0 	.word	0x080072c0
 80014fc:	080072c8 	.word	0x080072c8
 8001500:	080072d0 	.word	0x080072d0
		  sprintf(msg,"%.1f",temp);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe ff8e 	bl	8000428 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	f107 000c 	add.w	r0, r7, #12
 8001514:	492f      	ldr	r1, [pc, #188]	@ (80015d4 <main+0x41c>)
 8001516:	f003 fd53 	bl	8004fc0 <siprintf>
		  OLED_PrintString(41,17,msg,&font16x16,0);
 800151a:	f107 020c 	add.w	r2, r7, #12
 800151e:	2300      	movs	r3, #0
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <main+0x420>)
 8001524:	2111      	movs	r1, #17
 8001526:	2029      	movs	r0, #41	@ 0x29
 8001528:	f000 fdfd 	bl	8002126 <OLED_PrintString>
		  OLED_PrintString(96,23,"℃",&font16x16,0);
 800152c:	2300      	movs	r3, #0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <main+0x420>)
 8001532:	4a2a      	ldr	r2, [pc, #168]	@ (80015dc <main+0x424>)
 8001534:	2117      	movs	r1, #23
 8001536:	2060      	movs	r0, #96	@ 0x60
 8001538:	f000 fdf5 	bl	8002126 <OLED_PrintString>
		  sprintf(msg,"%.1f",humi);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ff72 	bl	8000428 <__aeabi_f2d>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	f107 000c 	add.w	r0, r7, #12
 800154c:	4921      	ldr	r1, [pc, #132]	@ (80015d4 <main+0x41c>)
 800154e:	f003 fd37 	bl	8004fc0 <siprintf>
		  OLED_PrintString(41,42,msg,&font16x16,0);
 8001552:	f107 020c 	add.w	r2, r7, #12
 8001556:	2300      	movs	r3, #0
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <main+0x420>)
 800155c:	212a      	movs	r1, #42	@ 0x2a
 800155e:	2029      	movs	r0, #41	@ 0x29
 8001560:	f000 fde1 	bl	8002126 <OLED_PrintString>
		  OLED_PrintString(96,42,"%",&font16x16,0);
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <main+0x420>)
 800156a:	4a1d      	ldr	r2, [pc, #116]	@ (80015e0 <main+0x428>)
 800156c:	212a      	movs	r1, #42	@ 0x2a
 800156e:	2060      	movs	r0, #96	@ 0x60
 8001570:	f000 fdd9 	bl	8002126 <OLED_PrintString>
		  OLED_ShowFrame();
 8001574:	f000 fbbe 	bl	8001cf4 <OLED_ShowFrame>
		  sprintf(msg,"Temperature=%.2f,Humidity=%.1f\r\n",temp,humi);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff54 	bl	8000428 <__aeabi_f2d>
 8001580:	4604      	mov	r4, r0
 8001582:	460d      	mov	r5, r1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ff4e 	bl	8000428 <__aeabi_f2d>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	f107 000c 	add.w	r0, r7, #12
 8001594:	e9cd 2300 	strd	r2, r3, [sp]
 8001598:	4622      	mov	r2, r4
 800159a:	462b      	mov	r3, r5
 800159c:	4911      	ldr	r1, [pc, #68]	@ (80015e4 <main+0x42c>)
 800159e:	f003 fd0f 	bl	8004fc0 <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)msg,strlen(msg),500);
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fdd2 	bl	8000150 <strlen>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f107 010c 	add.w	r1, r7, #12
 80015b4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <main+0x430>)
 80015ba:	f002 fe0f 	bl	80041dc <HAL_UART_Transmit>
	   }

	  HAL_Delay(2000);
 80015be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015c2:	f000 feb9 	bl	8002338 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 80015c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ca:	4808      	ldr	r0, [pc, #32]	@ (80015ec <main+0x434>)
 80015cc:	f001 f958 	bl	8002880 <HAL_GPIO_TogglePin>
	  if(SHT30_ReadData(&hi2c1, &temp, &humi) == SHT30_OK)
 80015d0:	e61b      	b.n	800120a <main+0x52>
 80015d2:	bf00      	nop
 80015d4:	080072d8 	.word	0x080072d8
 80015d8:	080083e8 	.word	0x080083e8
 80015dc:	080072e0 	.word	0x080072e0
 80015e0:	080072e4 	.word	0x080072e4
 80015e4:	080072e8 	.word	0x080072e8
 80015e8:	20000248 	.word	0x20000248
 80015ec:	40011000 	.word	0x40011000

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b090      	sub	sp, #64	@ 0x40
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	2228      	movs	r2, #40	@ 0x28
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fd51 	bl	80050a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800161a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800162c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800162e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	4618      	mov	r0, r3
 800163a:	f002 f96f 	bl	800391c <HAL_RCC_OscConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001644:	f000 f819 	bl	800167a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001648:	230f      	movs	r3, #15
 800164a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164c:	2302      	movs	r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2102      	movs	r1, #2
 8001662:	4618      	mov	r0, r3
 8001664:	f002 fbdc 	bl	8003e20 <HAL_RCC_ClockConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800166e:	f000 f804 	bl	800167a <Error_Handler>
  }
}
 8001672:	bf00      	nop
 8001674:	3740      	adds	r7, #64	@ 0x40
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167e:	b672      	cpsid	i
}
 8001680:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001682:	bf00      	nop
 8001684:	e7fd      	b.n	8001682 <Error_Handler+0x8>
	...

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <HAL_MspInit+0x5c>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <HAL_MspInit+0x5c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <HAL_MspInit+0x5c>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_MspInit+0x5c>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a0e      	ldr	r2, [pc, #56]	@ (80016e4 <HAL_MspInit+0x5c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <HAL_MspInit+0x5c>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016be:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <HAL_MspInit+0x60>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <HAL_MspInit+0x60>)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <NMI_Handler+0x4>

080016f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <MemManage_Handler+0x4>

08001704 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <UsageFault_Handler+0x4>

08001714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 fde0 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return 1;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <_kill>:

int _kill(int pid, int sig)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800175c:	f003 fcf6 	bl	800514c <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	2216      	movs	r2, #22
 8001764:	601a      	str	r2, [r3, #0]
  return -1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_exit>:

void _exit (int status)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800177a:	f04f 31ff 	mov.w	r1, #4294967295
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffe7 	bl	8001752 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <_exit+0x12>

08001788 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e00a      	b.n	80017b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800179a:	f3af 8000 	nop.w
 800179e:	4601      	mov	r1, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	60ba      	str	r2, [r7, #8]
 80017a6:	b2ca      	uxtb	r2, r1
 80017a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf0      	blt.n	800179a <_read+0x12>
  }

  return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e009      	b.n	80017e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbf1      	blt.n	80017d4 <_write+0x12>
  }
  return len;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_close>:

int _close(int file)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001820:	605a      	str	r2, [r3, #4]
  return 0;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <_isatty>:

int _isatty(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
	...

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f003 fc5e 	bl	800514c <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20005000 	.word	0x20005000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	20000244 	.word	0x20000244
 80018c4:	20000868 	.word	0x20000868

080018c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <MX_USART1_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <MX_USART1_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <MX_USART1_UART_Init+0x4c>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <MX_USART1_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <MX_USART1_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <MX_USART1_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <MX_USART1_UART_Init+0x4c>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <MX_USART1_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <MX_USART1_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	@ (8001920 <MX_USART1_UART_Init+0x4c>)
 800190c:	f002 fc16 	bl	800413c <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001916:	f7ff feb0 	bl	800167a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000248 	.word	0x20000248
 8001924:	40013800 	.word	0x40013800

08001928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1c      	ldr	r2, [pc, #112]	@ (80019b4 <HAL_UART_MspInit+0x8c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d131      	bne.n	80019ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <HAL_UART_MspInit+0x90>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a1a      	ldr	r2, [pc, #104]	@ (80019b8 <HAL_UART_MspInit+0x90>)
 800194e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <HAL_UART_MspInit+0x90>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <HAL_UART_MspInit+0x90>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <HAL_UART_MspInit+0x90>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_UART_MspInit+0x90>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001978:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800197c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4619      	mov	r1, r3
 800198c:	480b      	ldr	r0, [pc, #44]	@ (80019bc <HAL_UART_MspInit+0x94>)
 800198e:	f000 fddb 	bl	8002548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4619      	mov	r1, r3
 80019a6:	4805      	ldr	r0, [pc, #20]	@ (80019bc <HAL_UART_MspInit+0x94>)
 80019a8:	f000 fdce 	bl	8002548 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40013800 	.word	0x40013800
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010800 	.word	0x40010800

080019c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c0:	f7ff ff82 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	@ (80019f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019c6:	490c      	ldr	r1, [pc, #48]	@ (80019f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c8:	4a0c      	ldr	r2, [pc, #48]	@ (80019fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a09      	ldr	r2, [pc, #36]	@ (8001a00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019dc:	4c09      	ldr	r4, [pc, #36]	@ (8001a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f003 fbb5 	bl	8005158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7ff fbe3 	bl	80011b8 <main>
  bx lr
 80019f2:	4770      	bx	lr
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019fc:	08008788 	.word	0x08008788
  ldr r2, =_sbss
 8001a00:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a04:	20000868 	.word	0x20000868

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>

08001a0a <CRC8_Calculate>:
#include "bsp_sht30.h"
#include <math.h>

// CRC8校验函数（SHT30专用）[[13][65]]
static uint8_t CRC8_Calculate(const uint8_t *data, uint8_t len) {
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8001a16:	23ff      	movs	r3, #255	@ 0xff
 8001a18:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73bb      	strb	r3, [r7, #14]
 8001a1e:	e021      	b.n	8001a64 <CRC8_Calculate+0x5a>
        crc ^= data[i];
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	4053      	eors	r3, r2
 8001a2c:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; bit--) {
 8001a2e:	2308      	movs	r3, #8
 8001a30:	737b      	strb	r3, [r7, #13]
 8001a32:	e011      	b.n	8001a58 <CRC8_Calculate+0x4e>
            if (crc & 0x80) {
 8001a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	da07      	bge.n	8001a4c <CRC8_Calculate+0x42>
                crc = (crc << 1) ^ 0x31;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	e002      	b.n	8001a52 <CRC8_Calculate+0x48>
            } else {
                crc <<= 1;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; bit--) {
 8001a52:	7b7b      	ldrb	r3, [r7, #13]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	737b      	strb	r3, [r7, #13]
 8001a58:	7b7b      	ldrb	r3, [r7, #13]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ea      	bne.n	8001a34 <CRC8_Calculate+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 8001a5e:	7bbb      	ldrb	r3, [r7, #14]
 8001a60:	3301      	adds	r3, #1
 8001a62:	73bb      	strb	r3, [r7, #14]
 8001a64:	7bba      	ldrb	r2, [r7, #14]
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d3d9      	bcc.n	8001a20 <CRC8_Calculate+0x16>
            }
        }
    }
    return crc;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <SHT30_Init>:

// 初始化传感器
SHT30_Status SHT30_Init(I2C_HandleTypeDef *hi2c) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	6078      	str	r0, [r7, #4]
    uint8_t cmd[2] = {0x22, 0x36};  // 高精度周期测量命令
 8001a80:	f243 6322 	movw	r3, #13858	@ 0x3622
 8001a84:	81bb      	strh	r3, [r7, #12]
    if (HAL_I2C_Master_Transmit(hi2c, SHT30_ADDR, cmd, 2, 100) != HAL_OK) {
 8001a86:	f107 020c 	add.w	r2, r7, #12
 8001a8a:	2364      	movs	r3, #100	@ 0x64
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	2188      	movs	r1, #136	@ 0x88
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f001 f852 	bl	8002b3c <HAL_I2C_Master_Transmit>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SHT30_Init+0x2a>
        return SHT30_ERR_I2C;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e003      	b.n	8001aaa <SHT30_Init+0x32>
    }
    HAL_Delay(20);  // 等待传感器初始化完成
 8001aa2:	2014      	movs	r0, #20
 8001aa4:	f000 fc48 	bl	8002338 <HAL_Delay>
    return SHT30_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <SHT30_ReadData>:

// 读取温湿度数据
SHT30_Status SHT30_ReadData(I2C_HandleTypeDef *hi2c, float *temp, float *humidity) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	@ 0x30
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
    uint8_t rx_buf[6];
    uint8_t cmd[2] = {0xE0, 0x00};  // 周期模式读取命令[[26][65]]
 8001ac0:	23e0      	movs	r3, #224	@ 0xe0
 8001ac2:	82bb      	strh	r3, [r7, #20]

    // 发送读取命令
    if (HAL_I2C_Master_Transmit(hi2c, SHT30_ADDR, cmd, 2, 100) != HAL_OK) {
 8001ac4:	f107 0214 	add.w	r2, r7, #20
 8001ac8:	2364      	movs	r3, #100	@ 0x64
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2302      	movs	r3, #2
 8001ace:	2188      	movs	r1, #136	@ 0x88
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f001 f833 	bl	8002b3c <HAL_I2C_Master_Transmit>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SHT30_ReadData+0x2c>
        return SHT30_ERR_I2C;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e06d      	b.n	8001bbc <SHT30_ReadData+0x108>
    }
    HAL_Delay(15);  // 等待测量完成
 8001ae0:	200f      	movs	r0, #15
 8001ae2:	f000 fc29 	bl	8002338 <HAL_Delay>

    // 接收数据
    if (HAL_I2C_Master_Receive(hi2c, SHT30_ADDR, rx_buf, 6, 100) != HAL_OK) {
 8001ae6:	f107 0218 	add.w	r2, r7, #24
 8001aea:	2364      	movs	r3, #100	@ 0x64
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2306      	movs	r3, #6
 8001af0:	2188      	movs	r1, #136	@ 0x88
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f001 f920 	bl	8002d38 <HAL_I2C_Master_Receive>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SHT30_ReadData+0x4e>
        return SHT30_ERR_I2C;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e05c      	b.n	8001bbc <SHT30_ReadData+0x108>
    }

    // CRC校验
    for (int i=0; i<2; i++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b06:	e01c      	b.n	8001b42 <SHT30_ReadData+0x8e>
        if (CRC8_Calculate(&rx_buf[i*3], 2) != rx_buf[i*3+2]) {
 8001b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	f107 0218 	add.w	r2, r7, #24
 8001b14:	4413      	add	r3, r2
 8001b16:	2102      	movs	r1, #2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff76 	bl	8001a0a <CRC8_Calculate>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4619      	mov	r1, r3
 8001b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	3328      	adds	r3, #40	@ 0x28
 8001b2e:	443b      	add	r3, r7
 8001b30:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b34:	4299      	cmp	r1, r3
 8001b36:	d001      	beq.n	8001b3c <SHT30_ReadData+0x88>
            return SHT30_ERR_CRC;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e03f      	b.n	8001bbc <SHT30_ReadData+0x108>
    for (int i=0; i<2; i++) {
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	3301      	adds	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	dddf      	ble.n	8001b08 <SHT30_ReadData+0x54>
        }
    }

    // 数据转换（高精度公式）
    uint16_t raw_temp = (rx_buf[0] << 8) | rx_buf[1];
 8001b48:	7e3b      	ldrb	r3, [r7, #24]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	7e7b      	ldrb	r3, [r7, #25]
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t raw_hum = (rx_buf[3] << 8) | rx_buf[4];
 8001b58:	7efb      	ldrb	r3, [r7, #27]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	7f3b      	ldrb	r3, [r7, #28]
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	843b      	strh	r3, [r7, #32]
    
    *temp = -45 + 175 * (float)raw_temp / 65535.0f;  // 温度计算公式
 8001b68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f842 	bl	8000bf4 <__aeabi_ui2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4914      	ldr	r1, [pc, #80]	@ (8001bc4 <SHT30_ReadData+0x110>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f895 	bl	8000ca4 <__aeabi_fmul>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4912      	ldr	r1, [pc, #72]	@ (8001bc8 <SHT30_ReadData+0x114>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f944 	bl	8000e0c <__aeabi_fdiv>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4911      	ldr	r1, [pc, #68]	@ (8001bcc <SHT30_ReadData+0x118>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe ff81 	bl	8000a90 <__aeabi_fsub>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	601a      	str	r2, [r3, #0]
    *humidity = 100 * (float)raw_hum / 65535.0f;     // 湿度计算公式
 8001b96:	8c3b      	ldrh	r3, [r7, #32]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f82b 	bl	8000bf4 <__aeabi_ui2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	490b      	ldr	r1, [pc, #44]	@ (8001bd0 <SHT30_ReadData+0x11c>)
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f87e 	bl	8000ca4 <__aeabi_fmul>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <SHT30_ReadData+0x114>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f92d 	bl	8000e0c <__aeabi_fdiv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	601a      	str	r2, [r3, #0]
    
    return SHT30_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3728      	adds	r7, #40	@ 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	432f0000 	.word	0x432f0000
 8001bc8:	477fff00 	.word	0x477fff00
 8001bcc:	42340000 	.word	0x42340000
 8001bd0:	42c80000 	.word	0x42c80000

08001bd4 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	9200      	str	r2, [sp, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	2178      	movs	r1, #120	@ 0x78
 8001bee:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <OLED_Send+0x28>)
 8001bf0:	f000 ffa4 	bl	8002b3c <HAL_I2C_Master_Transmit>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200001f0 	.word	0x200001f0

08001c00 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8001c0a:	4a05      	ldr	r2, [pc, #20]	@ (8001c20 <OLED_SendCmd+0x20>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8001c10:	2102      	movs	r1, #2
 8001c12:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <OLED_SendCmd+0x20>)
 8001c14:	f7ff ffde 	bl	8001bd4 <OLED_Send>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000690 	.word	0x20000690

08001c24 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8001c28:	20ae      	movs	r0, #174	@ 0xae
 8001c2a:	f7ff ffe9 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8001c2e:	2020      	movs	r0, #32
 8001c30:	f7ff ffe6 	bl	8001c00 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001c34:	2010      	movs	r0, #16
 8001c36:	f7ff ffe3 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8001c3a:	20b0      	movs	r0, #176	@ 0xb0
 8001c3c:	f7ff ffe0 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8001c40:	20c8      	movs	r0, #200	@ 0xc8
 8001c42:	f7ff ffdd 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff ffda 	bl	8001c00 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001c4c:	2010      	movs	r0, #16
 8001c4e:	f7ff ffd7 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8001c52:	2040      	movs	r0, #64	@ 0x40
 8001c54:	f7ff ffd4 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8001c58:	2081      	movs	r0, #129	@ 0x81
 8001c5a:	f7ff ffd1 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8001c5e:	20df      	movs	r0, #223	@ 0xdf
 8001c60:	f7ff ffce 	bl	8001c00 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8001c64:	20a1      	movs	r0, #161	@ 0xa1
 8001c66:	f7ff ffcb 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8001c6a:	20a6      	movs	r0, #166	@ 0xa6
 8001c6c:	f7ff ffc8 	bl	8001c00 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8001c70:	20a8      	movs	r0, #168	@ 0xa8
 8001c72:	f7ff ffc5 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8001c76:	203f      	movs	r0, #63	@ 0x3f
 8001c78:	f7ff ffc2 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8001c7c:	20a4      	movs	r0, #164	@ 0xa4
 8001c7e:	f7ff ffbf 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8001c82:	20d3      	movs	r0, #211	@ 0xd3
 8001c84:	f7ff ffbc 	bl	8001c00 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff ffb9 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8001c8e:	20d5      	movs	r0, #213	@ 0xd5
 8001c90:	f7ff ffb6 	bl	8001c00 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8001c94:	20f0      	movs	r0, #240	@ 0xf0
 8001c96:	f7ff ffb3 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8001c9a:	20d9      	movs	r0, #217	@ 0xd9
 8001c9c:	f7ff ffb0 	bl	8001c00 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8001ca0:	2022      	movs	r0, #34	@ 0x22
 8001ca2:	f7ff ffad 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8001ca6:	20da      	movs	r0, #218	@ 0xda
 8001ca8:	f7ff ffaa 	bl	8001c00 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001cac:	2012      	movs	r0, #18
 8001cae:	f7ff ffa7 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8001cb2:	20db      	movs	r0, #219	@ 0xdb
 8001cb4:	f7ff ffa4 	bl	8001c00 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8001cb8:	2020      	movs	r0, #32
 8001cba:	f7ff ffa1 	bl	8001c00 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8001cbe:	208d      	movs	r0, #141	@ 0x8d
 8001cc0:	f7ff ff9e 	bl	8001c00 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8001cc4:	2014      	movs	r0, #20
 8001cc6:	f7ff ff9b 	bl	8001c00 <OLED_SendCmd>

  OLED_NewFrame();
 8001cca:	f000 f807 	bl	8001cdc <OLED_NewFrame>
  OLED_ShowFrame();
 8001cce:	f000 f811 	bl	8001cf4 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001cd2:	20af      	movs	r0, #175	@ 0xaf
 8001cd4:	f7ff ff94 	bl	8001c00 <OLED_SendCmd>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001ce0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <OLED_NewFrame+0x14>)
 8001ce8:	f003 f9dd 	bl	80050a6 <memset>
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000290 	.word	0x20000290

08001cf4 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <OLED_ShowFrame+0x5c>)
 8001cfc:	2240      	movs	r2, #64	@ 0x40
 8001cfe:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	71fb      	strb	r3, [r7, #7]
 8001d04:	e01b      	b.n	8001d3e <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	3b50      	subs	r3, #80	@ 0x50
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff77 	bl	8001c00 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7ff ff74 	bl	8001c00 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001d18:	2010      	movs	r0, #16
 8001d1a:	f7ff ff71 	bl	8001c00 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8001d1e:	480d      	ldr	r0, [pc, #52]	@ (8001d54 <OLED_ShowFrame+0x60>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	01db      	lsls	r3, r3, #7
 8001d24:	4a0c      	ldr	r2, [pc, #48]	@ (8001d58 <OLED_ShowFrame+0x64>)
 8001d26:	4413      	add	r3, r2
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f003 fa49 	bl	80051c2 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001d30:	2181      	movs	r1, #129	@ 0x81
 8001d32:	4807      	ldr	r0, [pc, #28]	@ (8001d50 <OLED_ShowFrame+0x5c>)
 8001d34:	f7ff ff4e 	bl	8001bd4 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b07      	cmp	r3, #7
 8001d42:	d9e0      	bls.n	8001d06 <OLED_ShowFrame+0x12>
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000694 	.word	0x20000694
 8001d54:	20000695 	.word	0x20000695
 8001d58:	20000290 	.word	0x20000290

08001d5c <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8001d5c:	b490      	push	{r4, r7}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4604      	mov	r4, r0
 8001d64:	4608      	mov	r0, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4623      	mov	r3, r4
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71bb      	strb	r3, [r7, #6]
 8001d72:	460b      	mov	r3, r1
 8001d74:	717b      	strb	r3, [r7, #5]
 8001d76:	4613      	mov	r3, r2
 8001d78:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b07      	cmp	r3, #7
 8001d7e:	d860      	bhi.n	8001e42 <OLED_SetByte_Fine+0xe6>
 8001d80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db5c      	blt.n	8001e42 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 8001d88:	7d3b      	ldrb	r3, [r7, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8001d8e:	797b      	ldrb	r3, [r7, #5]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8001d94:	7c3b      	ldrb	r3, [r7, #16]
 8001d96:	3301      	adds	r3, #1
 8001d98:	22ff      	movs	r2, #255	@ 0xff
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	b25a      	sxtb	r2, r3
 8001da0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b25a      	sxtb	r2, r3
 8001da8:	793b      	ldrb	r3, [r7, #4]
 8001daa:	f1c3 0308 	rsb	r3, r3, #8
 8001dae:	21ff      	movs	r1, #255	@ 0xff
 8001db0:	fa41 f303 	asr.w	r3, r1, r3
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <OLED_SetByte_Fine+0xf0>)
 8001dbe:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001dc0:	79fa      	ldrb	r2, [r7, #7]
 8001dc2:	79bb      	ldrb	r3, [r7, #6]
 8001dc4:	4922      	ldr	r1, [pc, #136]	@ (8001e50 <OLED_SetByte_Fine+0xf4>)
 8001dc6:	01d2      	lsls	r2, r2, #7
 8001dc8:	440a      	add	r2, r1
 8001dca:	4413      	add	r3, r2
 8001dcc:	7818      	ldrb	r0, [r3, #0]
 8001dce:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <OLED_SetByte_Fine+0xf0>)
 8001dd0:	7819      	ldrb	r1, [r3, #0]
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	4001      	ands	r1, r0
 8001dd8:	b2c8      	uxtb	r0, r1
 8001dda:	491d      	ldr	r1, [pc, #116]	@ (8001e50 <OLED_SetByte_Fine+0xf4>)
 8001ddc:	01d2      	lsls	r2, r2, #7
 8001dde:	440a      	add	r2, r1
 8001de0:	4413      	add	r3, r2
 8001de2:	4602      	mov	r2, r0
 8001de4:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001de6:	7c3b      	ldrb	r3, [r7, #16]
 8001de8:	3301      	adds	r3, #1
 8001dea:	22ff      	movs	r2, #255	@ 0xff
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	b25a      	sxtb	r2, r3
 8001df6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	b25a      	sxtb	r2, r3
 8001dfe:	793b      	ldrb	r3, [r7, #4]
 8001e00:	f1c3 0308 	rsb	r3, r3, #8
 8001e04:	21ff      	movs	r1, #255	@ 0xff
 8001e06:	fa41 f303 	asr.w	r3, r1, r3
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	4013      	ands	r3, r2
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <OLED_SetByte_Fine+0xf0>)
 8001e18:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001e1a:	79fa      	ldrb	r2, [r7, #7]
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <OLED_SetByte_Fine+0xf4>)
 8001e20:	01d2      	lsls	r2, r2, #7
 8001e22:	440a      	add	r2, r1
 8001e24:	4413      	add	r3, r2
 8001e26:	7818      	ldrb	r0, [r3, #0]
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <OLED_SetByte_Fine+0xf0>)
 8001e2a:	7819      	ldrb	r1, [r3, #0]
 8001e2c:	79fa      	ldrb	r2, [r7, #7]
 8001e2e:	79bb      	ldrb	r3, [r7, #6]
 8001e30:	4301      	orrs	r1, r0
 8001e32:	b2c8      	uxtb	r0, r1
 8001e34:	4906      	ldr	r1, [pc, #24]	@ (8001e50 <OLED_SetByte_Fine+0xf4>)
 8001e36:	01d2      	lsls	r2, r2, #7
 8001e38:	440a      	add	r2, r1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	e000      	b.n	8001e44 <OLED_SetByte_Fine+0xe8>
    return;
 8001e42:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc90      	pop	{r4, r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000715 	.word	0x20000715
 8001e50:	20000290 	.word	0x20000290

08001e54 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	4608      	mov	r0, r1
 8001e5e:	4611      	mov	r1, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	4623      	mov	r3, r4
 8001e64:	71fb      	strb	r3, [r7, #7]
 8001e66:	4603      	mov	r3, r0
 8001e68:	71bb      	strb	r3, [r7, #6]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	717b      	strb	r3, [r7, #5]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001e72:	79bb      	ldrb	r3, [r7, #6]
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8001e80:	7bba      	ldrb	r2, [r7, #14]
 8001e82:	793b      	ldrb	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	dd29      	ble.n	8001ede <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001e8a:	797a      	ldrb	r2, [r7, #5]
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	7bbc      	ldrb	r4, [r7, #14]
 8001e96:	79f9      	ldrb	r1, [r7, #7]
 8001e98:	7bf8      	ldrb	r0, [r7, #15]
 8001e9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	4623      	mov	r3, r4
 8001ea6:	f7ff ff59 	bl	8001d5c <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	3301      	adds	r3, #1
 8001eae:	b2d8      	uxtb	r0, r3
 8001eb0:	797a      	ldrb	r2, [r7, #5]
 8001eb2:	7bbb      	ldrb	r3, [r7, #14]
 8001eb4:	f1c3 0308 	rsb	r3, r3, #8
 8001eb8:	fa42 f303 	asr.w	r3, r2, r3
 8001ebc:	b2dc      	uxtb	r4, r3
 8001ebe:	793a      	ldrb	r2, [r7, #4]
 8001ec0:	7bbb      	ldrb	r3, [r7, #14]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3b09      	subs	r3, #9
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	79f9      	ldrb	r1, [r7, #7]
 8001ecc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ed0:	9201      	str	r2, [sp, #4]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4622      	mov	r2, r4
 8001ed8:	f7ff ff40 	bl	8001d5c <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001edc:	e015      	b.n	8001f0a <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8001ede:	797a      	ldrb	r2, [r7, #5]
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	b2dc      	uxtb	r4, r3
 8001ee8:	7bba      	ldrb	r2, [r7, #14]
 8001eea:	793b      	ldrb	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	7bbd      	ldrb	r5, [r7, #14]
 8001ef6:	79f9      	ldrb	r1, [r7, #7]
 8001ef8:	7bf8      	ldrb	r0, [r7, #15]
 8001efa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001efe:	9201      	str	r2, [sp, #4]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	462b      	mov	r3, r5
 8001f04:	4622      	mov	r2, r4
 8001f06:	f7ff ff29 	bl	8001d5c <OLED_SetByte_Fine>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bdb0      	pop	{r4, r5, r7, pc}

08001f12 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8001f12:	b590      	push	{r4, r7, lr}
 8001f14:	b087      	sub	sp, #28
 8001f16:	af02      	add	r7, sp, #8
 8001f18:	4604      	mov	r4, r0
 8001f1a:	4608      	mov	r0, r1
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4623      	mov	r3, r4
 8001f22:	71fb      	strb	r3, [r7, #7]
 8001f24:	4603      	mov	r3, r0
 8001f26:	71bb      	strb	r3, [r7, #6]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	717b      	strb	r3, [r7, #5]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001f30:	79bb      	ldrb	r3, [r7, #6]
 8001f32:	08db      	lsrs	r3, r3, #3
 8001f34:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001f3e:	797a      	ldrb	r2, [r7, #5]
 8001f40:	7bbb      	ldrb	r3, [r7, #14]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	7bbc      	ldrb	r4, [r7, #14]
 8001f4a:	79f9      	ldrb	r1, [r7, #7]
 8001f4c:	7bf8      	ldrb	r0, [r7, #15]
 8001f4e:	793b      	ldrb	r3, [r7, #4]
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	2307      	movs	r3, #7
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	4623      	mov	r3, r4
 8001f58:	f7ff ff00 	bl	8001d5c <OLED_SetByte_Fine>
  if (bit)
 8001f5c:	7bbb      	ldrb	r3, [r7, #14]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d014      	beq.n	8001f8c <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	3301      	adds	r3, #1
 8001f66:	b2d8      	uxtb	r0, r3
 8001f68:	797a      	ldrb	r2, [r7, #5]
 8001f6a:	7bbb      	ldrb	r3, [r7, #14]
 8001f6c:	f1c3 0308 	rsb	r3, r3, #8
 8001f70:	fa42 f303 	asr.w	r3, r2, r3
 8001f74:	b2dc      	uxtb	r4, r3
 8001f76:	7bbb      	ldrb	r3, [r7, #14]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	79f9      	ldrb	r1, [r7, #7]
 8001f7e:	793a      	ldrb	r2, [r7, #4]
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2300      	movs	r3, #0
 8001f86:	4622      	mov	r2, r4
 8001f88:	f7ff fee8 	bl	8001d5c <OLED_SetByte_Fine>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd90      	pop	{r4, r7, pc}

08001f94 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	603a      	str	r2, [r7, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	71bb      	strb	r3, [r7, #6]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001faa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fae:	08db      	lsrs	r3, r3, #3
 8001fb0:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001fb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	e025      	b.n	800200e <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73bb      	strb	r3, [r7, #14]
 8001fc6:	e01b      	b.n	8002000 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001fc8:	79fa      	ldrb	r2, [r7, #7]
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	4413      	add	r3, r2
 8001fce:	b2d8      	uxtb	r0, r3
 8001fd0:	7bbb      	ldrb	r3, [r7, #14]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	79bb      	ldrb	r3, [r7, #6]
 8001fd8:	4413      	add	r3, r2
 8001fda:	b2dc      	uxtb	r4, r3
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	7bbb      	ldrb	r3, [r7, #14]
 8001fe0:	7979      	ldrb	r1, [r7, #5]
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	f7ff ff8c 	bl	8001f12 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8001ffa:	7bbb      	ldrb	r3, [r7, #14]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	73bb      	strb	r3, [r7, #14]
 8002000:	7bba      	ldrb	r2, [r7, #14]
 8002002:	7b3b      	ldrb	r3, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d3df      	bcc.n	8001fc8 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	3301      	adds	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	797b      	ldrb	r3, [r7, #5]
 8002012:	429a      	cmp	r2, r3
 8002014:	d3d5      	bcc.n	8001fc2 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8002016:	7afb      	ldrb	r3, [r7, #11]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d028      	beq.n	800206e <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 800201c:	797b      	ldrb	r3, [r7, #5]
 800201e:	b29b      	uxth	r3, r3
 8002020:	7b3a      	ldrb	r2, [r7, #12]
 8002022:	b292      	uxth	r2, r2
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	737b      	strb	r3, [r7, #13]
 800202e:	e01a      	b.n	8002066 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	7b7b      	ldrb	r3, [r7, #13]
 8002034:	4413      	add	r3, r2
 8002036:	b2d8      	uxtb	r0, r3
 8002038:	7b3b      	ldrb	r3, [r7, #12]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	b2da      	uxtb	r2, r3
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	4413      	add	r3, r2
 8002042:	b2d9      	uxtb	r1, r3
 8002044:	893a      	ldrh	r2, [r7, #8]
 8002046:	7b7b      	ldrb	r3, [r7, #13]
 8002048:	4413      	add	r3, r2
 800204a:	461a      	mov	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4413      	add	r3, r2
 8002050:	781a      	ldrb	r2, [r3, #0]
 8002052:	7afc      	ldrb	r4, [r7, #11]
 8002054:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4623      	mov	r3, r4
 800205c:	f7ff fefa 	bl	8001e54 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8002060:	7b7b      	ldrb	r3, [r7, #13]
 8002062:	3301      	adds	r3, #1
 8002064:	737b      	strb	r3, [r7, #13]
 8002066:	7b7a      	ldrb	r2, [r7, #13]
 8002068:	797b      	ldrb	r3, [r7, #5]
 800206a:	429a      	cmp	r2, r3
 800206c:	d3e0      	bcc.n	8002030 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bd90      	pop	{r4, r7, pc}

08002076 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8002076:	b5b0      	push	{r4, r5, r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af02      	add	r7, sp, #8
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	460b      	mov	r3, r1
 8002084:	71bb      	strb	r3, [r7, #6]
 8002086:	4613      	mov	r3, r2
 8002088:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	797b      	ldrb	r3, [r7, #5]
 8002090:	f1a3 0120 	sub.w	r1, r3, #32
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	3307      	adds	r3, #7
 800209a:	2b00      	cmp	r3, #0
 800209c:	da00      	bge.n	80020a0 <OLED_PrintASCIIChar+0x2a>
 800209e:	3307      	adds	r3, #7
 80020a0:	10db      	asrs	r3, r3, #3
 80020a2:	4618      	mov	r0, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	fb00 f303 	mul.w	r3, r0, r3
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	18d4      	adds	r4, r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	785d      	ldrb	r5, [r3, #1]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	79b9      	ldrb	r1, [r7, #6]
 80020bc:	79f8      	ldrb	r0, [r7, #7]
 80020be:	7e3a      	ldrb	r2, [r7, #24]
 80020c0:	9201      	str	r2, [sp, #4]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	462b      	mov	r3, r5
 80020c6:	4622      	mov	r2, r4
 80020c8:	f7ff ff64 	bl	8001f94 <OLED_SetBlock>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bdb0      	pop	{r4, r5, r7, pc}

080020d4 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db01      	blt.n	80020ea <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e018      	b.n	800211c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80020f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80020f4:	d101      	bne.n	80020fa <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 80020f6:	2302      	movs	r3, #2
 80020f8:	e010      	b.n	800211c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002102:	2be0      	cmp	r3, #224	@ 0xe0
 8002104:	d101      	bne.n	800210a <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8002106:	2303      	movs	r3, #3
 8002108:	e008      	b.n	800211c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8002112:	2bf0      	cmp	r3, #240	@ 0xf0
 8002114:	d101      	bne.n	800211a <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8002116:	2304      	movs	r3, #4
 8002118:	e000      	b.n	800211c <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8002126:	b5b0      	push	{r4, r5, r7, lr}
 8002128:	b08a      	sub	sp, #40	@ 0x28
 800212a:	af02      	add	r7, sp, #8
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	4603      	mov	r3, r0
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	460b      	mov	r3, r1
 8002136:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8002138:	2300      	movs	r3, #0
 800213a:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	3307      	adds	r3, #7
 8002142:	2b00      	cmp	r3, #0
 8002144:	da00      	bge.n	8002148 <OLED_PrintString+0x22>
 8002146:	3307      	adds	r3, #7
 8002148:	10db      	asrs	r3, r3, #3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	7852      	ldrb	r2, [r2, #1]
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	3304      	adds	r3, #4
 8002158:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 800215a:	e07d      	b.n	8002258 <OLED_PrintString+0x132>
  {
    found = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8002160:	8bfb      	ldrh	r3, [r7, #30]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	4413      	add	r3, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ffb4 	bl	80020d4 <_OLED_GetUTF8Len>
 800216c:	4603      	mov	r3, r0
 800216e:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8002170:	7ebb      	ldrb	r3, [r7, #26]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d078      	beq.n	8002268 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8002176:	2300      	movs	r3, #0
 8002178:	773b      	strb	r3, [r7, #28]
 800217a:	e032      	b.n	80021e2 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	7f3a      	ldrb	r2, [r7, #28]
 8002182:	7ef9      	ldrb	r1, [r7, #27]
 8002184:	fb01 f202 	mul.w	r2, r1, r2
 8002188:	4413      	add	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 800218c:	8bfb      	ldrh	r3, [r7, #30]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	4413      	add	r3, r2
 8002192:	7eba      	ldrb	r2, [r7, #26]
 8002194:	6979      	ldr	r1, [r7, #20]
 8002196:	4618      	mov	r0, r3
 8002198:	f002 ff75 	bl	8005086 <memcmp>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11c      	bne.n	80021dc <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	1d1c      	adds	r4, r3, #4
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	785d      	ldrb	r5, [r3, #1]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	7bb9      	ldrb	r1, [r7, #14]
 80021b0:	7bf8      	ldrb	r0, [r7, #15]
 80021b2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80021b6:	9201      	str	r2, [sp, #4]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	462b      	mov	r3, r5
 80021bc:	4622      	mov	r2, r4
 80021be:	f7ff fee9 	bl	8001f94 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	785a      	ldrb	r2, [r3, #1]
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	4413      	add	r3, r2
 80021ca:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80021cc:	7ebb      	ldrb	r3, [r7, #26]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	4413      	add	r3, r2
 80021d4:	83fb      	strh	r3, [r7, #30]
        found = 1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	777b      	strb	r3, [r7, #29]
        break;
 80021da:	e007      	b.n	80021ec <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 80021dc:	7f3b      	ldrb	r3, [r7, #28]
 80021de:	3301      	adds	r3, #1
 80021e0:	773b      	strb	r3, [r7, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7a1b      	ldrb	r3, [r3, #8]
 80021e6:	7f3a      	ldrb	r2, [r7, #28]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3c7      	bcc.n	800217c <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 80021ec:	7f7b      	ldrb	r3, [r7, #29]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d132      	bne.n	8002258 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 80021f2:	7ebb      	ldrb	r3, [r7, #26]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d119      	bne.n	800222c <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 80021f8:	8bfb      	ldrh	r3, [r7, #30]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	4413      	add	r3, r2
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68dc      	ldr	r4, [r3, #12]
 8002204:	7bb9      	ldrb	r1, [r7, #14]
 8002206:	7bf8      	ldrb	r0, [r7, #15]
 8002208:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4623      	mov	r3, r4
 8002210:	f7ff ff31 	bl	8002076 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	785a      	ldrb	r2, [r3, #1]
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	4413      	add	r3, r2
 800221e:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002220:	7ebb      	ldrb	r3, [r7, #26]
 8002222:	b29a      	uxth	r2, r3
 8002224:	8bfb      	ldrh	r3, [r7, #30]
 8002226:	4413      	add	r3, r2
 8002228:	83fb      	strh	r3, [r7, #30]
 800222a:	e015      	b.n	8002258 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	7bb9      	ldrb	r1, [r7, #14]
 8002232:	7bf8      	ldrb	r0, [r7, #15]
 8002234:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	4613      	mov	r3, r2
 800223c:	2220      	movs	r2, #32
 800223e:	f7ff ff1a 	bl	8002076 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	785a      	ldrb	r2, [r3, #1]
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	4413      	add	r3, r2
 800224c:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800224e:	7ebb      	ldrb	r3, [r7, #26]
 8002250:	b29a      	uxth	r2, r3
 8002252:	8bfb      	ldrh	r3, [r7, #30]
 8002254:	4413      	add	r3, r2
 8002256:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8002258:	8bfb      	ldrh	r3, [r7, #30]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4413      	add	r3, r2
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f af7b 	bne.w	800215c <OLED_PrintString+0x36>
      }
    }
  }
}
 8002266:	e000      	b.n	800226a <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8002268:	bf00      	nop
}
 800226a:	bf00      	nop
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <HAL_Init+0x28>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a07      	ldr	r2, [pc, #28]	@ (800229c <HAL_Init+0x28>)
 800227e:	f043 0310 	orr.w	r3, r3, #16
 8002282:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002284:	2003      	movs	r0, #3
 8002286:	f000 f92b 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228a:	200f      	movs	r0, #15
 800228c:	f000 f808 	bl	80022a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002290:	f7ff f9fa 	bl	8001688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40022000 	.word	0x40022000

080022a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_InitTick+0x54>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_InitTick+0x58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f935 	bl	800252e <HAL_SYSTICK_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00e      	b.n	80022ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d80a      	bhi.n	80022ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d4:	2200      	movs	r2, #0
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f000 f90b 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e0:	4a06      	ldr	r2, [pc, #24]	@ (80022fc <HAL_InitTick+0x5c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000008 	.word	0x20000008
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_IncTick+0x1c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <HAL_IncTick+0x20>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a03      	ldr	r2, [pc, #12]	@ (8002320 <HAL_IncTick+0x20>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	20000008 	.word	0x20000008
 8002320:	20000718 	.word	0x20000718

08002324 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return uwTick;
 8002328:	4b02      	ldr	r3, [pc, #8]	@ (8002334 <HAL_GetTick+0x10>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	20000718 	.word	0x20000718

08002338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff fff0 	bl	8002324 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d005      	beq.n	800235e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002352:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <HAL_Delay+0x44>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235e:	bf00      	nop
 8002360:	f7ff ffe0 	bl	8002324 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d8f7      	bhi.n	8002360 <HAL_Delay+0x28>
  {
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000008 	.word	0x20000008

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	@ (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f7ff ff90 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff49 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff5e 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff90 	bl	8002438 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5f 	bl	80023e4 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffb0 	bl	800249c <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b08b      	sub	sp, #44	@ 0x2c
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	e169      	b.n	8002830 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800255c:	2201      	movs	r2, #1
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8158 	bne.w	800282a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a9a      	ldr	r2, [pc, #616]	@ (80027e8 <HAL_GPIO_Init+0x2a0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d05e      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 8002584:	4a98      	ldr	r2, [pc, #608]	@ (80027e8 <HAL_GPIO_Init+0x2a0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d875      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 800258a:	4a98      	ldr	r2, [pc, #608]	@ (80027ec <HAL_GPIO_Init+0x2a4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d058      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 8002590:	4a96      	ldr	r2, [pc, #600]	@ (80027ec <HAL_GPIO_Init+0x2a4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d86f      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 8002596:	4a96      	ldr	r2, [pc, #600]	@ (80027f0 <HAL_GPIO_Init+0x2a8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d052      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 800259c:	4a94      	ldr	r2, [pc, #592]	@ (80027f0 <HAL_GPIO_Init+0x2a8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d869      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025a2:	4a94      	ldr	r2, [pc, #592]	@ (80027f4 <HAL_GPIO_Init+0x2ac>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d04c      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 80025a8:	4a92      	ldr	r2, [pc, #584]	@ (80027f4 <HAL_GPIO_Init+0x2ac>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d863      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025ae:	4a92      	ldr	r2, [pc, #584]	@ (80027f8 <HAL_GPIO_Init+0x2b0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d046      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
 80025b4:	4a90      	ldr	r2, [pc, #576]	@ (80027f8 <HAL_GPIO_Init+0x2b0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d85d      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025ba:	2b12      	cmp	r3, #18
 80025bc:	d82a      	bhi.n	8002614 <HAL_GPIO_Init+0xcc>
 80025be:	2b12      	cmp	r3, #18
 80025c0:	d859      	bhi.n	8002676 <HAL_GPIO_Init+0x12e>
 80025c2:	a201      	add	r2, pc, #4	@ (adr r2, 80025c8 <HAL_GPIO_Init+0x80>)
 80025c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c8:	08002643 	.word	0x08002643
 80025cc:	0800261d 	.word	0x0800261d
 80025d0:	0800262f 	.word	0x0800262f
 80025d4:	08002671 	.word	0x08002671
 80025d8:	08002677 	.word	0x08002677
 80025dc:	08002677 	.word	0x08002677
 80025e0:	08002677 	.word	0x08002677
 80025e4:	08002677 	.word	0x08002677
 80025e8:	08002677 	.word	0x08002677
 80025ec:	08002677 	.word	0x08002677
 80025f0:	08002677 	.word	0x08002677
 80025f4:	08002677 	.word	0x08002677
 80025f8:	08002677 	.word	0x08002677
 80025fc:	08002677 	.word	0x08002677
 8002600:	08002677 	.word	0x08002677
 8002604:	08002677 	.word	0x08002677
 8002608:	08002677 	.word	0x08002677
 800260c:	08002625 	.word	0x08002625
 8002610:	08002639 	.word	0x08002639
 8002614:	4a79      	ldr	r2, [pc, #484]	@ (80027fc <HAL_GPIO_Init+0x2b4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800261a:	e02c      	b.n	8002676 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	623b      	str	r3, [r7, #32]
          break;
 8002622:	e029      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	3304      	adds	r3, #4
 800262a:	623b      	str	r3, [r7, #32]
          break;
 800262c:	e024      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	3308      	adds	r3, #8
 8002634:	623b      	str	r3, [r7, #32]
          break;
 8002636:	e01f      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	330c      	adds	r3, #12
 800263e:	623b      	str	r3, [r7, #32]
          break;
 8002640:	e01a      	b.n	8002678 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800264a:	2304      	movs	r3, #4
 800264c:	623b      	str	r3, [r7, #32]
          break;
 800264e:	e013      	b.n	8002678 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002658:	2308      	movs	r3, #8
 800265a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	611a      	str	r2, [r3, #16]
          break;
 8002662:	e009      	b.n	8002678 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002664:	2308      	movs	r3, #8
 8002666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	615a      	str	r2, [r3, #20]
          break;
 800266e:	e003      	b.n	8002678 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
          break;
 8002674:	e000      	b.n	8002678 <HAL_GPIO_Init+0x130>
          break;
 8002676:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2bff      	cmp	r3, #255	@ 0xff
 800267c:	d801      	bhi.n	8002682 <HAL_GPIO_Init+0x13a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	e001      	b.n	8002686 <HAL_GPIO_Init+0x13e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2bff      	cmp	r3, #255	@ 0xff
 800268c:	d802      	bhi.n	8002694 <HAL_GPIO_Init+0x14c>
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	e002      	b.n	800269a <HAL_GPIO_Init+0x152>
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	3b08      	subs	r3, #8
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	210f      	movs	r1, #15
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	401a      	ands	r2, r3
 80026ac:	6a39      	ldr	r1, [r7, #32]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	431a      	orrs	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80b1 	beq.w	800282a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002800 <HAL_GPIO_Init+0x2b8>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002800 <HAL_GPIO_Init+0x2b8>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6193      	str	r3, [r2, #24]
 80026d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002800 <HAL_GPIO_Init+0x2b8>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026e0:	4a48      	ldr	r2, [pc, #288]	@ (8002804 <HAL_GPIO_Init+0x2bc>)
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a40      	ldr	r2, [pc, #256]	@ (8002808 <HAL_GPIO_Init+0x2c0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d013      	beq.n	8002734 <HAL_GPIO_Init+0x1ec>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3f      	ldr	r2, [pc, #252]	@ (800280c <HAL_GPIO_Init+0x2c4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00d      	beq.n	8002730 <HAL_GPIO_Init+0x1e8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3e      	ldr	r2, [pc, #248]	@ (8002810 <HAL_GPIO_Init+0x2c8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <HAL_GPIO_Init+0x1e4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3d      	ldr	r2, [pc, #244]	@ (8002814 <HAL_GPIO_Init+0x2cc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_GPIO_Init+0x1e0>
 8002724:	2303      	movs	r3, #3
 8002726:	e006      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 8002728:	2304      	movs	r3, #4
 800272a:	e004      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 800272c:	2302      	movs	r3, #2
 800272e:	e002      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_GPIO_Init+0x1ee>
 8002734:	2300      	movs	r3, #0
 8002736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002738:	f002 0203 	and.w	r2, r2, #3
 800273c:	0092      	lsls	r2, r2, #2
 800273e:	4093      	lsls	r3, r2
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002746:	492f      	ldr	r1, [pc, #188]	@ (8002804 <HAL_GPIO_Init+0x2bc>)
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002760:	4b2d      	ldr	r3, [pc, #180]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	492c      	ldr	r1, [pc, #176]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800276e:	4b2a      	ldr	r3, [pc, #168]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	4928      	ldr	r1, [pc, #160]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 8002778:	4013      	ands	r3, r2
 800277a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002788:	4b23      	ldr	r3, [pc, #140]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4922      	ldr	r1, [pc, #136]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	60cb      	str	r3, [r1, #12]
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	43db      	mvns	r3, r3
 800279e:	491e      	ldr	r1, [pc, #120]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027b0:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4918      	ldr	r1, [pc, #96]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027be:	4b16      	ldr	r3, [pc, #88]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4914      	ldr	r1, [pc, #80]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d021      	beq.n	800281c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	490e      	ldr	r1, [pc, #56]	@ (8002818 <HAL_GPIO_Init+0x2d0>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
 80027e4:	e021      	b.n	800282a <HAL_GPIO_Init+0x2e2>
 80027e6:	bf00      	nop
 80027e8:	10320000 	.word	0x10320000
 80027ec:	10310000 	.word	0x10310000
 80027f0:	10220000 	.word	0x10220000
 80027f4:	10210000 	.word	0x10210000
 80027f8:	10120000 	.word	0x10120000
 80027fc:	10110000 	.word	0x10110000
 8002800:	40021000 	.word	0x40021000
 8002804:	40010000 	.word	0x40010000
 8002808:	40010800 	.word	0x40010800
 800280c:	40010c00 	.word	0x40010c00
 8002810:	40011000 	.word	0x40011000
 8002814:	40011400 	.word	0x40011400
 8002818:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_GPIO_Init+0x304>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	43db      	mvns	r3, r3
 8002824:	4909      	ldr	r1, [pc, #36]	@ (800284c <HAL_GPIO_Init+0x304>)
 8002826:	4013      	ands	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	3301      	adds	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	f47f ae8e 	bne.w	800255c <HAL_GPIO_Init+0x14>
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	372c      	adds	r7, #44	@ 0x2c
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40010400 	.word	0x40010400

08002850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
 800285c:	4613      	mov	r3, r2
 800285e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002860:	787b      	ldrb	r3, [r7, #1]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800286c:	e003      	b.n	8002876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800286e:	887b      	ldrh	r3, [r7, #2]
 8002870:	041a      	lsls	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	611a      	str	r2, [r3, #16]
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	041a      	lsls	r2, r3, #16
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43d9      	mvns	r1, r3
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	400b      	ands	r3, r1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	611a      	str	r2, [r3, #16]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e12b      	b.n	8002b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe fc2e 	bl	800113c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	@ 0x24
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002918:	f001 fbca 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 800291c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4a81      	ldr	r2, [pc, #516]	@ (8002b28 <HAL_I2C_Init+0x274>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d807      	bhi.n	8002938 <HAL_I2C_Init+0x84>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a80      	ldr	r2, [pc, #512]	@ (8002b2c <HAL_I2C_Init+0x278>)
 800292c:	4293      	cmp	r3, r2
 800292e:	bf94      	ite	ls
 8002930:	2301      	movls	r3, #1
 8002932:	2300      	movhi	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e006      	b.n	8002946 <HAL_I2C_Init+0x92>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b30 <HAL_I2C_Init+0x27c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	bf94      	ite	ls
 8002940:	2301      	movls	r3, #1
 8002942:	2300      	movhi	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0e7      	b.n	8002b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a78      	ldr	r2, [pc, #480]	@ (8002b34 <HAL_I2C_Init+0x280>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	0c9b      	lsrs	r3, r3, #18
 8002958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a6a      	ldr	r2, [pc, #424]	@ (8002b28 <HAL_I2C_Init+0x274>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d802      	bhi.n	8002988 <HAL_I2C_Init+0xd4>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	3301      	adds	r3, #1
 8002986:	e009      	b.n	800299c <HAL_I2C_Init+0xe8>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	4a69      	ldr	r2, [pc, #420]	@ (8002b38 <HAL_I2C_Init+0x284>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	3301      	adds	r3, #1
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	495c      	ldr	r1, [pc, #368]	@ (8002b28 <HAL_I2C_Init+0x274>)
 80029b8:	428b      	cmp	r3, r1
 80029ba:	d819      	bhi.n	80029f0 <HAL_I2C_Init+0x13c>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1e59      	subs	r1, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ca:	1c59      	adds	r1, r3, #1
 80029cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029d0:	400b      	ands	r3, r1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_I2C_Init+0x138>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1e59      	subs	r1, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ea:	e051      	b.n	8002a90 <HAL_I2C_Init+0x1dc>
 80029ec:	2304      	movs	r3, #4
 80029ee:	e04f      	b.n	8002a90 <HAL_I2C_Init+0x1dc>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d111      	bne.n	8002a1c <HAL_I2C_Init+0x168>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1e58      	subs	r0, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e012      	b.n	8002a42 <HAL_I2C_Init+0x18e>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e58      	subs	r0, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	0099      	lsls	r1, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Init+0x196>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e022      	b.n	8002a90 <HAL_I2C_Init+0x1dc>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10e      	bne.n	8002a70 <HAL_I2C_Init+0x1bc>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1e58      	subs	r0, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	440b      	add	r3, r1
 8002a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a64:	3301      	adds	r3, #1
 8002a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a6e:	e00f      	b.n	8002a90 <HAL_I2C_Init+0x1dc>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e58      	subs	r0, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	0099      	lsls	r1, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	6809      	ldr	r1, [r1, #0]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002abe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6911      	ldr	r1, [r2, #16]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68d2      	ldr	r2, [r2, #12]
 8002aca:	4311      	orrs	r1, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	000186a0 	.word	0x000186a0
 8002b2c:	001e847f 	.word	0x001e847f
 8002b30:	003d08ff 	.word	0x003d08ff
 8002b34:	431bde83 	.word	0x431bde83
 8002b38:	10624dd3 	.word	0x10624dd3

08002b3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	461a      	mov	r2, r3
 8002b48:	460b      	mov	r3, r1
 8002b4a:	817b      	strh	r3, [r7, #10]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff fbe8 	bl	8002324 <HAL_GetTick>
 8002b54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	f040 80e0 	bne.w	8002d24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2319      	movs	r3, #25
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4970      	ldr	r1, [pc, #448]	@ (8002d30 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fc9e 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e0d3      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_I2C_Master_Transmit+0x50>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e0cc      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d007      	beq.n	8002bb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2221      	movs	r2, #33	@ 0x21
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2210      	movs	r2, #16
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	893a      	ldrh	r2, [r7, #8]
 8002be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a50      	ldr	r2, [pc, #320]	@ (8002d34 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	6a3a      	ldr	r2, [r7, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fb08 	bl	8003210 <I2C_MasterRequestWrite>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e08d      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c20:	e066      	b.n	8002cf0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	6a39      	ldr	r1, [r7, #32]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fd5c 	bl	80036e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d107      	bne.n	8002c4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06b      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	781a      	ldrb	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_I2C_Master_Transmit+0x188>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d017      	beq.n	8002cc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	6a39      	ldr	r1, [r7, #32]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fd53 	bl	8003774 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d107      	bne.n	8002cec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e01a      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d194      	bne.n	8002c22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	00100002 	.word	0x00100002
 8002d34:	ffff0000 	.word	0xffff0000

08002d38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08c      	sub	sp, #48	@ 0x30
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	460b      	mov	r3, r1
 8002d46:	817b      	strh	r3, [r7, #10]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff fae8 	bl	8002324 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	f040 824b 	bne.w	80031fa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2319      	movs	r3, #25
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	497f      	ldr	r1, [pc, #508]	@ (8002f6c <HAL_I2C_Master_Receive+0x234>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fb9e 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e23e      	b.n	80031fc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_I2C_Master_Receive+0x54>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e237      	b.n	80031fc <HAL_I2C_Master_Receive+0x4c4>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d007      	beq.n	8002db2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2222      	movs	r2, #34	@ 0x22
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2210      	movs	r2, #16
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	893a      	ldrh	r2, [r7, #8]
 8002de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a5f      	ldr	r2, [pc, #380]	@ (8002f70 <HAL_I2C_Master_Receive+0x238>)
 8002df2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fa8a 	bl	8003314 <I2C_MasterRequestRead>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e1f8      	b.n	80031fc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d113      	bne.n	8002e3a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e1cc      	b.n	80031d4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d11e      	bne.n	8002e80 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e52:	b672      	cpsid	i
}
 8002e54:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e7c:	b662      	cpsie	i
}
 8002e7e:	e035      	b.n	8002eec <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d11e      	bne.n	8002ec6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e98:	b672      	cpsid	i
}
 8002e9a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ec2:	b662      	cpsie	i
}
 8002ec4:	e012      	b.n	8002eec <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ed4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002eec:	e172      	b.n	80031d4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	f200 811f 	bhi.w	8003136 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d123      	bne.n	8002f48 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fc7d 	bl	8003804 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e173      	b.n	80031fc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f46:	e145      	b.n	80031d4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d152      	bne.n	8002ff6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f56:	2200      	movs	r2, #0
 8002f58:	4906      	ldr	r1, [pc, #24]	@ (8002f74 <HAL_I2C_Master_Receive+0x23c>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 faa8 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e148      	b.n	80031fc <HAL_I2C_Master_Receive+0x4c4>
 8002f6a:	bf00      	nop
 8002f6c:	00100002 	.word	0x00100002
 8002f70:	ffff0000 	.word	0xffff0000
 8002f74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f78:	b672      	cpsid	i
}
 8002f7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fbe:	b662      	cpsie	i
}
 8002fc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ff4:	e0ee      	b.n	80031d4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	4981      	ldr	r1, [pc, #516]	@ (8003204 <HAL_I2C_Master_Receive+0x4cc>)
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fa55 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0f5      	b.n	80031fc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800301e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003020:	b672      	cpsid	i
}
 8003022:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003056:	4b6c      	ldr	r3, [pc, #432]	@ (8003208 <HAL_I2C_Master_Receive+0x4d0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	08db      	lsrs	r3, r3, #3
 800305c:	4a6b      	ldr	r2, [pc, #428]	@ (800320c <HAL_I2C_Master_Receive+0x4d4>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0a1a      	lsrs	r2, r3, #8
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00da      	lsls	r2, r3, #3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	3b01      	subs	r3, #1
 8003074:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d118      	bne.n	80030ae <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800309e:	b662      	cpsie	i
}
 80030a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0a6      	b.n	80031fc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d1d9      	bne.n	8003070 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030fe:	b662      	cpsie	i
}
 8003100:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003134:	e04e      	b.n	80031d4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fb62 	bl	8003804 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e058      	b.n	80031fc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d124      	bne.n	80031d4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f47f ae88 	bne.w	8002eee <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	@ 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010004 	.word	0x00010004
 8003208:	20000000 	.word	0x20000000
 800320c:	14f8b589 	.word	0x14f8b589

08003210 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	460b      	mov	r3, r1
 800321e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d006      	beq.n	800323a <I2C_MasterRequestWrite+0x2a>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d003      	beq.n	800323a <I2C_MasterRequestWrite+0x2a>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003238:	d108      	bne.n	800324c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e00b      	b.n	8003264 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	2b12      	cmp	r3, #18
 8003252:	d107      	bne.n	8003264 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003262:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f91d 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800328a:	d103      	bne.n	8003294 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003292:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e035      	b.n	8003304 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032a0:	d108      	bne.n	80032b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032a2:	897b      	ldrh	r3, [r7, #10]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032b0:	611a      	str	r2, [r3, #16]
 80032b2:	e01b      	b.n	80032ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032b4:	897b      	ldrh	r3, [r7, #10]
 80032b6:	11db      	asrs	r3, r3, #7
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f003 0306 	and.w	r3, r3, #6
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f063 030f 	orn	r3, r3, #15
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	490e      	ldr	r1, [pc, #56]	@ (800330c <I2C_MasterRequestWrite+0xfc>)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f966 	bl	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e010      	b.n	8003304 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4907      	ldr	r1, [pc, #28]	@ (8003310 <I2C_MasterRequestWrite+0x100>)
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f956 	bl	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	00010008 	.word	0x00010008
 8003310:	00010002 	.word	0x00010002

08003314 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	460b      	mov	r3, r1
 8003322:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003338:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d006      	beq.n	800334e <I2C_MasterRequestRead+0x3a>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d003      	beq.n	800334e <I2C_MasterRequestRead+0x3a>
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800334c:	d108      	bne.n	8003360 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e00b      	b.n	8003378 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	2b11      	cmp	r3, #17
 8003366:	d107      	bne.n	8003378 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003376:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f893 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800339e:	d103      	bne.n	80033a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e079      	b.n	80034a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033b4:	d108      	bne.n	80033c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	611a      	str	r2, [r3, #16]
 80033c6:	e05f      	b.n	8003488 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033c8:	897b      	ldrh	r3, [r7, #10]
 80033ca:	11db      	asrs	r3, r3, #7
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 0306 	and.w	r3, r3, #6
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f063 030f 	orn	r3, r3, #15
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4930      	ldr	r1, [pc, #192]	@ (80034a8 <I2C_MasterRequestRead+0x194>)
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f8dc 	bl	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e054      	b.n	80034a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033f6:	897b      	ldrh	r3, [r7, #10]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4929      	ldr	r1, [pc, #164]	@ (80034ac <I2C_MasterRequestRead+0x198>)
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f8cc 	bl	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e044      	b.n	80034a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800343a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f831 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00d      	beq.n	8003470 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003462:	d103      	bne.n	800346c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e017      	b.n	80034a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003470:	897b      	ldrh	r3, [r7, #10]
 8003472:	11db      	asrs	r3, r3, #7
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f003 0306 	and.w	r3, r3, #6
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f063 030e 	orn	r3, r3, #14
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4907      	ldr	r1, [pc, #28]	@ (80034ac <I2C_MasterRequestRead+0x198>)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f888 	bl	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	00010008 	.word	0x00010008
 80034ac:	00010002 	.word	0x00010002

080034b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c0:	e048      	b.n	8003554 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d044      	beq.n	8003554 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ca:	f7fe ff2b 	bl	8002324 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d302      	bcc.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d139      	bne.n	8003554 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	0c1b      	lsrs	r3, r3, #16
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d10d      	bne.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	e00c      	b.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	43da      	mvns	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	429a      	cmp	r2, r3
 8003524:	d116      	bne.n	8003554 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e023      	b.n	800359c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d10d      	bne.n	800357a <I2C_WaitOnFlagUntilTimeout+0xca>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	43da      	mvns	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	e00c      	b.n	8003594 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	43da      	mvns	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	429a      	cmp	r2, r3
 8003598:	d093      	beq.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b2:	e071      	b.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c2:	d123      	bne.n	800360c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	f043 0204 	orr.w	r2, r3, #4
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e067      	b.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003612:	d041      	beq.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003614:	f7fe fe86 	bl	8002324 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	d302      	bcc.n	800362a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d136      	bne.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d10c      	bne.n	800364e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	bf14      	ite	ne
 8003646:	2301      	movne	r3, #1
 8003648:	2300      	moveq	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	e00b      	b.n	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	43da      	mvns	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e021      	b.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d10c      	bne.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	43da      	mvns	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e00b      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f af6d 	bne.w	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036f0:	e034      	b.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f8e3 	bl	80038be <I2C_IsAcknowledgeFailed>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e034      	b.n	800376c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d028      	beq.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fe fe0b 	bl	8002324 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11d      	bne.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372a:	2b80      	cmp	r3, #128	@ 0x80
 800372c:	d016      	beq.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e007      	b.n	800376c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003766:	2b80      	cmp	r3, #128	@ 0x80
 8003768:	d1c3      	bne.n	80036f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003780:	e034      	b.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f89b 	bl	80038be <I2C_IsAcknowledgeFailed>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e034      	b.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d028      	beq.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379a:	f7fe fdc3 	bl	8002324 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d302      	bcc.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d11d      	bne.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d016      	beq.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e007      	b.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d1c3      	bne.n	8003782 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003810:	e049      	b.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b10      	cmp	r3, #16
 800381e:	d119      	bne.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0210 	mvn.w	r2, #16
 8003828:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e030      	b.n	80038b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003854:	f7fe fd66 	bl	8002324 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	d302      	bcc.n	800386a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11d      	bne.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003874:	2b40      	cmp	r3, #64	@ 0x40
 8003876:	d016      	beq.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e007      	b.n	80038b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b0:	2b40      	cmp	r3, #64	@ 0x40
 80038b2:	d1ae      	bne.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d4:	d11b      	bne.n	800390e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	f043 0204 	orr.w	r2, r3, #4
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
	...

0800391c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e272      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8087 	beq.w	8003a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800393c:	4b92      	ldr	r3, [pc, #584]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b04      	cmp	r3, #4
 8003946:	d00c      	beq.n	8003962 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003948:	4b8f      	ldr	r3, [pc, #572]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d112      	bne.n	800397a <HAL_RCC_OscConfig+0x5e>
 8003954:	4b8c      	ldr	r3, [pc, #560]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003960:	d10b      	bne.n	800397a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003962:	4b89      	ldr	r3, [pc, #548]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d06c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x12c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d168      	bne.n	8003a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e24c      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x76>
 8003984:	4b80      	ldr	r3, [pc, #512]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a7f      	ldr	r2, [pc, #508]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800398a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	e02e      	b.n	80039f0 <HAL_RCC_OscConfig+0xd4>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x98>
 800399a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a7a      	ldr	r2, [pc, #488]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b78      	ldr	r3, [pc, #480]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a77      	ldr	r2, [pc, #476]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e01d      	b.n	80039f0 <HAL_RCC_OscConfig+0xd4>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0xbc>
 80039be:	4b72      	ldr	r3, [pc, #456]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a71      	ldr	r2, [pc, #452]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e00b      	b.n	80039f0 <HAL_RCC_OscConfig+0xd4>
 80039d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b68      	ldr	r3, [pc, #416]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a67      	ldr	r2, [pc, #412]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d013      	beq.n	8003a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe fc94 	bl	8002324 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fe fc90 	bl	8002324 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	@ 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e200      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	4b5d      	ldr	r3, [pc, #372]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0xe4>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fe fc80 	bl	8002324 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe fc7c 	bl	8002324 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	@ 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e1ec      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	4b53      	ldr	r3, [pc, #332]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x10c>
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d063      	beq.n	8003b1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a56:	4b4c      	ldr	r3, [pc, #304]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a62:	4b49      	ldr	r3, [pc, #292]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d11c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x18c>
 8003a6e:	4b46      	ldr	r3, [pc, #280]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d116      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7a:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_RCC_OscConfig+0x176>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e1c0      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a92:	4b3d      	ldr	r3, [pc, #244]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4939      	ldr	r1, [pc, #228]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa6:	e03a      	b.n	8003b1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d020      	beq.n	8003af2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab0:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fe fc35 	bl	8002324 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003abe:	f7fe fc31 	bl	8002324 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e1a1      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003adc:	4b2a      	ldr	r3, [pc, #168]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4927      	ldr	r1, [pc, #156]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]
 8003af0:	e015      	b.n	8003b1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af2:	4b26      	ldr	r3, [pc, #152]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fe fc14 	bl	8002324 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b00:	f7fe fc10 	bl	8002324 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e180      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d03a      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d019      	beq.n	8003b66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b32:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b38:	f7fe fbf4 	bl	8002324 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b40:	f7fe fbf0 	bl	8002324 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e160      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f000 face 	bl	8004100 <RCC_Delay>
 8003b64:	e01c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b66:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe fbda 	bl	8002324 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b72:	e00f      	b.n	8003b94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b74:	f7fe fbd6 	bl	8002324 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d908      	bls.n	8003b94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e146      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	42420000 	.word	0x42420000
 8003b90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	4b92      	ldr	r3, [pc, #584]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e9      	bne.n	8003b74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a6 	beq.w	8003cfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10d      	bne.n	8003bda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	4b88      	ldr	r3, [pc, #544]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	4a87      	ldr	r2, [pc, #540]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc8:	61d3      	str	r3, [r2, #28]
 8003bca:	4b85      	ldr	r3, [pc, #532]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bda:	4b82      	ldr	r3, [pc, #520]	@ (8003de4 <HAL_RCC_OscConfig+0x4c8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d118      	bne.n	8003c18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be6:	4b7f      	ldr	r3, [pc, #508]	@ (8003de4 <HAL_RCC_OscConfig+0x4c8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a7e      	ldr	r2, [pc, #504]	@ (8003de4 <HAL_RCC_OscConfig+0x4c8>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf2:	f7fe fb97 	bl	8002324 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fe fb93 	bl	8002324 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b64      	cmp	r3, #100	@ 0x64
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e103      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	4b75      	ldr	r3, [pc, #468]	@ (8003de4 <HAL_RCC_OscConfig+0x4c8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x312>
 8003c20:	4b6f      	ldr	r3, [pc, #444]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	4a6e      	ldr	r2, [pc, #440]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6213      	str	r3, [r2, #32]
 8003c2c:	e02d      	b.n	8003c8a <HAL_RCC_OscConfig+0x36e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x334>
 8003c36:	4b6a      	ldr	r3, [pc, #424]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4a69      	ldr	r2, [pc, #420]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	6213      	str	r3, [r2, #32]
 8003c42:	4b67      	ldr	r3, [pc, #412]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4a66      	ldr	r2, [pc, #408]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	f023 0304 	bic.w	r3, r3, #4
 8003c4c:	6213      	str	r3, [r2, #32]
 8003c4e:	e01c      	b.n	8003c8a <HAL_RCC_OscConfig+0x36e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d10c      	bne.n	8003c72 <HAL_RCC_OscConfig+0x356>
 8003c58:	4b61      	ldr	r3, [pc, #388]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4a60      	ldr	r2, [pc, #384]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	f043 0304 	orr.w	r3, r3, #4
 8003c62:	6213      	str	r3, [r2, #32]
 8003c64:	4b5e      	ldr	r3, [pc, #376]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	4a5d      	ldr	r2, [pc, #372]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6213      	str	r3, [r2, #32]
 8003c70:	e00b      	b.n	8003c8a <HAL_RCC_OscConfig+0x36e>
 8003c72:	4b5b      	ldr	r3, [pc, #364]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	4a5a      	ldr	r2, [pc, #360]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	6213      	str	r3, [r2, #32]
 8003c7e:	4b58      	ldr	r3, [pc, #352]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a57      	ldr	r2, [pc, #348]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d015      	beq.n	8003cbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c92:	f7fe fb47 	bl	8002324 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fe fb43 	bl	8002324 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e0b1      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ee      	beq.n	8003c9a <HAL_RCC_OscConfig+0x37e>
 8003cbc:	e014      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fb31 	bl	8002324 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fe fb2d 	bl	8002324 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e09b      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cdc:	4b40      	ldr	r3, [pc, #256]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ee      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d105      	bne.n	8003cfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cee:	4b3c      	ldr	r3, [pc, #240]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4a3b      	ldr	r2, [pc, #236]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8087 	beq.w	8003e12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d04:	4b36      	ldr	r3, [pc, #216]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d061      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d146      	bne.n	8003da6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d18:	4b33      	ldr	r3, [pc, #204]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fe fb01 	bl	8002324 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fe fafd 	bl	8002324 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e06d      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d38:	4b29      	ldr	r3, [pc, #164]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f0      	bne.n	8003d26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4c:	d108      	bne.n	8003d60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d4e:	4b24      	ldr	r3, [pc, #144]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	4921      	ldr	r1, [pc, #132]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d60:	4b1f      	ldr	r3, [pc, #124]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a19      	ldr	r1, [r3, #32]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	430b      	orrs	r3, r1
 8003d72:	491b      	ldr	r1, [pc, #108]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d78:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7fe fad1 	bl	8002324 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d86:	f7fe facd 	bl	8002324 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e03d      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d98:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x46a>
 8003da4:	e035      	b.n	8003e12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da6:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fe faba 	bl	8002324 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fe fab6 	bl	8002324 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e026      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc6:	4b06      	ldr	r3, [pc, #24]	@ (8003de0 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x498>
 8003dd2:	e01e      	b.n	8003e12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e019      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40007000 	.word	0x40007000
 8003de8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dec:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <HAL_RCC_OscConfig+0x500>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000

08003e20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0d0      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e34:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d910      	bls.n	8003e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b67      	ldr	r3, [pc, #412]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 0207 	bic.w	r2, r3, #7
 8003e4a:	4965      	ldr	r1, [pc, #404]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b63      	ldr	r3, [pc, #396]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0b8      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d020      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e7c:	4b59      	ldr	r3, [pc, #356]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a58      	ldr	r2, [pc, #352]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e94:	4b53      	ldr	r3, [pc, #332]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a52      	ldr	r2, [pc, #328]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea0:	4b50      	ldr	r3, [pc, #320]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	494d      	ldr	r1, [pc, #308]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d040      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	4b47      	ldr	r3, [pc, #284]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d115      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e07f      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ede:	4b41      	ldr	r3, [pc, #260]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e073      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eee:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e06b      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efe:	4b39      	ldr	r3, [pc, #228]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f023 0203 	bic.w	r2, r3, #3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4936      	ldr	r1, [pc, #216]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f10:	f7fe fa08 	bl	8002324 <HAL_GetTick>
 8003f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f18:	f7fe fa04 	bl	8002324 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e053      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 020c 	and.w	r2, r3, #12
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d1eb      	bne.n	8003f18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f40:	4b27      	ldr	r3, [pc, #156]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d210      	bcs.n	8003f70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	4b24      	ldr	r3, [pc, #144]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 0207 	bic.w	r2, r3, #7
 8003f56:	4922      	ldr	r1, [pc, #136]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e032      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f7c:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4916      	ldr	r1, [pc, #88]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f9a:	4b12      	ldr	r3, [pc, #72]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	490e      	ldr	r1, [pc, #56]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fae:	f000 f821 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	490a      	ldr	r1, [pc, #40]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	5ccb      	ldrb	r3, [r1, r3]
 8003fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc6:	4a09      	ldr	r2, [pc, #36]	@ (8003fec <HAL_RCC_ClockConfig+0x1cc>)
 8003fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fca:	4b09      	ldr	r3, [pc, #36]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe f966 	bl	80022a0 <HAL_InitTick>

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	0800730c 	.word	0x0800730c
 8003fec:	20000000 	.word	0x20000000
 8003ff0:	20000004 	.word	0x20000004

08003ff4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800400e:	4b1e      	ldr	r3, [pc, #120]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x94>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b04      	cmp	r3, #4
 800401c:	d002      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x30>
 800401e:	2b08      	cmp	r3, #8
 8004020:	d003      	beq.n	800402a <HAL_RCC_GetSysClockFreq+0x36>
 8004022:	e027      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004024:	4b19      	ldr	r3, [pc, #100]	@ (800408c <HAL_RCC_GetSysClockFreq+0x98>)
 8004026:	613b      	str	r3, [r7, #16]
      break;
 8004028:	e027      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	0c9b      	lsrs	r3, r3, #18
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	4a17      	ldr	r2, [pc, #92]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004034:	5cd3      	ldrb	r3, [r2, r3]
 8004036:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d010      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004042:	4b11      	ldr	r3, [pc, #68]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x94>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	0c5b      	lsrs	r3, r3, #17
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	4a11      	ldr	r2, [pc, #68]	@ (8004094 <HAL_RCC_GetSysClockFreq+0xa0>)
 800404e:	5cd3      	ldrb	r3, [r2, r3]
 8004050:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a0d      	ldr	r2, [pc, #52]	@ (800408c <HAL_RCC_GetSysClockFreq+0x98>)
 8004056:	fb03 f202 	mul.w	r2, r3, r2
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e004      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a0c      	ldr	r2, [pc, #48]	@ (8004098 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004068:	fb02 f303 	mul.w	r3, r2, r3
 800406c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	613b      	str	r3, [r7, #16]
      break;
 8004072:	e002      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_RCC_GetSysClockFreq+0x98>)
 8004076:	613b      	str	r3, [r7, #16]
      break;
 8004078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800407a:	693b      	ldr	r3, [r7, #16]
}
 800407c:	4618      	mov	r0, r3
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	007a1200 	.word	0x007a1200
 8004090:	080083f8 	.word	0x080083f8
 8004094:	08008408 	.word	0x08008408
 8004098:	003d0900 	.word	0x003d0900

0800409c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a0:	4b02      	ldr	r3, [pc, #8]	@ (80040ac <HAL_RCC_GetHCLKFreq+0x10>)
 80040a2:	681b      	ldr	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	20000000 	.word	0x20000000

080040b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040b4:	f7ff fff2 	bl	800409c <HAL_RCC_GetHCLKFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4903      	ldr	r1, [pc, #12]	@ (80040d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000
 80040d4:	0800731c 	.word	0x0800731c

080040d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040dc:	f7ff ffde 	bl	800409c <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	0adb      	lsrs	r3, r3, #11
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4903      	ldr	r1, [pc, #12]	@ (80040fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	0800731c 	.word	0x0800731c

08004100 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004108:	4b0a      	ldr	r3, [pc, #40]	@ (8004134 <RCC_Delay+0x34>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0a      	ldr	r2, [pc, #40]	@ (8004138 <RCC_Delay+0x38>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	0a5b      	lsrs	r3, r3, #9
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800411c:	bf00      	nop
  }
  while (Delay --);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1e5a      	subs	r2, r3, #1
 8004122:	60fa      	str	r2, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f9      	bne.n	800411c <RCC_Delay+0x1c>
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	20000000 	.word	0x20000000
 8004138:	10624dd3 	.word	0x10624dd3

0800413c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e042      	b.n	80041d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd fbe0 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	@ 0x24
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800417e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f971 	bl	8004468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	@ 0x28
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d175      	bne.n	80042e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_UART_Transmit+0x2c>
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e06e      	b.n	80042ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2221      	movs	r2, #33	@ 0x21
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800421a:	f7fe f883 	bl	8002324 <HAL_GetTick>
 800421e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	88fa      	ldrh	r2, [r7, #6]
 800422a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004234:	d108      	bne.n	8004248 <HAL_UART_Transmit+0x6c>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	e003      	b.n	8004250 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800424c:	2300      	movs	r3, #0
 800424e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004250:	e02e      	b.n	80042b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2200      	movs	r2, #0
 800425a:	2180      	movs	r1, #128	@ 0x80
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f848 	bl	80042f2 <UART_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e03a      	b.n	80042ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10b      	bne.n	8004292 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	3302      	adds	r3, #2
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e007      	b.n	80042a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	3301      	adds	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1cb      	bne.n	8004252 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2200      	movs	r2, #0
 80042c2:	2140      	movs	r1, #64	@ 0x40
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f814 	bl	80042f2 <UART_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e006      	b.n	80042ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e000      	b.n	80042ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
  }
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004302:	e03b      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d037      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430c:	f7fe f80a 	bl	8002324 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	6a3a      	ldr	r2, [r7, #32]
 8004318:	429a      	cmp	r2, r3
 800431a:	d302      	bcc.n	8004322 <UART_WaitOnFlagUntilTimeout+0x30>
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e03a      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d023      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b80      	cmp	r3, #128	@ 0x80
 8004338:	d020      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0x8a>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b40      	cmp	r3, #64	@ 0x40
 800433e:	d01d      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b08      	cmp	r3, #8
 800434c:	d116      	bne.n	800437c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f81d 	bl	80043a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2208      	movs	r2, #8
 800436e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e00f      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	429a      	cmp	r2, r3
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	429a      	cmp	r2, r3
 8004398:	d0b4      	beq.n	8004304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b095      	sub	sp, #84	@ 0x54
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3314      	adds	r3, #20
 80043fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004400:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	2b01      	cmp	r3, #1
 800441a:	d119      	bne.n	8004450 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60bb      	str	r3, [r7, #8]
   return(result);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f023 0310 	bic.w	r3, r3, #16
 8004432:	647b      	str	r3, [r7, #68]	@ 0x44
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800443c:	61ba      	str	r2, [r7, #24]
 800443e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	613b      	str	r3, [r7, #16]
   return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e5      	bne.n	800441c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800445e:	bf00      	nop
 8004460:	3754      	adds	r7, #84	@ 0x54
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80044a2:	f023 030c 	bic.w	r3, r3, #12
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2c      	ldr	r2, [pc, #176]	@ (800457c <UART_SetConfig+0x114>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d103      	bne.n	80044d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044d0:	f7ff fe02 	bl	80040d8 <HAL_RCC_GetPCLK2Freq>
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	e002      	b.n	80044de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044d8:	f7ff fdea 	bl	80040b0 <HAL_RCC_GetPCLK1Freq>
 80044dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009a      	lsls	r2, r3, #2
 80044e8:	441a      	add	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	4a22      	ldr	r2, [pc, #136]	@ (8004580 <UART_SetConfig+0x118>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	0119      	lsls	r1, r3, #4
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009a      	lsls	r2, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	fbb2 f2f3 	udiv	r2, r2, r3
 8004514:	4b1a      	ldr	r3, [pc, #104]	@ (8004580 <UART_SetConfig+0x118>)
 8004516:	fba3 0302 	umull	r0, r3, r3, r2
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2064      	movs	r0, #100	@ 0x64
 800451e:	fb00 f303 	mul.w	r3, r0, r3
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	3332      	adds	r3, #50	@ 0x32
 8004528:	4a15      	ldr	r2, [pc, #84]	@ (8004580 <UART_SetConfig+0x118>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004534:	4419      	add	r1, r3
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009a      	lsls	r2, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	fbb2 f2f3 	udiv	r2, r2, r3
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <UART_SetConfig+0x118>)
 800454e:	fba3 0302 	umull	r0, r3, r3, r2
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2064      	movs	r0, #100	@ 0x64
 8004556:	fb00 f303 	mul.w	r3, r0, r3
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	3332      	adds	r3, #50	@ 0x32
 8004560:	4a07      	ldr	r2, [pc, #28]	@ (8004580 <UART_SetConfig+0x118>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	440a      	add	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40013800 	.word	0x40013800
 8004580:	51eb851f 	.word	0x51eb851f

08004584 <__cvt>:
 8004584:	2b00      	cmp	r3, #0
 8004586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800458a:	461d      	mov	r5, r3
 800458c:	bfbb      	ittet	lt
 800458e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004592:	461d      	movlt	r5, r3
 8004594:	2300      	movge	r3, #0
 8004596:	232d      	movlt	r3, #45	@ 0x2d
 8004598:	b088      	sub	sp, #32
 800459a:	4614      	mov	r4, r2
 800459c:	bfb8      	it	lt
 800459e:	4614      	movlt	r4, r2
 80045a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80045a2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80045a4:	7013      	strb	r3, [r2, #0]
 80045a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80045a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80045ac:	f023 0820 	bic.w	r8, r3, #32
 80045b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045b4:	d005      	beq.n	80045c2 <__cvt+0x3e>
 80045b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80045ba:	d100      	bne.n	80045be <__cvt+0x3a>
 80045bc:	3601      	adds	r6, #1
 80045be:	2302      	movs	r3, #2
 80045c0:	e000      	b.n	80045c4 <__cvt+0x40>
 80045c2:	2303      	movs	r3, #3
 80045c4:	aa07      	add	r2, sp, #28
 80045c6:	9204      	str	r2, [sp, #16]
 80045c8:	aa06      	add	r2, sp, #24
 80045ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045ce:	e9cd 3600 	strd	r3, r6, [sp]
 80045d2:	4622      	mov	r2, r4
 80045d4:	462b      	mov	r3, r5
 80045d6:	f000 fe8b 	bl	80052f0 <_dtoa_r>
 80045da:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80045de:	4607      	mov	r7, r0
 80045e0:	d119      	bne.n	8004616 <__cvt+0x92>
 80045e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80045e4:	07db      	lsls	r3, r3, #31
 80045e6:	d50e      	bpl.n	8004606 <__cvt+0x82>
 80045e8:	eb00 0906 	add.w	r9, r0, r6
 80045ec:	2200      	movs	r2, #0
 80045ee:	2300      	movs	r3, #0
 80045f0:	4620      	mov	r0, r4
 80045f2:	4629      	mov	r1, r5
 80045f4:	f7fc f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 80045f8:	b108      	cbz	r0, 80045fe <__cvt+0x7a>
 80045fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80045fe:	2230      	movs	r2, #48	@ 0x30
 8004600:	9b07      	ldr	r3, [sp, #28]
 8004602:	454b      	cmp	r3, r9
 8004604:	d31e      	bcc.n	8004644 <__cvt+0xc0>
 8004606:	4638      	mov	r0, r7
 8004608:	9b07      	ldr	r3, [sp, #28]
 800460a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800460c:	1bdb      	subs	r3, r3, r7
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	b008      	add	sp, #32
 8004612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004616:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800461a:	eb00 0906 	add.w	r9, r0, r6
 800461e:	d1e5      	bne.n	80045ec <__cvt+0x68>
 8004620:	7803      	ldrb	r3, [r0, #0]
 8004622:	2b30      	cmp	r3, #48	@ 0x30
 8004624:	d10a      	bne.n	800463c <__cvt+0xb8>
 8004626:	2200      	movs	r2, #0
 8004628:	2300      	movs	r3, #0
 800462a:	4620      	mov	r0, r4
 800462c:	4629      	mov	r1, r5
 800462e:	f7fc f9bb 	bl	80009a8 <__aeabi_dcmpeq>
 8004632:	b918      	cbnz	r0, 800463c <__cvt+0xb8>
 8004634:	f1c6 0601 	rsb	r6, r6, #1
 8004638:	f8ca 6000 	str.w	r6, [sl]
 800463c:	f8da 3000 	ldr.w	r3, [sl]
 8004640:	4499      	add	r9, r3
 8004642:	e7d3      	b.n	80045ec <__cvt+0x68>
 8004644:	1c59      	adds	r1, r3, #1
 8004646:	9107      	str	r1, [sp, #28]
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	e7d9      	b.n	8004600 <__cvt+0x7c>

0800464c <__exponent>:
 800464c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800464e:	2900      	cmp	r1, #0
 8004650:	bfb6      	itet	lt
 8004652:	232d      	movlt	r3, #45	@ 0x2d
 8004654:	232b      	movge	r3, #43	@ 0x2b
 8004656:	4249      	neglt	r1, r1
 8004658:	2909      	cmp	r1, #9
 800465a:	7002      	strb	r2, [r0, #0]
 800465c:	7043      	strb	r3, [r0, #1]
 800465e:	dd29      	ble.n	80046b4 <__exponent+0x68>
 8004660:	f10d 0307 	add.w	r3, sp, #7
 8004664:	461d      	mov	r5, r3
 8004666:	270a      	movs	r7, #10
 8004668:	fbb1 f6f7 	udiv	r6, r1, r7
 800466c:	461a      	mov	r2, r3
 800466e:	fb07 1416 	mls	r4, r7, r6, r1
 8004672:	3430      	adds	r4, #48	@ 0x30
 8004674:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004678:	460c      	mov	r4, r1
 800467a:	2c63      	cmp	r4, #99	@ 0x63
 800467c:	4631      	mov	r1, r6
 800467e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004682:	dcf1      	bgt.n	8004668 <__exponent+0x1c>
 8004684:	3130      	adds	r1, #48	@ 0x30
 8004686:	1e94      	subs	r4, r2, #2
 8004688:	f803 1c01 	strb.w	r1, [r3, #-1]
 800468c:	4623      	mov	r3, r4
 800468e:	1c41      	adds	r1, r0, #1
 8004690:	42ab      	cmp	r3, r5
 8004692:	d30a      	bcc.n	80046aa <__exponent+0x5e>
 8004694:	f10d 0309 	add.w	r3, sp, #9
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	42ac      	cmp	r4, r5
 800469c:	bf88      	it	hi
 800469e:	2300      	movhi	r3, #0
 80046a0:	3302      	adds	r3, #2
 80046a2:	4403      	add	r3, r0
 80046a4:	1a18      	subs	r0, r3, r0
 80046a6:	b003      	add	sp, #12
 80046a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80046ae:	f801 6f01 	strb.w	r6, [r1, #1]!
 80046b2:	e7ed      	b.n	8004690 <__exponent+0x44>
 80046b4:	2330      	movs	r3, #48	@ 0x30
 80046b6:	3130      	adds	r1, #48	@ 0x30
 80046b8:	7083      	strb	r3, [r0, #2]
 80046ba:	70c1      	strb	r1, [r0, #3]
 80046bc:	1d03      	adds	r3, r0, #4
 80046be:	e7f1      	b.n	80046a4 <__exponent+0x58>

080046c0 <_printf_float>:
 80046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	b091      	sub	sp, #68	@ 0x44
 80046c6:	460c      	mov	r4, r1
 80046c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80046cc:	4616      	mov	r6, r2
 80046ce:	461f      	mov	r7, r3
 80046d0:	4605      	mov	r5, r0
 80046d2:	f000 fcf1 	bl	80050b8 <_localeconv_r>
 80046d6:	6803      	ldr	r3, [r0, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	9308      	str	r3, [sp, #32]
 80046dc:	f7fb fd38 	bl	8000150 <strlen>
 80046e0:	2300      	movs	r3, #0
 80046e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80046e4:	f8d8 3000 	ldr.w	r3, [r8]
 80046e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80046ea:	3307      	adds	r3, #7
 80046ec:	f023 0307 	bic.w	r3, r3, #7
 80046f0:	f103 0208 	add.w	r2, r3, #8
 80046f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046f8:	f8d4 b000 	ldr.w	fp, [r4]
 80046fc:	f8c8 2000 	str.w	r2, [r8]
 8004700:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004704:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800470a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800470e:	f04f 32ff 	mov.w	r2, #4294967295
 8004712:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004716:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800471a:	4b9c      	ldr	r3, [pc, #624]	@ (800498c <_printf_float+0x2cc>)
 800471c:	f7fc f976 	bl	8000a0c <__aeabi_dcmpun>
 8004720:	bb70      	cbnz	r0, 8004780 <_printf_float+0xc0>
 8004722:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004726:	f04f 32ff 	mov.w	r2, #4294967295
 800472a:	4b98      	ldr	r3, [pc, #608]	@ (800498c <_printf_float+0x2cc>)
 800472c:	f7fc f950 	bl	80009d0 <__aeabi_dcmple>
 8004730:	bb30      	cbnz	r0, 8004780 <_printf_float+0xc0>
 8004732:	2200      	movs	r2, #0
 8004734:	2300      	movs	r3, #0
 8004736:	4640      	mov	r0, r8
 8004738:	4649      	mov	r1, r9
 800473a:	f7fc f93f 	bl	80009bc <__aeabi_dcmplt>
 800473e:	b110      	cbz	r0, 8004746 <_printf_float+0x86>
 8004740:	232d      	movs	r3, #45	@ 0x2d
 8004742:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004746:	4a92      	ldr	r2, [pc, #584]	@ (8004990 <_printf_float+0x2d0>)
 8004748:	4b92      	ldr	r3, [pc, #584]	@ (8004994 <_printf_float+0x2d4>)
 800474a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800474e:	bf94      	ite	ls
 8004750:	4690      	movls	r8, r2
 8004752:	4698      	movhi	r8, r3
 8004754:	2303      	movs	r3, #3
 8004756:	f04f 0900 	mov.w	r9, #0
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	f02b 0304 	bic.w	r3, fp, #4
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	4633      	mov	r3, r6
 8004764:	4621      	mov	r1, r4
 8004766:	4628      	mov	r0, r5
 8004768:	9700      	str	r7, [sp, #0]
 800476a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800476c:	f000 f9d4 	bl	8004b18 <_printf_common>
 8004770:	3001      	adds	r0, #1
 8004772:	f040 8090 	bne.w	8004896 <_printf_float+0x1d6>
 8004776:	f04f 30ff 	mov.w	r0, #4294967295
 800477a:	b011      	add	sp, #68	@ 0x44
 800477c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	4640      	mov	r0, r8
 8004786:	4649      	mov	r1, r9
 8004788:	f7fc f940 	bl	8000a0c <__aeabi_dcmpun>
 800478c:	b148      	cbz	r0, 80047a2 <_printf_float+0xe2>
 800478e:	464b      	mov	r3, r9
 8004790:	2b00      	cmp	r3, #0
 8004792:	bfb8      	it	lt
 8004794:	232d      	movlt	r3, #45	@ 0x2d
 8004796:	4a80      	ldr	r2, [pc, #512]	@ (8004998 <_printf_float+0x2d8>)
 8004798:	bfb8      	it	lt
 800479a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800479e:	4b7f      	ldr	r3, [pc, #508]	@ (800499c <_printf_float+0x2dc>)
 80047a0:	e7d3      	b.n	800474a <_printf_float+0x8a>
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	d13f      	bne.n	800482c <_printf_float+0x16c>
 80047ac:	2306      	movs	r3, #6
 80047ae:	6063      	str	r3, [r4, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	9206      	str	r2, [sp, #24]
 80047ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80047bc:	e9cd a204 	strd	sl, r2, [sp, #16]
 80047c0:	aa0d      	add	r2, sp, #52	@ 0x34
 80047c2:	9203      	str	r2, [sp, #12]
 80047c4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80047c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	4642      	mov	r2, r8
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	4628      	mov	r0, r5
 80047d4:	464b      	mov	r3, r9
 80047d6:	910a      	str	r1, [sp, #40]	@ 0x28
 80047d8:	f7ff fed4 	bl	8004584 <__cvt>
 80047dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80047de:	4680      	mov	r8, r0
 80047e0:	2947      	cmp	r1, #71	@ 0x47
 80047e2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80047e4:	d128      	bne.n	8004838 <_printf_float+0x178>
 80047e6:	1cc8      	adds	r0, r1, #3
 80047e8:	db02      	blt.n	80047f0 <_printf_float+0x130>
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	4299      	cmp	r1, r3
 80047ee:	dd40      	ble.n	8004872 <_printf_float+0x1b2>
 80047f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80047f4:	fa5f fa8a 	uxtb.w	sl, sl
 80047f8:	4652      	mov	r2, sl
 80047fa:	3901      	subs	r1, #1
 80047fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004800:	910d      	str	r1, [sp, #52]	@ 0x34
 8004802:	f7ff ff23 	bl	800464c <__exponent>
 8004806:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004808:	4681      	mov	r9, r0
 800480a:	1813      	adds	r3, r2, r0
 800480c:	2a01      	cmp	r2, #1
 800480e:	6123      	str	r3, [r4, #16]
 8004810:	dc02      	bgt.n	8004818 <_printf_float+0x158>
 8004812:	6822      	ldr	r2, [r4, #0]
 8004814:	07d2      	lsls	r2, r2, #31
 8004816:	d501      	bpl.n	800481c <_printf_float+0x15c>
 8004818:	3301      	adds	r3, #1
 800481a:	6123      	str	r3, [r4, #16]
 800481c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004820:	2b00      	cmp	r3, #0
 8004822:	d09e      	beq.n	8004762 <_printf_float+0xa2>
 8004824:	232d      	movs	r3, #45	@ 0x2d
 8004826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800482a:	e79a      	b.n	8004762 <_printf_float+0xa2>
 800482c:	2947      	cmp	r1, #71	@ 0x47
 800482e:	d1bf      	bne.n	80047b0 <_printf_float+0xf0>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1bd      	bne.n	80047b0 <_printf_float+0xf0>
 8004834:	2301      	movs	r3, #1
 8004836:	e7ba      	b.n	80047ae <_printf_float+0xee>
 8004838:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800483c:	d9dc      	bls.n	80047f8 <_printf_float+0x138>
 800483e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004842:	d118      	bne.n	8004876 <_printf_float+0x1b6>
 8004844:	2900      	cmp	r1, #0
 8004846:	6863      	ldr	r3, [r4, #4]
 8004848:	dd0b      	ble.n	8004862 <_printf_float+0x1a2>
 800484a:	6121      	str	r1, [r4, #16]
 800484c:	b913      	cbnz	r3, 8004854 <_printf_float+0x194>
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	07d0      	lsls	r0, r2, #31
 8004852:	d502      	bpl.n	800485a <_printf_float+0x19a>
 8004854:	3301      	adds	r3, #1
 8004856:	440b      	add	r3, r1
 8004858:	6123      	str	r3, [r4, #16]
 800485a:	f04f 0900 	mov.w	r9, #0
 800485e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004860:	e7dc      	b.n	800481c <_printf_float+0x15c>
 8004862:	b913      	cbnz	r3, 800486a <_printf_float+0x1aa>
 8004864:	6822      	ldr	r2, [r4, #0]
 8004866:	07d2      	lsls	r2, r2, #31
 8004868:	d501      	bpl.n	800486e <_printf_float+0x1ae>
 800486a:	3302      	adds	r3, #2
 800486c:	e7f4      	b.n	8004858 <_printf_float+0x198>
 800486e:	2301      	movs	r3, #1
 8004870:	e7f2      	b.n	8004858 <_printf_float+0x198>
 8004872:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004878:	4299      	cmp	r1, r3
 800487a:	db05      	blt.n	8004888 <_printf_float+0x1c8>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	6121      	str	r1, [r4, #16]
 8004880:	07d8      	lsls	r0, r3, #31
 8004882:	d5ea      	bpl.n	800485a <_printf_float+0x19a>
 8004884:	1c4b      	adds	r3, r1, #1
 8004886:	e7e7      	b.n	8004858 <_printf_float+0x198>
 8004888:	2900      	cmp	r1, #0
 800488a:	bfcc      	ite	gt
 800488c:	2201      	movgt	r2, #1
 800488e:	f1c1 0202 	rsble	r2, r1, #2
 8004892:	4413      	add	r3, r2
 8004894:	e7e0      	b.n	8004858 <_printf_float+0x198>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	055a      	lsls	r2, r3, #21
 800489a:	d407      	bmi.n	80048ac <_printf_float+0x1ec>
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	4642      	mov	r2, r8
 80048a0:	4631      	mov	r1, r6
 80048a2:	4628      	mov	r0, r5
 80048a4:	47b8      	blx	r7
 80048a6:	3001      	adds	r0, #1
 80048a8:	d12b      	bne.n	8004902 <_printf_float+0x242>
 80048aa:	e764      	b.n	8004776 <_printf_float+0xb6>
 80048ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048b0:	f240 80dc 	bls.w	8004a6c <_printf_float+0x3ac>
 80048b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80048b8:	2200      	movs	r2, #0
 80048ba:	2300      	movs	r3, #0
 80048bc:	f7fc f874 	bl	80009a8 <__aeabi_dcmpeq>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d033      	beq.n	800492c <_printf_float+0x26c>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4631      	mov	r1, r6
 80048c8:	4628      	mov	r0, r5
 80048ca:	4a35      	ldr	r2, [pc, #212]	@ (80049a0 <_printf_float+0x2e0>)
 80048cc:	47b8      	blx	r7
 80048ce:	3001      	adds	r0, #1
 80048d0:	f43f af51 	beq.w	8004776 <_printf_float+0xb6>
 80048d4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80048d8:	4543      	cmp	r3, r8
 80048da:	db02      	blt.n	80048e2 <_printf_float+0x222>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	07d8      	lsls	r0, r3, #31
 80048e0:	d50f      	bpl.n	8004902 <_printf_float+0x242>
 80048e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048e6:	4631      	mov	r1, r6
 80048e8:	4628      	mov	r0, r5
 80048ea:	47b8      	blx	r7
 80048ec:	3001      	adds	r0, #1
 80048ee:	f43f af42 	beq.w	8004776 <_printf_float+0xb6>
 80048f2:	f04f 0900 	mov.w	r9, #0
 80048f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80048fa:	f104 0a1a 	add.w	sl, r4, #26
 80048fe:	45c8      	cmp	r8, r9
 8004900:	dc09      	bgt.n	8004916 <_printf_float+0x256>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	079b      	lsls	r3, r3, #30
 8004906:	f100 8102 	bmi.w	8004b0e <_printf_float+0x44e>
 800490a:	68e0      	ldr	r0, [r4, #12]
 800490c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800490e:	4298      	cmp	r0, r3
 8004910:	bfb8      	it	lt
 8004912:	4618      	movlt	r0, r3
 8004914:	e731      	b.n	800477a <_printf_float+0xba>
 8004916:	2301      	movs	r3, #1
 8004918:	4652      	mov	r2, sl
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	f43f af28 	beq.w	8004776 <_printf_float+0xb6>
 8004926:	f109 0901 	add.w	r9, r9, #1
 800492a:	e7e8      	b.n	80048fe <_printf_float+0x23e>
 800492c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800492e:	2b00      	cmp	r3, #0
 8004930:	dc38      	bgt.n	80049a4 <_printf_float+0x2e4>
 8004932:	2301      	movs	r3, #1
 8004934:	4631      	mov	r1, r6
 8004936:	4628      	mov	r0, r5
 8004938:	4a19      	ldr	r2, [pc, #100]	@ (80049a0 <_printf_float+0x2e0>)
 800493a:	47b8      	blx	r7
 800493c:	3001      	adds	r0, #1
 800493e:	f43f af1a 	beq.w	8004776 <_printf_float+0xb6>
 8004942:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004946:	ea59 0303 	orrs.w	r3, r9, r3
 800494a:	d102      	bne.n	8004952 <_printf_float+0x292>
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	07d9      	lsls	r1, r3, #31
 8004950:	d5d7      	bpl.n	8004902 <_printf_float+0x242>
 8004952:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004956:	4631      	mov	r1, r6
 8004958:	4628      	mov	r0, r5
 800495a:	47b8      	blx	r7
 800495c:	3001      	adds	r0, #1
 800495e:	f43f af0a 	beq.w	8004776 <_printf_float+0xb6>
 8004962:	f04f 0a00 	mov.w	sl, #0
 8004966:	f104 0b1a 	add.w	fp, r4, #26
 800496a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800496c:	425b      	negs	r3, r3
 800496e:	4553      	cmp	r3, sl
 8004970:	dc01      	bgt.n	8004976 <_printf_float+0x2b6>
 8004972:	464b      	mov	r3, r9
 8004974:	e793      	b.n	800489e <_printf_float+0x1de>
 8004976:	2301      	movs	r3, #1
 8004978:	465a      	mov	r2, fp
 800497a:	4631      	mov	r1, r6
 800497c:	4628      	mov	r0, r5
 800497e:	47b8      	blx	r7
 8004980:	3001      	adds	r0, #1
 8004982:	f43f aef8 	beq.w	8004776 <_printf_float+0xb6>
 8004986:	f10a 0a01 	add.w	sl, sl, #1
 800498a:	e7ee      	b.n	800496a <_printf_float+0x2aa>
 800498c:	7fefffff 	.word	0x7fefffff
 8004990:	0800840a 	.word	0x0800840a
 8004994:	0800840e 	.word	0x0800840e
 8004998:	08008412 	.word	0x08008412
 800499c:	08008416 	.word	0x08008416
 80049a0:	0800841a 	.word	0x0800841a
 80049a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049a6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80049aa:	4553      	cmp	r3, sl
 80049ac:	bfa8      	it	ge
 80049ae:	4653      	movge	r3, sl
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	4699      	mov	r9, r3
 80049b4:	dc36      	bgt.n	8004a24 <_printf_float+0x364>
 80049b6:	f04f 0b00 	mov.w	fp, #0
 80049ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049be:	f104 021a 	add.w	r2, r4, #26
 80049c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80049c6:	eba3 0309 	sub.w	r3, r3, r9
 80049ca:	455b      	cmp	r3, fp
 80049cc:	dc31      	bgt.n	8004a32 <_printf_float+0x372>
 80049ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049d0:	459a      	cmp	sl, r3
 80049d2:	dc3a      	bgt.n	8004a4a <_printf_float+0x38a>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	07da      	lsls	r2, r3, #31
 80049d8:	d437      	bmi.n	8004a4a <_printf_float+0x38a>
 80049da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049dc:	ebaa 0903 	sub.w	r9, sl, r3
 80049e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049e2:	ebaa 0303 	sub.w	r3, sl, r3
 80049e6:	4599      	cmp	r9, r3
 80049e8:	bfa8      	it	ge
 80049ea:	4699      	movge	r9, r3
 80049ec:	f1b9 0f00 	cmp.w	r9, #0
 80049f0:	dc33      	bgt.n	8004a5a <_printf_float+0x39a>
 80049f2:	f04f 0800 	mov.w	r8, #0
 80049f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049fa:	f104 0b1a 	add.w	fp, r4, #26
 80049fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a00:	ebaa 0303 	sub.w	r3, sl, r3
 8004a04:	eba3 0309 	sub.w	r3, r3, r9
 8004a08:	4543      	cmp	r3, r8
 8004a0a:	f77f af7a 	ble.w	8004902 <_printf_float+0x242>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	465a      	mov	r2, fp
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f43f aeac 	beq.w	8004776 <_printf_float+0xb6>
 8004a1e:	f108 0801 	add.w	r8, r8, #1
 8004a22:	e7ec      	b.n	80049fe <_printf_float+0x33e>
 8004a24:	4642      	mov	r2, r8
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d1c2      	bne.n	80049b6 <_printf_float+0x2f6>
 8004a30:	e6a1      	b.n	8004776 <_printf_float+0xb6>
 8004a32:	2301      	movs	r3, #1
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	920a      	str	r2, [sp, #40]	@ 0x28
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f43f ae9a 	beq.w	8004776 <_printf_float+0xb6>
 8004a42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a44:	f10b 0b01 	add.w	fp, fp, #1
 8004a48:	e7bb      	b.n	80049c2 <_printf_float+0x302>
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a50:	4628      	mov	r0, r5
 8004a52:	47b8      	blx	r7
 8004a54:	3001      	adds	r0, #1
 8004a56:	d1c0      	bne.n	80049da <_printf_float+0x31a>
 8004a58:	e68d      	b.n	8004776 <_printf_float+0xb6>
 8004a5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4628      	mov	r0, r5
 8004a62:	4442      	add	r2, r8
 8004a64:	47b8      	blx	r7
 8004a66:	3001      	adds	r0, #1
 8004a68:	d1c3      	bne.n	80049f2 <_printf_float+0x332>
 8004a6a:	e684      	b.n	8004776 <_printf_float+0xb6>
 8004a6c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004a70:	f1ba 0f01 	cmp.w	sl, #1
 8004a74:	dc01      	bgt.n	8004a7a <_printf_float+0x3ba>
 8004a76:	07db      	lsls	r3, r3, #31
 8004a78:	d536      	bpl.n	8004ae8 <_printf_float+0x428>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	4631      	mov	r1, r6
 8004a80:	4628      	mov	r0, r5
 8004a82:	47b8      	blx	r7
 8004a84:	3001      	adds	r0, #1
 8004a86:	f43f ae76 	beq.w	8004776 <_printf_float+0xb6>
 8004a8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f ae6e 	beq.w	8004776 <_printf_float+0xb6>
 8004a9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aa6:	f7fb ff7f 	bl	80009a8 <__aeabi_dcmpeq>
 8004aaa:	b9c0      	cbnz	r0, 8004ade <_printf_float+0x41e>
 8004aac:	4653      	mov	r3, sl
 8004aae:	f108 0201 	add.w	r2, r8, #1
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	47b8      	blx	r7
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d10c      	bne.n	8004ad6 <_printf_float+0x416>
 8004abc:	e65b      	b.n	8004776 <_printf_float+0xb6>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	465a      	mov	r2, fp
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b8      	blx	r7
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f43f ae54 	beq.w	8004776 <_printf_float+0xb6>
 8004ace:	f108 0801 	add.w	r8, r8, #1
 8004ad2:	45d0      	cmp	r8, sl
 8004ad4:	dbf3      	blt.n	8004abe <_printf_float+0x3fe>
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004adc:	e6e0      	b.n	80048a0 <_printf_float+0x1e0>
 8004ade:	f04f 0800 	mov.w	r8, #0
 8004ae2:	f104 0b1a 	add.w	fp, r4, #26
 8004ae6:	e7f4      	b.n	8004ad2 <_printf_float+0x412>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4642      	mov	r2, r8
 8004aec:	e7e1      	b.n	8004ab2 <_printf_float+0x3f2>
 8004aee:	2301      	movs	r3, #1
 8004af0:	464a      	mov	r2, r9
 8004af2:	4631      	mov	r1, r6
 8004af4:	4628      	mov	r0, r5
 8004af6:	47b8      	blx	r7
 8004af8:	3001      	adds	r0, #1
 8004afa:	f43f ae3c 	beq.w	8004776 <_printf_float+0xb6>
 8004afe:	f108 0801 	add.w	r8, r8, #1
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004b06:	1a5b      	subs	r3, r3, r1
 8004b08:	4543      	cmp	r3, r8
 8004b0a:	dcf0      	bgt.n	8004aee <_printf_float+0x42e>
 8004b0c:	e6fd      	b.n	800490a <_printf_float+0x24a>
 8004b0e:	f04f 0800 	mov.w	r8, #0
 8004b12:	f104 0919 	add.w	r9, r4, #25
 8004b16:	e7f4      	b.n	8004b02 <_printf_float+0x442>

08004b18 <_printf_common>:
 8004b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	4698      	mov	r8, r3
 8004b20:	688a      	ldr	r2, [r1, #8]
 8004b22:	690b      	ldr	r3, [r1, #16]
 8004b24:	4607      	mov	r7, r0
 8004b26:	4293      	cmp	r3, r2
 8004b28:	bfb8      	it	lt
 8004b2a:	4613      	movlt	r3, r2
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b32:	460c      	mov	r4, r1
 8004b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b38:	b10a      	cbz	r2, 8004b3e <_printf_common+0x26>
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	0699      	lsls	r1, r3, #26
 8004b42:	bf42      	ittt	mi
 8004b44:	6833      	ldrmi	r3, [r6, #0]
 8004b46:	3302      	addmi	r3, #2
 8004b48:	6033      	strmi	r3, [r6, #0]
 8004b4a:	6825      	ldr	r5, [r4, #0]
 8004b4c:	f015 0506 	ands.w	r5, r5, #6
 8004b50:	d106      	bne.n	8004b60 <_printf_common+0x48>
 8004b52:	f104 0a19 	add.w	sl, r4, #25
 8004b56:	68e3      	ldr	r3, [r4, #12]
 8004b58:	6832      	ldr	r2, [r6, #0]
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	42ab      	cmp	r3, r5
 8004b5e:	dc2b      	bgt.n	8004bb8 <_printf_common+0xa0>
 8004b60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	3b00      	subs	r3, #0
 8004b68:	bf18      	it	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	0692      	lsls	r2, r2, #26
 8004b6e:	d430      	bmi.n	8004bd2 <_printf_common+0xba>
 8004b70:	4641      	mov	r1, r8
 8004b72:	4638      	mov	r0, r7
 8004b74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b78:	47c8      	blx	r9
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d023      	beq.n	8004bc6 <_printf_common+0xae>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	6922      	ldr	r2, [r4, #16]
 8004b82:	f003 0306 	and.w	r3, r3, #6
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	bf14      	ite	ne
 8004b8a:	2500      	movne	r5, #0
 8004b8c:	6833      	ldreq	r3, [r6, #0]
 8004b8e:	f04f 0600 	mov.w	r6, #0
 8004b92:	bf08      	it	eq
 8004b94:	68e5      	ldreq	r5, [r4, #12]
 8004b96:	f104 041a 	add.w	r4, r4, #26
 8004b9a:	bf08      	it	eq
 8004b9c:	1aed      	subeq	r5, r5, r3
 8004b9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ba2:	bf08      	it	eq
 8004ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	bfc4      	itt	gt
 8004bac:	1a9b      	subgt	r3, r3, r2
 8004bae:	18ed      	addgt	r5, r5, r3
 8004bb0:	42b5      	cmp	r5, r6
 8004bb2:	d11a      	bne.n	8004bea <_printf_common+0xd2>
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	e008      	b.n	8004bca <_printf_common+0xb2>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4652      	mov	r2, sl
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	47c8      	blx	r9
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d103      	bne.n	8004bce <_printf_common+0xb6>
 8004bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bce:	3501      	adds	r5, #1
 8004bd0:	e7c1      	b.n	8004b56 <_printf_common+0x3e>
 8004bd2:	2030      	movs	r0, #48	@ 0x30
 8004bd4:	18e1      	adds	r1, r4, r3
 8004bd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004be0:	4422      	add	r2, r4
 8004be2:	3302      	adds	r3, #2
 8004be4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004be8:	e7c2      	b.n	8004b70 <_printf_common+0x58>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4622      	mov	r2, r4
 8004bee:	4641      	mov	r1, r8
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	47c8      	blx	r9
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d0e6      	beq.n	8004bc6 <_printf_common+0xae>
 8004bf8:	3601      	adds	r6, #1
 8004bfa:	e7d9      	b.n	8004bb0 <_printf_common+0x98>

08004bfc <_printf_i>:
 8004bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c00:	7e0f      	ldrb	r7, [r1, #24]
 8004c02:	4691      	mov	r9, r2
 8004c04:	2f78      	cmp	r7, #120	@ 0x78
 8004c06:	4680      	mov	r8, r0
 8004c08:	460c      	mov	r4, r1
 8004c0a:	469a      	mov	sl, r3
 8004c0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c12:	d807      	bhi.n	8004c24 <_printf_i+0x28>
 8004c14:	2f62      	cmp	r7, #98	@ 0x62
 8004c16:	d80a      	bhi.n	8004c2e <_printf_i+0x32>
 8004c18:	2f00      	cmp	r7, #0
 8004c1a:	f000 80d3 	beq.w	8004dc4 <_printf_i+0x1c8>
 8004c1e:	2f58      	cmp	r7, #88	@ 0x58
 8004c20:	f000 80ba 	beq.w	8004d98 <_printf_i+0x19c>
 8004c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c2c:	e03a      	b.n	8004ca4 <_printf_i+0xa8>
 8004c2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c32:	2b15      	cmp	r3, #21
 8004c34:	d8f6      	bhi.n	8004c24 <_printf_i+0x28>
 8004c36:	a101      	add	r1, pc, #4	@ (adr r1, 8004c3c <_printf_i+0x40>)
 8004c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c3c:	08004c95 	.word	0x08004c95
 8004c40:	08004ca9 	.word	0x08004ca9
 8004c44:	08004c25 	.word	0x08004c25
 8004c48:	08004c25 	.word	0x08004c25
 8004c4c:	08004c25 	.word	0x08004c25
 8004c50:	08004c25 	.word	0x08004c25
 8004c54:	08004ca9 	.word	0x08004ca9
 8004c58:	08004c25 	.word	0x08004c25
 8004c5c:	08004c25 	.word	0x08004c25
 8004c60:	08004c25 	.word	0x08004c25
 8004c64:	08004c25 	.word	0x08004c25
 8004c68:	08004dab 	.word	0x08004dab
 8004c6c:	08004cd3 	.word	0x08004cd3
 8004c70:	08004d65 	.word	0x08004d65
 8004c74:	08004c25 	.word	0x08004c25
 8004c78:	08004c25 	.word	0x08004c25
 8004c7c:	08004dcd 	.word	0x08004dcd
 8004c80:	08004c25 	.word	0x08004c25
 8004c84:	08004cd3 	.word	0x08004cd3
 8004c88:	08004c25 	.word	0x08004c25
 8004c8c:	08004c25 	.word	0x08004c25
 8004c90:	08004d6d 	.word	0x08004d6d
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	1d1a      	adds	r2, r3, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6032      	str	r2, [r6, #0]
 8004c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ca0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e09e      	b.n	8004de6 <_printf_i+0x1ea>
 8004ca8:	6833      	ldr	r3, [r6, #0]
 8004caa:	6820      	ldr	r0, [r4, #0]
 8004cac:	1d19      	adds	r1, r3, #4
 8004cae:	6031      	str	r1, [r6, #0]
 8004cb0:	0606      	lsls	r6, r0, #24
 8004cb2:	d501      	bpl.n	8004cb8 <_printf_i+0xbc>
 8004cb4:	681d      	ldr	r5, [r3, #0]
 8004cb6:	e003      	b.n	8004cc0 <_printf_i+0xc4>
 8004cb8:	0645      	lsls	r5, r0, #25
 8004cba:	d5fb      	bpl.n	8004cb4 <_printf_i+0xb8>
 8004cbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004cc0:	2d00      	cmp	r5, #0
 8004cc2:	da03      	bge.n	8004ccc <_printf_i+0xd0>
 8004cc4:	232d      	movs	r3, #45	@ 0x2d
 8004cc6:	426d      	negs	r5, r5
 8004cc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ccc:	230a      	movs	r3, #10
 8004cce:	4859      	ldr	r0, [pc, #356]	@ (8004e34 <_printf_i+0x238>)
 8004cd0:	e011      	b.n	8004cf6 <_printf_i+0xfa>
 8004cd2:	6821      	ldr	r1, [r4, #0]
 8004cd4:	6833      	ldr	r3, [r6, #0]
 8004cd6:	0608      	lsls	r0, r1, #24
 8004cd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cdc:	d402      	bmi.n	8004ce4 <_printf_i+0xe8>
 8004cde:	0649      	lsls	r1, r1, #25
 8004ce0:	bf48      	it	mi
 8004ce2:	b2ad      	uxthmi	r5, r5
 8004ce4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ce6:	6033      	str	r3, [r6, #0]
 8004ce8:	bf14      	ite	ne
 8004cea:	230a      	movne	r3, #10
 8004cec:	2308      	moveq	r3, #8
 8004cee:	4851      	ldr	r0, [pc, #324]	@ (8004e34 <_printf_i+0x238>)
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cf6:	6866      	ldr	r6, [r4, #4]
 8004cf8:	2e00      	cmp	r6, #0
 8004cfa:	bfa8      	it	ge
 8004cfc:	6821      	ldrge	r1, [r4, #0]
 8004cfe:	60a6      	str	r6, [r4, #8]
 8004d00:	bfa4      	itt	ge
 8004d02:	f021 0104 	bicge.w	r1, r1, #4
 8004d06:	6021      	strge	r1, [r4, #0]
 8004d08:	b90d      	cbnz	r5, 8004d0e <_printf_i+0x112>
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	d04b      	beq.n	8004da6 <_printf_i+0x1aa>
 8004d0e:	4616      	mov	r6, r2
 8004d10:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d14:	fb03 5711 	mls	r7, r3, r1, r5
 8004d18:	5dc7      	ldrb	r7, [r0, r7]
 8004d1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d1e:	462f      	mov	r7, r5
 8004d20:	42bb      	cmp	r3, r7
 8004d22:	460d      	mov	r5, r1
 8004d24:	d9f4      	bls.n	8004d10 <_printf_i+0x114>
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d10b      	bne.n	8004d42 <_printf_i+0x146>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	07df      	lsls	r7, r3, #31
 8004d2e:	d508      	bpl.n	8004d42 <_printf_i+0x146>
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	6861      	ldr	r1, [r4, #4]
 8004d34:	4299      	cmp	r1, r3
 8004d36:	bfde      	ittt	le
 8004d38:	2330      	movle	r3, #48	@ 0x30
 8004d3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d42:	1b92      	subs	r2, r2, r6
 8004d44:	6122      	str	r2, [r4, #16]
 8004d46:	464b      	mov	r3, r9
 8004d48:	4621      	mov	r1, r4
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	f8cd a000 	str.w	sl, [sp]
 8004d50:	aa03      	add	r2, sp, #12
 8004d52:	f7ff fee1 	bl	8004b18 <_printf_common>
 8004d56:	3001      	adds	r0, #1
 8004d58:	d14a      	bne.n	8004df0 <_printf_i+0x1f4>
 8004d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5e:	b004      	add	sp, #16
 8004d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	f043 0320 	orr.w	r3, r3, #32
 8004d6a:	6023      	str	r3, [r4, #0]
 8004d6c:	2778      	movs	r7, #120	@ 0x78
 8004d6e:	4832      	ldr	r0, [pc, #200]	@ (8004e38 <_printf_i+0x23c>)
 8004d70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	6831      	ldr	r1, [r6, #0]
 8004d78:	061f      	lsls	r7, r3, #24
 8004d7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d7e:	d402      	bmi.n	8004d86 <_printf_i+0x18a>
 8004d80:	065f      	lsls	r7, r3, #25
 8004d82:	bf48      	it	mi
 8004d84:	b2ad      	uxthmi	r5, r5
 8004d86:	6031      	str	r1, [r6, #0]
 8004d88:	07d9      	lsls	r1, r3, #31
 8004d8a:	bf44      	itt	mi
 8004d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8004d90:	6023      	strmi	r3, [r4, #0]
 8004d92:	b11d      	cbz	r5, 8004d9c <_printf_i+0x1a0>
 8004d94:	2310      	movs	r3, #16
 8004d96:	e7ab      	b.n	8004cf0 <_printf_i+0xf4>
 8004d98:	4826      	ldr	r0, [pc, #152]	@ (8004e34 <_printf_i+0x238>)
 8004d9a:	e7e9      	b.n	8004d70 <_printf_i+0x174>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	f023 0320 	bic.w	r3, r3, #32
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	e7f6      	b.n	8004d94 <_printf_i+0x198>
 8004da6:	4616      	mov	r6, r2
 8004da8:	e7bd      	b.n	8004d26 <_printf_i+0x12a>
 8004daa:	6833      	ldr	r3, [r6, #0]
 8004dac:	6825      	ldr	r5, [r4, #0]
 8004dae:	1d18      	adds	r0, r3, #4
 8004db0:	6961      	ldr	r1, [r4, #20]
 8004db2:	6030      	str	r0, [r6, #0]
 8004db4:	062e      	lsls	r6, r5, #24
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	d501      	bpl.n	8004dbe <_printf_i+0x1c2>
 8004dba:	6019      	str	r1, [r3, #0]
 8004dbc:	e002      	b.n	8004dc4 <_printf_i+0x1c8>
 8004dbe:	0668      	lsls	r0, r5, #25
 8004dc0:	d5fb      	bpl.n	8004dba <_printf_i+0x1be>
 8004dc2:	8019      	strh	r1, [r3, #0]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4616      	mov	r6, r2
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	e7bc      	b.n	8004d46 <_printf_i+0x14a>
 8004dcc:	6833      	ldr	r3, [r6, #0]
 8004dce:	2100      	movs	r1, #0
 8004dd0:	1d1a      	adds	r2, r3, #4
 8004dd2:	6032      	str	r2, [r6, #0]
 8004dd4:	681e      	ldr	r6, [r3, #0]
 8004dd6:	6862      	ldr	r2, [r4, #4]
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f000 f9e4 	bl	80051a6 <memchr>
 8004dde:	b108      	cbz	r0, 8004de4 <_printf_i+0x1e8>
 8004de0:	1b80      	subs	r0, r0, r6
 8004de2:	6060      	str	r0, [r4, #4]
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	6123      	str	r3, [r4, #16]
 8004de8:	2300      	movs	r3, #0
 8004dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dee:	e7aa      	b.n	8004d46 <_printf_i+0x14a>
 8004df0:	4632      	mov	r2, r6
 8004df2:	4649      	mov	r1, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	47d0      	blx	sl
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d0ad      	beq.n	8004d5a <_printf_i+0x15e>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	079b      	lsls	r3, r3, #30
 8004e02:	d413      	bmi.n	8004e2c <_printf_i+0x230>
 8004e04:	68e0      	ldr	r0, [r4, #12]
 8004e06:	9b03      	ldr	r3, [sp, #12]
 8004e08:	4298      	cmp	r0, r3
 8004e0a:	bfb8      	it	lt
 8004e0c:	4618      	movlt	r0, r3
 8004e0e:	e7a6      	b.n	8004d5e <_printf_i+0x162>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4632      	mov	r2, r6
 8004e14:	4649      	mov	r1, r9
 8004e16:	4640      	mov	r0, r8
 8004e18:	47d0      	blx	sl
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d09d      	beq.n	8004d5a <_printf_i+0x15e>
 8004e1e:	3501      	adds	r5, #1
 8004e20:	68e3      	ldr	r3, [r4, #12]
 8004e22:	9903      	ldr	r1, [sp, #12]
 8004e24:	1a5b      	subs	r3, r3, r1
 8004e26:	42ab      	cmp	r3, r5
 8004e28:	dcf2      	bgt.n	8004e10 <_printf_i+0x214>
 8004e2a:	e7eb      	b.n	8004e04 <_printf_i+0x208>
 8004e2c:	2500      	movs	r5, #0
 8004e2e:	f104 0619 	add.w	r6, r4, #25
 8004e32:	e7f5      	b.n	8004e20 <_printf_i+0x224>
 8004e34:	0800841c 	.word	0x0800841c
 8004e38:	0800842d 	.word	0x0800842d

08004e3c <std>:
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	4604      	mov	r4, r0
 8004e42:	e9c0 3300 	strd	r3, r3, [r0]
 8004e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e4a:	6083      	str	r3, [r0, #8]
 8004e4c:	8181      	strh	r1, [r0, #12]
 8004e4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e50:	81c2      	strh	r2, [r0, #14]
 8004e52:	6183      	str	r3, [r0, #24]
 8004e54:	4619      	mov	r1, r3
 8004e56:	2208      	movs	r2, #8
 8004e58:	305c      	adds	r0, #92	@ 0x5c
 8004e5a:	f000 f924 	bl	80050a6 <memset>
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <std+0x58>)
 8004e60:	6224      	str	r4, [r4, #32]
 8004e62:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e64:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <std+0x5c>)
 8004e66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e68:	4b0c      	ldr	r3, [pc, #48]	@ (8004e9c <std+0x60>)
 8004e6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea0 <std+0x64>)
 8004e6e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <std+0x68>)
 8004e72:	429c      	cmp	r4, r3
 8004e74:	d006      	beq.n	8004e84 <std+0x48>
 8004e76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e7a:	4294      	cmp	r4, r2
 8004e7c:	d002      	beq.n	8004e84 <std+0x48>
 8004e7e:	33d0      	adds	r3, #208	@ 0xd0
 8004e80:	429c      	cmp	r4, r3
 8004e82:	d105      	bne.n	8004e90 <std+0x54>
 8004e84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8c:	f000 b988 	b.w	80051a0 <__retarget_lock_init_recursive>
 8004e90:	bd10      	pop	{r4, pc}
 8004e92:	bf00      	nop
 8004e94:	08005001 	.word	0x08005001
 8004e98:	08005023 	.word	0x08005023
 8004e9c:	0800505b 	.word	0x0800505b
 8004ea0:	0800507f 	.word	0x0800507f
 8004ea4:	2000071c 	.word	0x2000071c

08004ea8 <stdio_exit_handler>:
 8004ea8:	4a02      	ldr	r2, [pc, #8]	@ (8004eb4 <stdio_exit_handler+0xc>)
 8004eaa:	4903      	ldr	r1, [pc, #12]	@ (8004eb8 <stdio_exit_handler+0x10>)
 8004eac:	4803      	ldr	r0, [pc, #12]	@ (8004ebc <stdio_exit_handler+0x14>)
 8004eae:	f000 b869 	b.w	8004f84 <_fwalk_sglue>
 8004eb2:	bf00      	nop
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	08006b2d 	.word	0x08006b2d
 8004ebc:	2000001c 	.word	0x2000001c

08004ec0 <cleanup_stdio>:
 8004ec0:	6841      	ldr	r1, [r0, #4]
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <cleanup_stdio+0x34>)
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	4299      	cmp	r1, r3
 8004ec8:	4604      	mov	r4, r0
 8004eca:	d001      	beq.n	8004ed0 <cleanup_stdio+0x10>
 8004ecc:	f001 fe2e 	bl	8006b2c <_fflush_r>
 8004ed0:	68a1      	ldr	r1, [r4, #8]
 8004ed2:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <cleanup_stdio+0x38>)
 8004ed4:	4299      	cmp	r1, r3
 8004ed6:	d002      	beq.n	8004ede <cleanup_stdio+0x1e>
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f001 fe27 	bl	8006b2c <_fflush_r>
 8004ede:	68e1      	ldr	r1, [r4, #12]
 8004ee0:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <cleanup_stdio+0x3c>)
 8004ee2:	4299      	cmp	r1, r3
 8004ee4:	d004      	beq.n	8004ef0 <cleanup_stdio+0x30>
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eec:	f001 be1e 	b.w	8006b2c <_fflush_r>
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	bf00      	nop
 8004ef4:	2000071c 	.word	0x2000071c
 8004ef8:	20000784 	.word	0x20000784
 8004efc:	200007ec 	.word	0x200007ec

08004f00 <global_stdio_init.part.0>:
 8004f00:	b510      	push	{r4, lr}
 8004f02:	4b0b      	ldr	r3, [pc, #44]	@ (8004f30 <global_stdio_init.part.0+0x30>)
 8004f04:	4c0b      	ldr	r4, [pc, #44]	@ (8004f34 <global_stdio_init.part.0+0x34>)
 8004f06:	4a0c      	ldr	r2, [pc, #48]	@ (8004f38 <global_stdio_init.part.0+0x38>)
 8004f08:	4620      	mov	r0, r4
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	2104      	movs	r1, #4
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f7ff ff94 	bl	8004e3c <std>
 8004f14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f18:	2201      	movs	r2, #1
 8004f1a:	2109      	movs	r1, #9
 8004f1c:	f7ff ff8e 	bl	8004e3c <std>
 8004f20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f24:	2202      	movs	r2, #2
 8004f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f2a:	2112      	movs	r1, #18
 8004f2c:	f7ff bf86 	b.w	8004e3c <std>
 8004f30:	20000854 	.word	0x20000854
 8004f34:	2000071c 	.word	0x2000071c
 8004f38:	08004ea9 	.word	0x08004ea9

08004f3c <__sfp_lock_acquire>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	@ (8004f44 <__sfp_lock_acquire+0x8>)
 8004f3e:	f000 b930 	b.w	80051a2 <__retarget_lock_acquire_recursive>
 8004f42:	bf00      	nop
 8004f44:	2000085d 	.word	0x2000085d

08004f48 <__sfp_lock_release>:
 8004f48:	4801      	ldr	r0, [pc, #4]	@ (8004f50 <__sfp_lock_release+0x8>)
 8004f4a:	f000 b92b 	b.w	80051a4 <__retarget_lock_release_recursive>
 8004f4e:	bf00      	nop
 8004f50:	2000085d 	.word	0x2000085d

08004f54 <__sinit>:
 8004f54:	b510      	push	{r4, lr}
 8004f56:	4604      	mov	r4, r0
 8004f58:	f7ff fff0 	bl	8004f3c <__sfp_lock_acquire>
 8004f5c:	6a23      	ldr	r3, [r4, #32]
 8004f5e:	b11b      	cbz	r3, 8004f68 <__sinit+0x14>
 8004f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f64:	f7ff bff0 	b.w	8004f48 <__sfp_lock_release>
 8004f68:	4b04      	ldr	r3, [pc, #16]	@ (8004f7c <__sinit+0x28>)
 8004f6a:	6223      	str	r3, [r4, #32]
 8004f6c:	4b04      	ldr	r3, [pc, #16]	@ (8004f80 <__sinit+0x2c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f5      	bne.n	8004f60 <__sinit+0xc>
 8004f74:	f7ff ffc4 	bl	8004f00 <global_stdio_init.part.0>
 8004f78:	e7f2      	b.n	8004f60 <__sinit+0xc>
 8004f7a:	bf00      	nop
 8004f7c:	08004ec1 	.word	0x08004ec1
 8004f80:	20000854 	.word	0x20000854

08004f84 <_fwalk_sglue>:
 8004f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f88:	4607      	mov	r7, r0
 8004f8a:	4688      	mov	r8, r1
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	2600      	movs	r6, #0
 8004f90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f94:	f1b9 0901 	subs.w	r9, r9, #1
 8004f98:	d505      	bpl.n	8004fa6 <_fwalk_sglue+0x22>
 8004f9a:	6824      	ldr	r4, [r4, #0]
 8004f9c:	2c00      	cmp	r4, #0
 8004f9e:	d1f7      	bne.n	8004f90 <_fwalk_sglue+0xc>
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa6:	89ab      	ldrh	r3, [r5, #12]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d907      	bls.n	8004fbc <_fwalk_sglue+0x38>
 8004fac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	d003      	beq.n	8004fbc <_fwalk_sglue+0x38>
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	47c0      	blx	r8
 8004fba:	4306      	orrs	r6, r0
 8004fbc:	3568      	adds	r5, #104	@ 0x68
 8004fbe:	e7e9      	b.n	8004f94 <_fwalk_sglue+0x10>

08004fc0 <siprintf>:
 8004fc0:	b40e      	push	{r1, r2, r3}
 8004fc2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004fc6:	b500      	push	{lr}
 8004fc8:	b09c      	sub	sp, #112	@ 0x70
 8004fca:	ab1d      	add	r3, sp, #116	@ 0x74
 8004fcc:	9002      	str	r0, [sp, #8]
 8004fce:	9006      	str	r0, [sp, #24]
 8004fd0:	9107      	str	r1, [sp, #28]
 8004fd2:	9104      	str	r1, [sp, #16]
 8004fd4:	4808      	ldr	r0, [pc, #32]	@ (8004ff8 <siprintf+0x38>)
 8004fd6:	4909      	ldr	r1, [pc, #36]	@ (8004ffc <siprintf+0x3c>)
 8004fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fdc:	9105      	str	r1, [sp, #20]
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	a902      	add	r1, sp, #8
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	f001 fc26 	bl	8006834 <_svfiprintf_r>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	9b02      	ldr	r3, [sp, #8]
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	b01c      	add	sp, #112	@ 0x70
 8004ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff4:	b003      	add	sp, #12
 8004ff6:	4770      	bx	lr
 8004ff8:	20000018 	.word	0x20000018
 8004ffc:	ffff0208 	.word	0xffff0208

08005000 <__sread>:
 8005000:	b510      	push	{r4, lr}
 8005002:	460c      	mov	r4, r1
 8005004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005008:	f000 f87c 	bl	8005104 <_read_r>
 800500c:	2800      	cmp	r0, #0
 800500e:	bfab      	itete	ge
 8005010:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005012:	89a3      	ldrhlt	r3, [r4, #12]
 8005014:	181b      	addge	r3, r3, r0
 8005016:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800501a:	bfac      	ite	ge
 800501c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800501e:	81a3      	strhlt	r3, [r4, #12]
 8005020:	bd10      	pop	{r4, pc}

08005022 <__swrite>:
 8005022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005026:	461f      	mov	r7, r3
 8005028:	898b      	ldrh	r3, [r1, #12]
 800502a:	4605      	mov	r5, r0
 800502c:	05db      	lsls	r3, r3, #23
 800502e:	460c      	mov	r4, r1
 8005030:	4616      	mov	r6, r2
 8005032:	d505      	bpl.n	8005040 <__swrite+0x1e>
 8005034:	2302      	movs	r3, #2
 8005036:	2200      	movs	r2, #0
 8005038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503c:	f000 f850 	bl	80050e0 <_lseek_r>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	4632      	mov	r2, r6
 8005044:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	4628      	mov	r0, r5
 800504c:	463b      	mov	r3, r7
 800504e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005056:	f000 b867 	b.w	8005128 <_write_r>

0800505a <__sseek>:
 800505a:	b510      	push	{r4, lr}
 800505c:	460c      	mov	r4, r1
 800505e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005062:	f000 f83d 	bl	80050e0 <_lseek_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	bf15      	itete	ne
 800506c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800506e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005072:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005076:	81a3      	strheq	r3, [r4, #12]
 8005078:	bf18      	it	ne
 800507a:	81a3      	strhne	r3, [r4, #12]
 800507c:	bd10      	pop	{r4, pc}

0800507e <__sclose>:
 800507e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005082:	f000 b81d 	b.w	80050c0 <_close_r>

08005086 <memcmp>:
 8005086:	b510      	push	{r4, lr}
 8005088:	3901      	subs	r1, #1
 800508a:	4402      	add	r2, r0
 800508c:	4290      	cmp	r0, r2
 800508e:	d101      	bne.n	8005094 <memcmp+0xe>
 8005090:	2000      	movs	r0, #0
 8005092:	e005      	b.n	80050a0 <memcmp+0x1a>
 8005094:	7803      	ldrb	r3, [r0, #0]
 8005096:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800509a:	42a3      	cmp	r3, r4
 800509c:	d001      	beq.n	80050a2 <memcmp+0x1c>
 800509e:	1b18      	subs	r0, r3, r4
 80050a0:	bd10      	pop	{r4, pc}
 80050a2:	3001      	adds	r0, #1
 80050a4:	e7f2      	b.n	800508c <memcmp+0x6>

080050a6 <memset>:
 80050a6:	4603      	mov	r3, r0
 80050a8:	4402      	add	r2, r0
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d100      	bne.n	80050b0 <memset+0xa>
 80050ae:	4770      	bx	lr
 80050b0:	f803 1b01 	strb.w	r1, [r3], #1
 80050b4:	e7f9      	b.n	80050aa <memset+0x4>
	...

080050b8 <_localeconv_r>:
 80050b8:	4800      	ldr	r0, [pc, #0]	@ (80050bc <_localeconv_r+0x4>)
 80050ba:	4770      	bx	lr
 80050bc:	20000158 	.word	0x20000158

080050c0 <_close_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	2300      	movs	r3, #0
 80050c4:	4d05      	ldr	r5, [pc, #20]	@ (80050dc <_close_r+0x1c>)
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	602b      	str	r3, [r5, #0]
 80050cc:	f7fc fb95 	bl	80017fa <_close>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	d102      	bne.n	80050da <_close_r+0x1a>
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	b103      	cbz	r3, 80050da <_close_r+0x1a>
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	bd38      	pop	{r3, r4, r5, pc}
 80050dc:	20000858 	.word	0x20000858

080050e0 <_lseek_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4604      	mov	r4, r0
 80050e4:	4608      	mov	r0, r1
 80050e6:	4611      	mov	r1, r2
 80050e8:	2200      	movs	r2, #0
 80050ea:	4d05      	ldr	r5, [pc, #20]	@ (8005100 <_lseek_r+0x20>)
 80050ec:	602a      	str	r2, [r5, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	f7fc fba7 	bl	8001842 <_lseek>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_lseek_r+0x1e>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_lseek_r+0x1e>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	20000858 	.word	0x20000858

08005104 <_read_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	2200      	movs	r2, #0
 800510e:	4d05      	ldr	r5, [pc, #20]	@ (8005124 <_read_r+0x20>)
 8005110:	602a      	str	r2, [r5, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	f7fc fb38 	bl	8001788 <_read>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_read_r+0x1e>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	b103      	cbz	r3, 8005122 <_read_r+0x1e>
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	20000858 	.word	0x20000858

08005128 <_write_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	2200      	movs	r2, #0
 8005132:	4d05      	ldr	r5, [pc, #20]	@ (8005148 <_write_r+0x20>)
 8005134:	602a      	str	r2, [r5, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	f7fc fb43 	bl	80017c2 <_write>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_write_r+0x1e>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_write_r+0x1e>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	20000858 	.word	0x20000858

0800514c <__errno>:
 800514c:	4b01      	ldr	r3, [pc, #4]	@ (8005154 <__errno+0x8>)
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000018 	.word	0x20000018

08005158 <__libc_init_array>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	2600      	movs	r6, #0
 800515c:	4d0c      	ldr	r5, [pc, #48]	@ (8005190 <__libc_init_array+0x38>)
 800515e:	4c0d      	ldr	r4, [pc, #52]	@ (8005194 <__libc_init_array+0x3c>)
 8005160:	1b64      	subs	r4, r4, r5
 8005162:	10a4      	asrs	r4, r4, #2
 8005164:	42a6      	cmp	r6, r4
 8005166:	d109      	bne.n	800517c <__libc_init_array+0x24>
 8005168:	f002 f86e 	bl	8007248 <_init>
 800516c:	2600      	movs	r6, #0
 800516e:	4d0a      	ldr	r5, [pc, #40]	@ (8005198 <__libc_init_array+0x40>)
 8005170:	4c0a      	ldr	r4, [pc, #40]	@ (800519c <__libc_init_array+0x44>)
 8005172:	1b64      	subs	r4, r4, r5
 8005174:	10a4      	asrs	r4, r4, #2
 8005176:	42a6      	cmp	r6, r4
 8005178:	d105      	bne.n	8005186 <__libc_init_array+0x2e>
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005180:	4798      	blx	r3
 8005182:	3601      	adds	r6, #1
 8005184:	e7ee      	b.n	8005164 <__libc_init_array+0xc>
 8005186:	f855 3b04 	ldr.w	r3, [r5], #4
 800518a:	4798      	blx	r3
 800518c:	3601      	adds	r6, #1
 800518e:	e7f2      	b.n	8005176 <__libc_init_array+0x1e>
 8005190:	08008780 	.word	0x08008780
 8005194:	08008780 	.word	0x08008780
 8005198:	08008780 	.word	0x08008780
 800519c:	08008784 	.word	0x08008784

080051a0 <__retarget_lock_init_recursive>:
 80051a0:	4770      	bx	lr

080051a2 <__retarget_lock_acquire_recursive>:
 80051a2:	4770      	bx	lr

080051a4 <__retarget_lock_release_recursive>:
 80051a4:	4770      	bx	lr

080051a6 <memchr>:
 80051a6:	4603      	mov	r3, r0
 80051a8:	b510      	push	{r4, lr}
 80051aa:	b2c9      	uxtb	r1, r1
 80051ac:	4402      	add	r2, r0
 80051ae:	4293      	cmp	r3, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	d101      	bne.n	80051b8 <memchr+0x12>
 80051b4:	2000      	movs	r0, #0
 80051b6:	e003      	b.n	80051c0 <memchr+0x1a>
 80051b8:	7804      	ldrb	r4, [r0, #0]
 80051ba:	3301      	adds	r3, #1
 80051bc:	428c      	cmp	r4, r1
 80051be:	d1f6      	bne.n	80051ae <memchr+0x8>
 80051c0:	bd10      	pop	{r4, pc}

080051c2 <memcpy>:
 80051c2:	440a      	add	r2, r1
 80051c4:	4291      	cmp	r1, r2
 80051c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80051ca:	d100      	bne.n	80051ce <memcpy+0xc>
 80051cc:	4770      	bx	lr
 80051ce:	b510      	push	{r4, lr}
 80051d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051d4:	4291      	cmp	r1, r2
 80051d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051da:	d1f9      	bne.n	80051d0 <memcpy+0xe>
 80051dc:	bd10      	pop	{r4, pc}

080051de <quorem>:
 80051de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e2:	6903      	ldr	r3, [r0, #16]
 80051e4:	690c      	ldr	r4, [r1, #16]
 80051e6:	4607      	mov	r7, r0
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	db7e      	blt.n	80052ea <quorem+0x10c>
 80051ec:	3c01      	subs	r4, #1
 80051ee:	00a3      	lsls	r3, r4, #2
 80051f0:	f100 0514 	add.w	r5, r0, #20
 80051f4:	f101 0814 	add.w	r8, r1, #20
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005204:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005208:	3301      	adds	r3, #1
 800520a:	429a      	cmp	r2, r3
 800520c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005210:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005214:	d32e      	bcc.n	8005274 <quorem+0x96>
 8005216:	f04f 0a00 	mov.w	sl, #0
 800521a:	46c4      	mov	ip, r8
 800521c:	46ae      	mov	lr, r5
 800521e:	46d3      	mov	fp, sl
 8005220:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005224:	b298      	uxth	r0, r3
 8005226:	fb06 a000 	mla	r0, r6, r0, sl
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	0c02      	lsrs	r2, r0, #16
 800522e:	fb06 2303 	mla	r3, r6, r3, r2
 8005232:	f8de 2000 	ldr.w	r2, [lr]
 8005236:	b280      	uxth	r0, r0
 8005238:	b292      	uxth	r2, r2
 800523a:	1a12      	subs	r2, r2, r0
 800523c:	445a      	add	r2, fp
 800523e:	f8de 0000 	ldr.w	r0, [lr]
 8005242:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005246:	b29b      	uxth	r3, r3
 8005248:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800524c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005250:	b292      	uxth	r2, r2
 8005252:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005256:	45e1      	cmp	r9, ip
 8005258:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800525c:	f84e 2b04 	str.w	r2, [lr], #4
 8005260:	d2de      	bcs.n	8005220 <quorem+0x42>
 8005262:	9b00      	ldr	r3, [sp, #0]
 8005264:	58eb      	ldr	r3, [r5, r3]
 8005266:	b92b      	cbnz	r3, 8005274 <quorem+0x96>
 8005268:	9b01      	ldr	r3, [sp, #4]
 800526a:	3b04      	subs	r3, #4
 800526c:	429d      	cmp	r5, r3
 800526e:	461a      	mov	r2, r3
 8005270:	d32f      	bcc.n	80052d2 <quorem+0xf4>
 8005272:	613c      	str	r4, [r7, #16]
 8005274:	4638      	mov	r0, r7
 8005276:	f001 f979 	bl	800656c <__mcmp>
 800527a:	2800      	cmp	r0, #0
 800527c:	db25      	blt.n	80052ca <quorem+0xec>
 800527e:	4629      	mov	r1, r5
 8005280:	2000      	movs	r0, #0
 8005282:	f858 2b04 	ldr.w	r2, [r8], #4
 8005286:	f8d1 c000 	ldr.w	ip, [r1]
 800528a:	fa1f fe82 	uxth.w	lr, r2
 800528e:	fa1f f38c 	uxth.w	r3, ip
 8005292:	eba3 030e 	sub.w	r3, r3, lr
 8005296:	4403      	add	r3, r0
 8005298:	0c12      	lsrs	r2, r2, #16
 800529a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800529e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052a8:	45c1      	cmp	r9, r8
 80052aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80052ae:	f841 3b04 	str.w	r3, [r1], #4
 80052b2:	d2e6      	bcs.n	8005282 <quorem+0xa4>
 80052b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052bc:	b922      	cbnz	r2, 80052c8 <quorem+0xea>
 80052be:	3b04      	subs	r3, #4
 80052c0:	429d      	cmp	r5, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	d30b      	bcc.n	80052de <quorem+0x100>
 80052c6:	613c      	str	r4, [r7, #16]
 80052c8:	3601      	adds	r6, #1
 80052ca:	4630      	mov	r0, r6
 80052cc:	b003      	add	sp, #12
 80052ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	3b04      	subs	r3, #4
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	d1cb      	bne.n	8005272 <quorem+0x94>
 80052da:	3c01      	subs	r4, #1
 80052dc:	e7c6      	b.n	800526c <quorem+0x8e>
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	3b04      	subs	r3, #4
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	d1ef      	bne.n	80052c6 <quorem+0xe8>
 80052e6:	3c01      	subs	r4, #1
 80052e8:	e7ea      	b.n	80052c0 <quorem+0xe2>
 80052ea:	2000      	movs	r0, #0
 80052ec:	e7ee      	b.n	80052cc <quorem+0xee>
	...

080052f0 <_dtoa_r>:
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	4614      	mov	r4, r2
 80052f6:	461d      	mov	r5, r3
 80052f8:	69c7      	ldr	r7, [r0, #28]
 80052fa:	b097      	sub	sp, #92	@ 0x5c
 80052fc:	4683      	mov	fp, r0
 80052fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005302:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005304:	b97f      	cbnz	r7, 8005326 <_dtoa_r+0x36>
 8005306:	2010      	movs	r0, #16
 8005308:	f000 fe02 	bl	8005f10 <malloc>
 800530c:	4602      	mov	r2, r0
 800530e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005312:	b920      	cbnz	r0, 800531e <_dtoa_r+0x2e>
 8005314:	21ef      	movs	r1, #239	@ 0xef
 8005316:	4ba8      	ldr	r3, [pc, #672]	@ (80055b8 <_dtoa_r+0x2c8>)
 8005318:	48a8      	ldr	r0, [pc, #672]	@ (80055bc <_dtoa_r+0x2cc>)
 800531a:	f001 fc59 	bl	8006bd0 <__assert_func>
 800531e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005322:	6007      	str	r7, [r0, #0]
 8005324:	60c7      	str	r7, [r0, #12]
 8005326:	f8db 301c 	ldr.w	r3, [fp, #28]
 800532a:	6819      	ldr	r1, [r3, #0]
 800532c:	b159      	cbz	r1, 8005346 <_dtoa_r+0x56>
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	2301      	movs	r3, #1
 8005332:	4093      	lsls	r3, r2
 8005334:	604a      	str	r2, [r1, #4]
 8005336:	608b      	str	r3, [r1, #8]
 8005338:	4658      	mov	r0, fp
 800533a:	f000 fedf 	bl	80060fc <_Bfree>
 800533e:	2200      	movs	r2, #0
 8005340:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	1e2b      	subs	r3, r5, #0
 8005348:	bfaf      	iteee	ge
 800534a:	2300      	movge	r3, #0
 800534c:	2201      	movlt	r2, #1
 800534e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005352:	9303      	strlt	r3, [sp, #12]
 8005354:	bfa8      	it	ge
 8005356:	6033      	strge	r3, [r6, #0]
 8005358:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800535c:	4b98      	ldr	r3, [pc, #608]	@ (80055c0 <_dtoa_r+0x2d0>)
 800535e:	bfb8      	it	lt
 8005360:	6032      	strlt	r2, [r6, #0]
 8005362:	ea33 0308 	bics.w	r3, r3, r8
 8005366:	d112      	bne.n	800538e <_dtoa_r+0x9e>
 8005368:	f242 730f 	movw	r3, #9999	@ 0x270f
 800536c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005374:	4323      	orrs	r3, r4
 8005376:	f000 8550 	beq.w	8005e1a <_dtoa_r+0xb2a>
 800537a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800537c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80055c4 <_dtoa_r+0x2d4>
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8552 	beq.w	8005e2a <_dtoa_r+0xb3a>
 8005386:	f10a 0303 	add.w	r3, sl, #3
 800538a:	f000 bd4c 	b.w	8005e26 <_dtoa_r+0xb36>
 800538e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005392:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800539a:	2200      	movs	r2, #0
 800539c:	2300      	movs	r3, #0
 800539e:	f7fb fb03 	bl	80009a8 <__aeabi_dcmpeq>
 80053a2:	4607      	mov	r7, r0
 80053a4:	b158      	cbz	r0, 80053be <_dtoa_r+0xce>
 80053a6:	2301      	movs	r3, #1
 80053a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80053ae:	b113      	cbz	r3, 80053b6 <_dtoa_r+0xc6>
 80053b0:	4b85      	ldr	r3, [pc, #532]	@ (80055c8 <_dtoa_r+0x2d8>)
 80053b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80055cc <_dtoa_r+0x2dc>
 80053ba:	f000 bd36 	b.w	8005e2a <_dtoa_r+0xb3a>
 80053be:	ab14      	add	r3, sp, #80	@ 0x50
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	ab15      	add	r3, sp, #84	@ 0x54
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	4658      	mov	r0, fp
 80053c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80053cc:	f001 f97e 	bl	80066cc <__d2b>
 80053d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80053d4:	4681      	mov	r9, r0
 80053d6:	2e00      	cmp	r6, #0
 80053d8:	d077      	beq.n	80054ca <_dtoa_r+0x1da>
 80053da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053e0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80053e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053e8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80053ec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80053f0:	9712      	str	r7, [sp, #72]	@ 0x48
 80053f2:	4619      	mov	r1, r3
 80053f4:	2200      	movs	r2, #0
 80053f6:	4b76      	ldr	r3, [pc, #472]	@ (80055d0 <_dtoa_r+0x2e0>)
 80053f8:	f7fa feb6 	bl	8000168 <__aeabi_dsub>
 80053fc:	a368      	add	r3, pc, #416	@ (adr r3, 80055a0 <_dtoa_r+0x2b0>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	f7fb f869 	bl	80004d8 <__aeabi_dmul>
 8005406:	a368      	add	r3, pc, #416	@ (adr r3, 80055a8 <_dtoa_r+0x2b8>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f7fa feae 	bl	800016c <__adddf3>
 8005410:	4604      	mov	r4, r0
 8005412:	4630      	mov	r0, r6
 8005414:	460d      	mov	r5, r1
 8005416:	f7fa fff5 	bl	8000404 <__aeabi_i2d>
 800541a:	a365      	add	r3, pc, #404	@ (adr r3, 80055b0 <_dtoa_r+0x2c0>)
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	f7fb f85a 	bl	80004d8 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4620      	mov	r0, r4
 800542a:	4629      	mov	r1, r5
 800542c:	f7fa fe9e 	bl	800016c <__adddf3>
 8005430:	4604      	mov	r4, r0
 8005432:	460d      	mov	r5, r1
 8005434:	f7fb fb00 	bl	8000a38 <__aeabi_d2iz>
 8005438:	2200      	movs	r2, #0
 800543a:	4607      	mov	r7, r0
 800543c:	2300      	movs	r3, #0
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	f7fb fabb 	bl	80009bc <__aeabi_dcmplt>
 8005446:	b140      	cbz	r0, 800545a <_dtoa_r+0x16a>
 8005448:	4638      	mov	r0, r7
 800544a:	f7fa ffdb 	bl	8000404 <__aeabi_i2d>
 800544e:	4622      	mov	r2, r4
 8005450:	462b      	mov	r3, r5
 8005452:	f7fb faa9 	bl	80009a8 <__aeabi_dcmpeq>
 8005456:	b900      	cbnz	r0, 800545a <_dtoa_r+0x16a>
 8005458:	3f01      	subs	r7, #1
 800545a:	2f16      	cmp	r7, #22
 800545c:	d853      	bhi.n	8005506 <_dtoa_r+0x216>
 800545e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005462:	4b5c      	ldr	r3, [pc, #368]	@ (80055d4 <_dtoa_r+0x2e4>)
 8005464:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f7fb faa6 	bl	80009bc <__aeabi_dcmplt>
 8005470:	2800      	cmp	r0, #0
 8005472:	d04a      	beq.n	800550a <_dtoa_r+0x21a>
 8005474:	2300      	movs	r3, #0
 8005476:	3f01      	subs	r7, #1
 8005478:	930f      	str	r3, [sp, #60]	@ 0x3c
 800547a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800547c:	1b9b      	subs	r3, r3, r6
 800547e:	1e5a      	subs	r2, r3, #1
 8005480:	bf46      	itte	mi
 8005482:	f1c3 0801 	rsbmi	r8, r3, #1
 8005486:	2300      	movmi	r3, #0
 8005488:	f04f 0800 	movpl.w	r8, #0
 800548c:	9209      	str	r2, [sp, #36]	@ 0x24
 800548e:	bf48      	it	mi
 8005490:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005492:	2f00      	cmp	r7, #0
 8005494:	db3b      	blt.n	800550e <_dtoa_r+0x21e>
 8005496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005498:	970e      	str	r7, [sp, #56]	@ 0x38
 800549a:	443b      	add	r3, r7
 800549c:	9309      	str	r3, [sp, #36]	@ 0x24
 800549e:	2300      	movs	r3, #0
 80054a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80054a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054a4:	2b09      	cmp	r3, #9
 80054a6:	d866      	bhi.n	8005576 <_dtoa_r+0x286>
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	bfc4      	itt	gt
 80054ac:	3b04      	subgt	r3, #4
 80054ae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80054b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054b2:	bfc8      	it	gt
 80054b4:	2400      	movgt	r4, #0
 80054b6:	f1a3 0302 	sub.w	r3, r3, #2
 80054ba:	bfd8      	it	le
 80054bc:	2401      	movle	r4, #1
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d864      	bhi.n	800558c <_dtoa_r+0x29c>
 80054c2:	e8df f003 	tbb	[pc, r3]
 80054c6:	382b      	.short	0x382b
 80054c8:	5636      	.short	0x5636
 80054ca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80054ce:	441e      	add	r6, r3
 80054d0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	bfc1      	itttt	gt
 80054d8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80054dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80054e0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80054e4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80054e8:	bfd6      	itet	le
 80054ea:	f1c3 0320 	rsble	r3, r3, #32
 80054ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80054f2:	fa04 f003 	lslle.w	r0, r4, r3
 80054f6:	f7fa ff75 	bl	80003e4 <__aeabi_ui2d>
 80054fa:	2201      	movs	r2, #1
 80054fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005500:	3e01      	subs	r6, #1
 8005502:	9212      	str	r2, [sp, #72]	@ 0x48
 8005504:	e775      	b.n	80053f2 <_dtoa_r+0x102>
 8005506:	2301      	movs	r3, #1
 8005508:	e7b6      	b.n	8005478 <_dtoa_r+0x188>
 800550a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800550c:	e7b5      	b.n	800547a <_dtoa_r+0x18a>
 800550e:	427b      	negs	r3, r7
 8005510:	930a      	str	r3, [sp, #40]	@ 0x28
 8005512:	2300      	movs	r3, #0
 8005514:	eba8 0807 	sub.w	r8, r8, r7
 8005518:	930e      	str	r3, [sp, #56]	@ 0x38
 800551a:	e7c2      	b.n	80054a2 <_dtoa_r+0x1b2>
 800551c:	2300      	movs	r3, #0
 800551e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005520:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005522:	2b00      	cmp	r3, #0
 8005524:	dc35      	bgt.n	8005592 <_dtoa_r+0x2a2>
 8005526:	2301      	movs	r3, #1
 8005528:	461a      	mov	r2, r3
 800552a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800552e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005530:	e00b      	b.n	800554a <_dtoa_r+0x25a>
 8005532:	2301      	movs	r3, #1
 8005534:	e7f3      	b.n	800551e <_dtoa_r+0x22e>
 8005536:	2300      	movs	r3, #0
 8005538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800553a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	9308      	str	r3, [sp, #32]
 8005540:	3301      	adds	r3, #1
 8005542:	2b01      	cmp	r3, #1
 8005544:	9307      	str	r3, [sp, #28]
 8005546:	bfb8      	it	lt
 8005548:	2301      	movlt	r3, #1
 800554a:	2100      	movs	r1, #0
 800554c:	2204      	movs	r2, #4
 800554e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005552:	f102 0514 	add.w	r5, r2, #20
 8005556:	429d      	cmp	r5, r3
 8005558:	d91f      	bls.n	800559a <_dtoa_r+0x2aa>
 800555a:	6041      	str	r1, [r0, #4]
 800555c:	4658      	mov	r0, fp
 800555e:	f000 fd8d 	bl	800607c <_Balloc>
 8005562:	4682      	mov	sl, r0
 8005564:	2800      	cmp	r0, #0
 8005566:	d139      	bne.n	80055dc <_dtoa_r+0x2ec>
 8005568:	4602      	mov	r2, r0
 800556a:	f240 11af 	movw	r1, #431	@ 0x1af
 800556e:	4b1a      	ldr	r3, [pc, #104]	@ (80055d8 <_dtoa_r+0x2e8>)
 8005570:	e6d2      	b.n	8005318 <_dtoa_r+0x28>
 8005572:	2301      	movs	r3, #1
 8005574:	e7e0      	b.n	8005538 <_dtoa_r+0x248>
 8005576:	2401      	movs	r4, #1
 8005578:	2300      	movs	r3, #0
 800557a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800557c:	9320      	str	r3, [sp, #128]	@ 0x80
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	2200      	movs	r2, #0
 8005584:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005588:	2312      	movs	r3, #18
 800558a:	e7d0      	b.n	800552e <_dtoa_r+0x23e>
 800558c:	2301      	movs	r3, #1
 800558e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005590:	e7f5      	b.n	800557e <_dtoa_r+0x28e>
 8005592:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005594:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005598:	e7d7      	b.n	800554a <_dtoa_r+0x25a>
 800559a:	3101      	adds	r1, #1
 800559c:	0052      	lsls	r2, r2, #1
 800559e:	e7d8      	b.n	8005552 <_dtoa_r+0x262>
 80055a0:	636f4361 	.word	0x636f4361
 80055a4:	3fd287a7 	.word	0x3fd287a7
 80055a8:	8b60c8b3 	.word	0x8b60c8b3
 80055ac:	3fc68a28 	.word	0x3fc68a28
 80055b0:	509f79fb 	.word	0x509f79fb
 80055b4:	3fd34413 	.word	0x3fd34413
 80055b8:	0800844b 	.word	0x0800844b
 80055bc:	08008462 	.word	0x08008462
 80055c0:	7ff00000 	.word	0x7ff00000
 80055c4:	08008447 	.word	0x08008447
 80055c8:	0800841b 	.word	0x0800841b
 80055cc:	0800841a 	.word	0x0800841a
 80055d0:	3ff80000 	.word	0x3ff80000
 80055d4:	08008558 	.word	0x08008558
 80055d8:	080084ba 	.word	0x080084ba
 80055dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80055e0:	6018      	str	r0, [r3, #0]
 80055e2:	9b07      	ldr	r3, [sp, #28]
 80055e4:	2b0e      	cmp	r3, #14
 80055e6:	f200 80a4 	bhi.w	8005732 <_dtoa_r+0x442>
 80055ea:	2c00      	cmp	r4, #0
 80055ec:	f000 80a1 	beq.w	8005732 <_dtoa_r+0x442>
 80055f0:	2f00      	cmp	r7, #0
 80055f2:	dd33      	ble.n	800565c <_dtoa_r+0x36c>
 80055f4:	4b86      	ldr	r3, [pc, #536]	@ (8005810 <_dtoa_r+0x520>)
 80055f6:	f007 020f 	and.w	r2, r7, #15
 80055fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055fe:	05f8      	lsls	r0, r7, #23
 8005600:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005604:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005608:	ea4f 1427 	mov.w	r4, r7, asr #4
 800560c:	d516      	bpl.n	800563c <_dtoa_r+0x34c>
 800560e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005612:	4b80      	ldr	r3, [pc, #512]	@ (8005814 <_dtoa_r+0x524>)
 8005614:	2603      	movs	r6, #3
 8005616:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800561a:	f7fb f887 	bl	800072c <__aeabi_ddiv>
 800561e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005622:	f004 040f 	and.w	r4, r4, #15
 8005626:	4d7b      	ldr	r5, [pc, #492]	@ (8005814 <_dtoa_r+0x524>)
 8005628:	b954      	cbnz	r4, 8005640 <_dtoa_r+0x350>
 800562a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800562e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005632:	f7fb f87b 	bl	800072c <__aeabi_ddiv>
 8005636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800563a:	e028      	b.n	800568e <_dtoa_r+0x39e>
 800563c:	2602      	movs	r6, #2
 800563e:	e7f2      	b.n	8005626 <_dtoa_r+0x336>
 8005640:	07e1      	lsls	r1, r4, #31
 8005642:	d508      	bpl.n	8005656 <_dtoa_r+0x366>
 8005644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005648:	e9d5 2300 	ldrd	r2, r3, [r5]
 800564c:	f7fa ff44 	bl	80004d8 <__aeabi_dmul>
 8005650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005654:	3601      	adds	r6, #1
 8005656:	1064      	asrs	r4, r4, #1
 8005658:	3508      	adds	r5, #8
 800565a:	e7e5      	b.n	8005628 <_dtoa_r+0x338>
 800565c:	f000 80d2 	beq.w	8005804 <_dtoa_r+0x514>
 8005660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005664:	427c      	negs	r4, r7
 8005666:	4b6a      	ldr	r3, [pc, #424]	@ (8005810 <_dtoa_r+0x520>)
 8005668:	f004 020f 	and.w	r2, r4, #15
 800566c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa ff30 	bl	80004d8 <__aeabi_dmul>
 8005678:	2602      	movs	r6, #2
 800567a:	2300      	movs	r3, #0
 800567c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005680:	4d64      	ldr	r5, [pc, #400]	@ (8005814 <_dtoa_r+0x524>)
 8005682:	1124      	asrs	r4, r4, #4
 8005684:	2c00      	cmp	r4, #0
 8005686:	f040 80b2 	bne.w	80057ee <_dtoa_r+0x4fe>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1d3      	bne.n	8005636 <_dtoa_r+0x346>
 800568e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005692:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80b7 	beq.w	8005808 <_dtoa_r+0x518>
 800569a:	2200      	movs	r2, #0
 800569c:	4620      	mov	r0, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	4b5d      	ldr	r3, [pc, #372]	@ (8005818 <_dtoa_r+0x528>)
 80056a2:	f7fb f98b 	bl	80009bc <__aeabi_dcmplt>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f000 80ae 	beq.w	8005808 <_dtoa_r+0x518>
 80056ac:	9b07      	ldr	r3, [sp, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80aa 	beq.w	8005808 <_dtoa_r+0x518>
 80056b4:	9b08      	ldr	r3, [sp, #32]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	dd37      	ble.n	800572a <_dtoa_r+0x43a>
 80056ba:	1e7b      	subs	r3, r7, #1
 80056bc:	4620      	mov	r0, r4
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	2200      	movs	r2, #0
 80056c2:	4629      	mov	r1, r5
 80056c4:	4b55      	ldr	r3, [pc, #340]	@ (800581c <_dtoa_r+0x52c>)
 80056c6:	f7fa ff07 	bl	80004d8 <__aeabi_dmul>
 80056ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ce:	9c08      	ldr	r4, [sp, #32]
 80056d0:	3601      	adds	r6, #1
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7fa fe96 	bl	8000404 <__aeabi_i2d>
 80056d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056dc:	f7fa fefc 	bl	80004d8 <__aeabi_dmul>
 80056e0:	2200      	movs	r2, #0
 80056e2:	4b4f      	ldr	r3, [pc, #316]	@ (8005820 <_dtoa_r+0x530>)
 80056e4:	f7fa fd42 	bl	800016c <__adddf3>
 80056e8:	4605      	mov	r5, r0
 80056ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80056ee:	2c00      	cmp	r4, #0
 80056f0:	f040 809a 	bne.w	8005828 <_dtoa_r+0x538>
 80056f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005824 <_dtoa_r+0x534>)
 80056fc:	f7fa fd34 	bl	8000168 <__aeabi_dsub>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005708:	462a      	mov	r2, r5
 800570a:	4633      	mov	r3, r6
 800570c:	f7fb f974 	bl	80009f8 <__aeabi_dcmpgt>
 8005710:	2800      	cmp	r0, #0
 8005712:	f040 828e 	bne.w	8005c32 <_dtoa_r+0x942>
 8005716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800571a:	462a      	mov	r2, r5
 800571c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005720:	f7fb f94c 	bl	80009bc <__aeabi_dcmplt>
 8005724:	2800      	cmp	r0, #0
 8005726:	f040 8127 	bne.w	8005978 <_dtoa_r+0x688>
 800572a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800572e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005732:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005734:	2b00      	cmp	r3, #0
 8005736:	f2c0 8163 	blt.w	8005a00 <_dtoa_r+0x710>
 800573a:	2f0e      	cmp	r7, #14
 800573c:	f300 8160 	bgt.w	8005a00 <_dtoa_r+0x710>
 8005740:	4b33      	ldr	r3, [pc, #204]	@ (8005810 <_dtoa_r+0x520>)
 8005742:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005746:	e9d3 3400 	ldrd	r3, r4, [r3]
 800574a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800574e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005750:	2b00      	cmp	r3, #0
 8005752:	da03      	bge.n	800575c <_dtoa_r+0x46c>
 8005754:	9b07      	ldr	r3, [sp, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f340 8100 	ble.w	800595c <_dtoa_r+0x66c>
 800575c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005760:	4656      	mov	r6, sl
 8005762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005766:	4620      	mov	r0, r4
 8005768:	4629      	mov	r1, r5
 800576a:	f7fa ffdf 	bl	800072c <__aeabi_ddiv>
 800576e:	f7fb f963 	bl	8000a38 <__aeabi_d2iz>
 8005772:	4680      	mov	r8, r0
 8005774:	f7fa fe46 	bl	8000404 <__aeabi_i2d>
 8005778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800577c:	f7fa feac 	bl	80004d8 <__aeabi_dmul>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4620      	mov	r0, r4
 8005786:	4629      	mov	r1, r5
 8005788:	f7fa fcee 	bl	8000168 <__aeabi_dsub>
 800578c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005790:	9d07      	ldr	r5, [sp, #28]
 8005792:	f806 4b01 	strb.w	r4, [r6], #1
 8005796:	eba6 040a 	sub.w	r4, r6, sl
 800579a:	42a5      	cmp	r5, r4
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	f040 8116 	bne.w	80059d0 <_dtoa_r+0x6e0>
 80057a4:	f7fa fce2 	bl	800016c <__adddf3>
 80057a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ac:	4604      	mov	r4, r0
 80057ae:	460d      	mov	r5, r1
 80057b0:	f7fb f922 	bl	80009f8 <__aeabi_dcmpgt>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	f040 80f8 	bne.w	80059aa <_dtoa_r+0x6ba>
 80057ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057be:	4620      	mov	r0, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	f7fb f8f1 	bl	80009a8 <__aeabi_dcmpeq>
 80057c6:	b118      	cbz	r0, 80057d0 <_dtoa_r+0x4e0>
 80057c8:	f018 0f01 	tst.w	r8, #1
 80057cc:	f040 80ed 	bne.w	80059aa <_dtoa_r+0x6ba>
 80057d0:	4649      	mov	r1, r9
 80057d2:	4658      	mov	r0, fp
 80057d4:	f000 fc92 	bl	80060fc <_Bfree>
 80057d8:	2300      	movs	r3, #0
 80057da:	7033      	strb	r3, [r6, #0]
 80057dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80057de:	3701      	adds	r7, #1
 80057e0:	601f      	str	r7, [r3, #0]
 80057e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8320 	beq.w	8005e2a <_dtoa_r+0xb3a>
 80057ea:	601e      	str	r6, [r3, #0]
 80057ec:	e31d      	b.n	8005e2a <_dtoa_r+0xb3a>
 80057ee:	07e2      	lsls	r2, r4, #31
 80057f0:	d505      	bpl.n	80057fe <_dtoa_r+0x50e>
 80057f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057f6:	f7fa fe6f 	bl	80004d8 <__aeabi_dmul>
 80057fa:	2301      	movs	r3, #1
 80057fc:	3601      	adds	r6, #1
 80057fe:	1064      	asrs	r4, r4, #1
 8005800:	3508      	adds	r5, #8
 8005802:	e73f      	b.n	8005684 <_dtoa_r+0x394>
 8005804:	2602      	movs	r6, #2
 8005806:	e742      	b.n	800568e <_dtoa_r+0x39e>
 8005808:	9c07      	ldr	r4, [sp, #28]
 800580a:	9704      	str	r7, [sp, #16]
 800580c:	e761      	b.n	80056d2 <_dtoa_r+0x3e2>
 800580e:	bf00      	nop
 8005810:	08008558 	.word	0x08008558
 8005814:	08008530 	.word	0x08008530
 8005818:	3ff00000 	.word	0x3ff00000
 800581c:	40240000 	.word	0x40240000
 8005820:	401c0000 	.word	0x401c0000
 8005824:	40140000 	.word	0x40140000
 8005828:	4b70      	ldr	r3, [pc, #448]	@ (80059ec <_dtoa_r+0x6fc>)
 800582a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800582c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005830:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005834:	4454      	add	r4, sl
 8005836:	2900      	cmp	r1, #0
 8005838:	d045      	beq.n	80058c6 <_dtoa_r+0x5d6>
 800583a:	2000      	movs	r0, #0
 800583c:	496c      	ldr	r1, [pc, #432]	@ (80059f0 <_dtoa_r+0x700>)
 800583e:	f7fa ff75 	bl	800072c <__aeabi_ddiv>
 8005842:	4633      	mov	r3, r6
 8005844:	462a      	mov	r2, r5
 8005846:	f7fa fc8f 	bl	8000168 <__aeabi_dsub>
 800584a:	4656      	mov	r6, sl
 800584c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005854:	f7fb f8f0 	bl	8000a38 <__aeabi_d2iz>
 8005858:	4605      	mov	r5, r0
 800585a:	f7fa fdd3 	bl	8000404 <__aeabi_i2d>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005866:	f7fa fc7f 	bl	8000168 <__aeabi_dsub>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	3530      	adds	r5, #48	@ 0x30
 8005870:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005874:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005878:	f806 5b01 	strb.w	r5, [r6], #1
 800587c:	f7fb f89e 	bl	80009bc <__aeabi_dcmplt>
 8005880:	2800      	cmp	r0, #0
 8005882:	d163      	bne.n	800594c <_dtoa_r+0x65c>
 8005884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005888:	2000      	movs	r0, #0
 800588a:	495a      	ldr	r1, [pc, #360]	@ (80059f4 <_dtoa_r+0x704>)
 800588c:	f7fa fc6c 	bl	8000168 <__aeabi_dsub>
 8005890:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005894:	f7fb f892 	bl	80009bc <__aeabi_dcmplt>
 8005898:	2800      	cmp	r0, #0
 800589a:	f040 8087 	bne.w	80059ac <_dtoa_r+0x6bc>
 800589e:	42a6      	cmp	r6, r4
 80058a0:	f43f af43 	beq.w	800572a <_dtoa_r+0x43a>
 80058a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80058a8:	2200      	movs	r2, #0
 80058aa:	4b53      	ldr	r3, [pc, #332]	@ (80059f8 <_dtoa_r+0x708>)
 80058ac:	f7fa fe14 	bl	80004d8 <__aeabi_dmul>
 80058b0:	2200      	movs	r2, #0
 80058b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ba:	4b4f      	ldr	r3, [pc, #316]	@ (80059f8 <_dtoa_r+0x708>)
 80058bc:	f7fa fe0c 	bl	80004d8 <__aeabi_dmul>
 80058c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058c4:	e7c4      	b.n	8005850 <_dtoa_r+0x560>
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	f7fa fe05 	bl	80004d8 <__aeabi_dmul>
 80058ce:	4656      	mov	r6, sl
 80058d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058d4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80058d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058da:	f7fb f8ad 	bl	8000a38 <__aeabi_d2iz>
 80058de:	4605      	mov	r5, r0
 80058e0:	f7fa fd90 	bl	8000404 <__aeabi_i2d>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ec:	f7fa fc3c 	bl	8000168 <__aeabi_dsub>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	3530      	adds	r5, #48	@ 0x30
 80058f6:	f806 5b01 	strb.w	r5, [r6], #1
 80058fa:	42a6      	cmp	r6, r4
 80058fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	d124      	bne.n	8005950 <_dtoa_r+0x660>
 8005906:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800590a:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <_dtoa_r+0x700>)
 800590c:	f7fa fc2e 	bl	800016c <__adddf3>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005918:	f7fb f86e 	bl	80009f8 <__aeabi_dcmpgt>
 800591c:	2800      	cmp	r0, #0
 800591e:	d145      	bne.n	80059ac <_dtoa_r+0x6bc>
 8005920:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005924:	2000      	movs	r0, #0
 8005926:	4932      	ldr	r1, [pc, #200]	@ (80059f0 <_dtoa_r+0x700>)
 8005928:	f7fa fc1e 	bl	8000168 <__aeabi_dsub>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005934:	f7fb f842 	bl	80009bc <__aeabi_dcmplt>
 8005938:	2800      	cmp	r0, #0
 800593a:	f43f aef6 	beq.w	800572a <_dtoa_r+0x43a>
 800593e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005940:	1e73      	subs	r3, r6, #1
 8005942:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005944:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005948:	2b30      	cmp	r3, #48	@ 0x30
 800594a:	d0f8      	beq.n	800593e <_dtoa_r+0x64e>
 800594c:	9f04      	ldr	r7, [sp, #16]
 800594e:	e73f      	b.n	80057d0 <_dtoa_r+0x4e0>
 8005950:	4b29      	ldr	r3, [pc, #164]	@ (80059f8 <_dtoa_r+0x708>)
 8005952:	f7fa fdc1 	bl	80004d8 <__aeabi_dmul>
 8005956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800595a:	e7bc      	b.n	80058d6 <_dtoa_r+0x5e6>
 800595c:	d10c      	bne.n	8005978 <_dtoa_r+0x688>
 800595e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005962:	2200      	movs	r2, #0
 8005964:	4b25      	ldr	r3, [pc, #148]	@ (80059fc <_dtoa_r+0x70c>)
 8005966:	f7fa fdb7 	bl	80004d8 <__aeabi_dmul>
 800596a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800596e:	f7fb f839 	bl	80009e4 <__aeabi_dcmpge>
 8005972:	2800      	cmp	r0, #0
 8005974:	f000 815b 	beq.w	8005c2e <_dtoa_r+0x93e>
 8005978:	2400      	movs	r4, #0
 800597a:	4625      	mov	r5, r4
 800597c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800597e:	4656      	mov	r6, sl
 8005980:	43db      	mvns	r3, r3
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	2700      	movs	r7, #0
 8005986:	4621      	mov	r1, r4
 8005988:	4658      	mov	r0, fp
 800598a:	f000 fbb7 	bl	80060fc <_Bfree>
 800598e:	2d00      	cmp	r5, #0
 8005990:	d0dc      	beq.n	800594c <_dtoa_r+0x65c>
 8005992:	b12f      	cbz	r7, 80059a0 <_dtoa_r+0x6b0>
 8005994:	42af      	cmp	r7, r5
 8005996:	d003      	beq.n	80059a0 <_dtoa_r+0x6b0>
 8005998:	4639      	mov	r1, r7
 800599a:	4658      	mov	r0, fp
 800599c:	f000 fbae 	bl	80060fc <_Bfree>
 80059a0:	4629      	mov	r1, r5
 80059a2:	4658      	mov	r0, fp
 80059a4:	f000 fbaa 	bl	80060fc <_Bfree>
 80059a8:	e7d0      	b.n	800594c <_dtoa_r+0x65c>
 80059aa:	9704      	str	r7, [sp, #16]
 80059ac:	4633      	mov	r3, r6
 80059ae:	461e      	mov	r6, r3
 80059b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059b4:	2a39      	cmp	r2, #57	@ 0x39
 80059b6:	d107      	bne.n	80059c8 <_dtoa_r+0x6d8>
 80059b8:	459a      	cmp	sl, r3
 80059ba:	d1f8      	bne.n	80059ae <_dtoa_r+0x6be>
 80059bc:	9a04      	ldr	r2, [sp, #16]
 80059be:	3201      	adds	r2, #1
 80059c0:	9204      	str	r2, [sp, #16]
 80059c2:	2230      	movs	r2, #48	@ 0x30
 80059c4:	f88a 2000 	strb.w	r2, [sl]
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	3201      	adds	r2, #1
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e7bd      	b.n	800594c <_dtoa_r+0x65c>
 80059d0:	2200      	movs	r2, #0
 80059d2:	4b09      	ldr	r3, [pc, #36]	@ (80059f8 <_dtoa_r+0x708>)
 80059d4:	f7fa fd80 	bl	80004d8 <__aeabi_dmul>
 80059d8:	2200      	movs	r2, #0
 80059da:	2300      	movs	r3, #0
 80059dc:	4604      	mov	r4, r0
 80059de:	460d      	mov	r5, r1
 80059e0:	f7fa ffe2 	bl	80009a8 <__aeabi_dcmpeq>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f43f aebc 	beq.w	8005762 <_dtoa_r+0x472>
 80059ea:	e6f1      	b.n	80057d0 <_dtoa_r+0x4e0>
 80059ec:	08008558 	.word	0x08008558
 80059f0:	3fe00000 	.word	0x3fe00000
 80059f4:	3ff00000 	.word	0x3ff00000
 80059f8:	40240000 	.word	0x40240000
 80059fc:	40140000 	.word	0x40140000
 8005a00:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	f000 80db 	beq.w	8005bbe <_dtoa_r+0x8ce>
 8005a08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a0a:	2a01      	cmp	r2, #1
 8005a0c:	f300 80bf 	bgt.w	8005b8e <_dtoa_r+0x89e>
 8005a10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	f000 80b7 	beq.w	8005b86 <_dtoa_r+0x896>
 8005a18:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005a1c:	4646      	mov	r6, r8
 8005a1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a22:	2101      	movs	r1, #1
 8005a24:	441a      	add	r2, r3
 8005a26:	4658      	mov	r0, fp
 8005a28:	4498      	add	r8, r3
 8005a2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a2c:	f000 fc1a 	bl	8006264 <__i2b>
 8005a30:	4605      	mov	r5, r0
 8005a32:	b15e      	cbz	r6, 8005a4c <_dtoa_r+0x75c>
 8005a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	dd08      	ble.n	8005a4c <_dtoa_r+0x75c>
 8005a3a:	42b3      	cmp	r3, r6
 8005a3c:	bfa8      	it	ge
 8005a3e:	4633      	movge	r3, r6
 8005a40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a42:	eba8 0803 	sub.w	r8, r8, r3
 8005a46:	1af6      	subs	r6, r6, r3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a4e:	b1f3      	cbz	r3, 8005a8e <_dtoa_r+0x79e>
 8005a50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80b7 	beq.w	8005bc6 <_dtoa_r+0x8d6>
 8005a58:	b18c      	cbz	r4, 8005a7e <_dtoa_r+0x78e>
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	4658      	mov	r0, fp
 8005a60:	f000 fcbe 	bl	80063e0 <__pow5mult>
 8005a64:	464a      	mov	r2, r9
 8005a66:	4601      	mov	r1, r0
 8005a68:	4605      	mov	r5, r0
 8005a6a:	4658      	mov	r0, fp
 8005a6c:	f000 fc10 	bl	8006290 <__multiply>
 8005a70:	4649      	mov	r1, r9
 8005a72:	9004      	str	r0, [sp, #16]
 8005a74:	4658      	mov	r0, fp
 8005a76:	f000 fb41 	bl	80060fc <_Bfree>
 8005a7a:	9b04      	ldr	r3, [sp, #16]
 8005a7c:	4699      	mov	r9, r3
 8005a7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a80:	1b1a      	subs	r2, r3, r4
 8005a82:	d004      	beq.n	8005a8e <_dtoa_r+0x79e>
 8005a84:	4649      	mov	r1, r9
 8005a86:	4658      	mov	r0, fp
 8005a88:	f000 fcaa 	bl	80063e0 <__pow5mult>
 8005a8c:	4681      	mov	r9, r0
 8005a8e:	2101      	movs	r1, #1
 8005a90:	4658      	mov	r0, fp
 8005a92:	f000 fbe7 	bl	8006264 <__i2b>
 8005a96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a98:	4604      	mov	r4, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 81c9 	beq.w	8005e32 <_dtoa_r+0xb42>
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	4658      	mov	r0, fp
 8005aa6:	f000 fc9b 	bl	80063e0 <__pow5mult>
 8005aaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005aac:	4604      	mov	r4, r0
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	f300 808f 	bgt.w	8005bd2 <_dtoa_r+0x8e2>
 8005ab4:	9b02      	ldr	r3, [sp, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 8087 	bne.w	8005bca <_dtoa_r+0x8da>
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f040 8083 	bne.w	8005bce <_dtoa_r+0x8de>
 8005ac8:	9b03      	ldr	r3, [sp, #12]
 8005aca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ace:	0d1b      	lsrs	r3, r3, #20
 8005ad0:	051b      	lsls	r3, r3, #20
 8005ad2:	b12b      	cbz	r3, 8005ae0 <_dtoa_r+0x7f0>
 8005ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ad6:	f108 0801 	add.w	r8, r8, #1
 8005ada:	3301      	adds	r3, #1
 8005adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ade:	2301      	movs	r3, #1
 8005ae0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 81aa 	beq.w	8005e3e <_dtoa_r+0xb4e>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005af0:	6918      	ldr	r0, [r3, #16]
 8005af2:	f000 fb6b 	bl	80061cc <__hi0bits>
 8005af6:	f1c0 0020 	rsb	r0, r0, #32
 8005afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005afc:	4418      	add	r0, r3
 8005afe:	f010 001f 	ands.w	r0, r0, #31
 8005b02:	d071      	beq.n	8005be8 <_dtoa_r+0x8f8>
 8005b04:	f1c0 0320 	rsb	r3, r0, #32
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	dd65      	ble.n	8005bd8 <_dtoa_r+0x8e8>
 8005b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b0e:	f1c0 001c 	rsb	r0, r0, #28
 8005b12:	4403      	add	r3, r0
 8005b14:	4480      	add	r8, r0
 8005b16:	4406      	add	r6, r0
 8005b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b1a:	f1b8 0f00 	cmp.w	r8, #0
 8005b1e:	dd05      	ble.n	8005b2c <_dtoa_r+0x83c>
 8005b20:	4649      	mov	r1, r9
 8005b22:	4642      	mov	r2, r8
 8005b24:	4658      	mov	r0, fp
 8005b26:	f000 fcb5 	bl	8006494 <__lshift>
 8005b2a:	4681      	mov	r9, r0
 8005b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	dd05      	ble.n	8005b3e <_dtoa_r+0x84e>
 8005b32:	4621      	mov	r1, r4
 8005b34:	461a      	mov	r2, r3
 8005b36:	4658      	mov	r0, fp
 8005b38:	f000 fcac 	bl	8006494 <__lshift>
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d053      	beq.n	8005bec <_dtoa_r+0x8fc>
 8005b44:	4621      	mov	r1, r4
 8005b46:	4648      	mov	r0, r9
 8005b48:	f000 fd10 	bl	800656c <__mcmp>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	da4d      	bge.n	8005bec <_dtoa_r+0x8fc>
 8005b50:	1e7b      	subs	r3, r7, #1
 8005b52:	4649      	mov	r1, r9
 8005b54:	9304      	str	r3, [sp, #16]
 8005b56:	220a      	movs	r2, #10
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4658      	mov	r0, fp
 8005b5c:	f000 faf0 	bl	8006140 <__multadd>
 8005b60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b62:	4681      	mov	r9, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 816c 	beq.w	8005e42 <_dtoa_r+0xb52>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	220a      	movs	r2, #10
 8005b70:	4658      	mov	r0, fp
 8005b72:	f000 fae5 	bl	8006140 <__multadd>
 8005b76:	9b08      	ldr	r3, [sp, #32]
 8005b78:	4605      	mov	r5, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dc61      	bgt.n	8005c42 <_dtoa_r+0x952>
 8005b7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	dc3b      	bgt.n	8005bfc <_dtoa_r+0x90c>
 8005b84:	e05d      	b.n	8005c42 <_dtoa_r+0x952>
 8005b86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b88:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005b8c:	e746      	b.n	8005a1c <_dtoa_r+0x72c>
 8005b8e:	9b07      	ldr	r3, [sp, #28]
 8005b90:	1e5c      	subs	r4, r3, #1
 8005b92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	bfbf      	itttt	lt
 8005b98:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005b9a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005b9c:	1ae3      	sublt	r3, r4, r3
 8005b9e:	18d2      	addlt	r2, r2, r3
 8005ba0:	bfa8      	it	ge
 8005ba2:	1b1c      	subge	r4, r3, r4
 8005ba4:	9b07      	ldr	r3, [sp, #28]
 8005ba6:	bfbe      	ittt	lt
 8005ba8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005baa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005bac:	2400      	movlt	r4, #0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bfb5      	itete	lt
 8005bb2:	eba8 0603 	sublt.w	r6, r8, r3
 8005bb6:	4646      	movge	r6, r8
 8005bb8:	2300      	movlt	r3, #0
 8005bba:	9b07      	ldrge	r3, [sp, #28]
 8005bbc:	e730      	b.n	8005a20 <_dtoa_r+0x730>
 8005bbe:	4646      	mov	r6, r8
 8005bc0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005bc2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005bc4:	e735      	b.n	8005a32 <_dtoa_r+0x742>
 8005bc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bc8:	e75c      	b.n	8005a84 <_dtoa_r+0x794>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e788      	b.n	8005ae0 <_dtoa_r+0x7f0>
 8005bce:	9b02      	ldr	r3, [sp, #8]
 8005bd0:	e786      	b.n	8005ae0 <_dtoa_r+0x7f0>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bd6:	e788      	b.n	8005aea <_dtoa_r+0x7fa>
 8005bd8:	d09f      	beq.n	8005b1a <_dtoa_r+0x82a>
 8005bda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bdc:	331c      	adds	r3, #28
 8005bde:	441a      	add	r2, r3
 8005be0:	4498      	add	r8, r3
 8005be2:	441e      	add	r6, r3
 8005be4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005be6:	e798      	b.n	8005b1a <_dtoa_r+0x82a>
 8005be8:	4603      	mov	r3, r0
 8005bea:	e7f6      	b.n	8005bda <_dtoa_r+0x8ea>
 8005bec:	9b07      	ldr	r3, [sp, #28]
 8005bee:	9704      	str	r7, [sp, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc20      	bgt.n	8005c36 <_dtoa_r+0x946>
 8005bf4:	9308      	str	r3, [sp, #32]
 8005bf6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	dd1e      	ble.n	8005c3a <_dtoa_r+0x94a>
 8005bfc:	9b08      	ldr	r3, [sp, #32]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f47f aebc 	bne.w	800597c <_dtoa_r+0x68c>
 8005c04:	4621      	mov	r1, r4
 8005c06:	2205      	movs	r2, #5
 8005c08:	4658      	mov	r0, fp
 8005c0a:	f000 fa99 	bl	8006140 <__multadd>
 8005c0e:	4601      	mov	r1, r0
 8005c10:	4604      	mov	r4, r0
 8005c12:	4648      	mov	r0, r9
 8005c14:	f000 fcaa 	bl	800656c <__mcmp>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	f77f aeaf 	ble.w	800597c <_dtoa_r+0x68c>
 8005c1e:	2331      	movs	r3, #49	@ 0x31
 8005c20:	4656      	mov	r6, sl
 8005c22:	f806 3b01 	strb.w	r3, [r6], #1
 8005c26:	9b04      	ldr	r3, [sp, #16]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	9304      	str	r3, [sp, #16]
 8005c2c:	e6aa      	b.n	8005984 <_dtoa_r+0x694>
 8005c2e:	9c07      	ldr	r4, [sp, #28]
 8005c30:	9704      	str	r7, [sp, #16]
 8005c32:	4625      	mov	r5, r4
 8005c34:	e7f3      	b.n	8005c1e <_dtoa_r+0x92e>
 8005c36:	9b07      	ldr	r3, [sp, #28]
 8005c38:	9308      	str	r3, [sp, #32]
 8005c3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 8104 	beq.w	8005e4a <_dtoa_r+0xb5a>
 8005c42:	2e00      	cmp	r6, #0
 8005c44:	dd05      	ble.n	8005c52 <_dtoa_r+0x962>
 8005c46:	4629      	mov	r1, r5
 8005c48:	4632      	mov	r2, r6
 8005c4a:	4658      	mov	r0, fp
 8005c4c:	f000 fc22 	bl	8006494 <__lshift>
 8005c50:	4605      	mov	r5, r0
 8005c52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d05a      	beq.n	8005d0e <_dtoa_r+0xa1e>
 8005c58:	4658      	mov	r0, fp
 8005c5a:	6869      	ldr	r1, [r5, #4]
 8005c5c:	f000 fa0e 	bl	800607c <_Balloc>
 8005c60:	4606      	mov	r6, r0
 8005c62:	b928      	cbnz	r0, 8005c70 <_dtoa_r+0x980>
 8005c64:	4602      	mov	r2, r0
 8005c66:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005c6a:	4b83      	ldr	r3, [pc, #524]	@ (8005e78 <_dtoa_r+0xb88>)
 8005c6c:	f7ff bb54 	b.w	8005318 <_dtoa_r+0x28>
 8005c70:	692a      	ldr	r2, [r5, #16]
 8005c72:	f105 010c 	add.w	r1, r5, #12
 8005c76:	3202      	adds	r2, #2
 8005c78:	0092      	lsls	r2, r2, #2
 8005c7a:	300c      	adds	r0, #12
 8005c7c:	f7ff faa1 	bl	80051c2 <memcpy>
 8005c80:	2201      	movs	r2, #1
 8005c82:	4631      	mov	r1, r6
 8005c84:	4658      	mov	r0, fp
 8005c86:	f000 fc05 	bl	8006494 <__lshift>
 8005c8a:	462f      	mov	r7, r5
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	f10a 0301 	add.w	r3, sl, #1
 8005c92:	9307      	str	r3, [sp, #28]
 8005c94:	9b08      	ldr	r3, [sp, #32]
 8005c96:	4453      	add	r3, sl
 8005c98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c9a:	9b02      	ldr	r3, [sp, #8]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ca2:	9b07      	ldr	r3, [sp, #28]
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	4648      	mov	r0, r9
 8005caa:	9302      	str	r3, [sp, #8]
 8005cac:	f7ff fa97 	bl	80051de <quorem>
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	9008      	str	r0, [sp, #32]
 8005cb4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005cb8:	4648      	mov	r0, r9
 8005cba:	f000 fc57 	bl	800656c <__mcmp>
 8005cbe:	462a      	mov	r2, r5
 8005cc0:	9009      	str	r0, [sp, #36]	@ 0x24
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4658      	mov	r0, fp
 8005cc6:	f000 fc6d 	bl	80065a4 <__mdiff>
 8005cca:	68c2      	ldr	r2, [r0, #12]
 8005ccc:	4606      	mov	r6, r0
 8005cce:	bb02      	cbnz	r2, 8005d12 <_dtoa_r+0xa22>
 8005cd0:	4601      	mov	r1, r0
 8005cd2:	4648      	mov	r0, r9
 8005cd4:	f000 fc4a 	bl	800656c <__mcmp>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4658      	mov	r0, fp
 8005cde:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ce0:	f000 fa0c 	bl	80060fc <_Bfree>
 8005ce4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ce6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ce8:	9e07      	ldr	r6, [sp, #28]
 8005cea:	ea43 0102 	orr.w	r1, r3, r2
 8005cee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cf0:	4319      	orrs	r1, r3
 8005cf2:	d110      	bne.n	8005d16 <_dtoa_r+0xa26>
 8005cf4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005cf8:	d029      	beq.n	8005d4e <_dtoa_r+0xa5e>
 8005cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	dd02      	ble.n	8005d06 <_dtoa_r+0xa16>
 8005d00:	9b08      	ldr	r3, [sp, #32]
 8005d02:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005d06:	9b02      	ldr	r3, [sp, #8]
 8005d08:	f883 8000 	strb.w	r8, [r3]
 8005d0c:	e63b      	b.n	8005986 <_dtoa_r+0x696>
 8005d0e:	4628      	mov	r0, r5
 8005d10:	e7bb      	b.n	8005c8a <_dtoa_r+0x99a>
 8005d12:	2201      	movs	r2, #1
 8005d14:	e7e1      	b.n	8005cda <_dtoa_r+0x9ea>
 8005d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	db04      	blt.n	8005d26 <_dtoa_r+0xa36>
 8005d1c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d22:	430b      	orrs	r3, r1
 8005d24:	d120      	bne.n	8005d68 <_dtoa_r+0xa78>
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	dded      	ble.n	8005d06 <_dtoa_r+0xa16>
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4658      	mov	r0, fp
 8005d30:	f000 fbb0 	bl	8006494 <__lshift>
 8005d34:	4621      	mov	r1, r4
 8005d36:	4681      	mov	r9, r0
 8005d38:	f000 fc18 	bl	800656c <__mcmp>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	dc03      	bgt.n	8005d48 <_dtoa_r+0xa58>
 8005d40:	d1e1      	bne.n	8005d06 <_dtoa_r+0xa16>
 8005d42:	f018 0f01 	tst.w	r8, #1
 8005d46:	d0de      	beq.n	8005d06 <_dtoa_r+0xa16>
 8005d48:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d4c:	d1d8      	bne.n	8005d00 <_dtoa_r+0xa10>
 8005d4e:	2339      	movs	r3, #57	@ 0x39
 8005d50:	9a02      	ldr	r2, [sp, #8]
 8005d52:	7013      	strb	r3, [r2, #0]
 8005d54:	4633      	mov	r3, r6
 8005d56:	461e      	mov	r6, r3
 8005d58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	2a39      	cmp	r2, #57	@ 0x39
 8005d60:	d052      	beq.n	8005e08 <_dtoa_r+0xb18>
 8005d62:	3201      	adds	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e60e      	b.n	8005986 <_dtoa_r+0x696>
 8005d68:	2a00      	cmp	r2, #0
 8005d6a:	dd07      	ble.n	8005d7c <_dtoa_r+0xa8c>
 8005d6c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d70:	d0ed      	beq.n	8005d4e <_dtoa_r+0xa5e>
 8005d72:	9a02      	ldr	r2, [sp, #8]
 8005d74:	f108 0301 	add.w	r3, r8, #1
 8005d78:	7013      	strb	r3, [r2, #0]
 8005d7a:	e604      	b.n	8005986 <_dtoa_r+0x696>
 8005d7c:	9b07      	ldr	r3, [sp, #28]
 8005d7e:	9a07      	ldr	r2, [sp, #28]
 8005d80:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005d84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d028      	beq.n	8005ddc <_dtoa_r+0xaec>
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	220a      	movs	r2, #10
 8005d90:	4658      	mov	r0, fp
 8005d92:	f000 f9d5 	bl	8006140 <__multadd>
 8005d96:	42af      	cmp	r7, r5
 8005d98:	4681      	mov	r9, r0
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	f04f 020a 	mov.w	r2, #10
 8005da2:	4639      	mov	r1, r7
 8005da4:	4658      	mov	r0, fp
 8005da6:	d107      	bne.n	8005db8 <_dtoa_r+0xac8>
 8005da8:	f000 f9ca 	bl	8006140 <__multadd>
 8005dac:	4607      	mov	r7, r0
 8005dae:	4605      	mov	r5, r0
 8005db0:	9b07      	ldr	r3, [sp, #28]
 8005db2:	3301      	adds	r3, #1
 8005db4:	9307      	str	r3, [sp, #28]
 8005db6:	e774      	b.n	8005ca2 <_dtoa_r+0x9b2>
 8005db8:	f000 f9c2 	bl	8006140 <__multadd>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4607      	mov	r7, r0
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	220a      	movs	r2, #10
 8005dc4:	4658      	mov	r0, fp
 8005dc6:	f000 f9bb 	bl	8006140 <__multadd>
 8005dca:	4605      	mov	r5, r0
 8005dcc:	e7f0      	b.n	8005db0 <_dtoa_r+0xac0>
 8005dce:	9b08      	ldr	r3, [sp, #32]
 8005dd0:	2700      	movs	r7, #0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bfcc      	ite	gt
 8005dd6:	461e      	movgt	r6, r3
 8005dd8:	2601      	movle	r6, #1
 8005dda:	4456      	add	r6, sl
 8005ddc:	4649      	mov	r1, r9
 8005dde:	2201      	movs	r2, #1
 8005de0:	4658      	mov	r0, fp
 8005de2:	f000 fb57 	bl	8006494 <__lshift>
 8005de6:	4621      	mov	r1, r4
 8005de8:	4681      	mov	r9, r0
 8005dea:	f000 fbbf 	bl	800656c <__mcmp>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	dcb0      	bgt.n	8005d54 <_dtoa_r+0xa64>
 8005df2:	d102      	bne.n	8005dfa <_dtoa_r+0xb0a>
 8005df4:	f018 0f01 	tst.w	r8, #1
 8005df8:	d1ac      	bne.n	8005d54 <_dtoa_r+0xa64>
 8005dfa:	4633      	mov	r3, r6
 8005dfc:	461e      	mov	r6, r3
 8005dfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e02:	2a30      	cmp	r2, #48	@ 0x30
 8005e04:	d0fa      	beq.n	8005dfc <_dtoa_r+0xb0c>
 8005e06:	e5be      	b.n	8005986 <_dtoa_r+0x696>
 8005e08:	459a      	cmp	sl, r3
 8005e0a:	d1a4      	bne.n	8005d56 <_dtoa_r+0xa66>
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	9304      	str	r3, [sp, #16]
 8005e12:	2331      	movs	r3, #49	@ 0x31
 8005e14:	f88a 3000 	strb.w	r3, [sl]
 8005e18:	e5b5      	b.n	8005986 <_dtoa_r+0x696>
 8005e1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e1c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005e7c <_dtoa_r+0xb8c>
 8005e20:	b11b      	cbz	r3, 8005e2a <_dtoa_r+0xb3a>
 8005e22:	f10a 0308 	add.w	r3, sl, #8
 8005e26:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	b017      	add	sp, #92	@ 0x5c
 8005e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	f77f ae3d 	ble.w	8005ab4 <_dtoa_r+0x7c4>
 8005e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e3e:	2001      	movs	r0, #1
 8005e40:	e65b      	b.n	8005afa <_dtoa_r+0x80a>
 8005e42:	9b08      	ldr	r3, [sp, #32]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f77f aed6 	ble.w	8005bf6 <_dtoa_r+0x906>
 8005e4a:	4656      	mov	r6, sl
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4648      	mov	r0, r9
 8005e50:	f7ff f9c5 	bl	80051de <quorem>
 8005e54:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005e58:	9b08      	ldr	r3, [sp, #32]
 8005e5a:	f806 8b01 	strb.w	r8, [r6], #1
 8005e5e:	eba6 020a 	sub.w	r2, r6, sl
 8005e62:	4293      	cmp	r3, r2
 8005e64:	ddb3      	ble.n	8005dce <_dtoa_r+0xade>
 8005e66:	4649      	mov	r1, r9
 8005e68:	2300      	movs	r3, #0
 8005e6a:	220a      	movs	r2, #10
 8005e6c:	4658      	mov	r0, fp
 8005e6e:	f000 f967 	bl	8006140 <__multadd>
 8005e72:	4681      	mov	r9, r0
 8005e74:	e7ea      	b.n	8005e4c <_dtoa_r+0xb5c>
 8005e76:	bf00      	nop
 8005e78:	080084ba 	.word	0x080084ba
 8005e7c:	0800843e 	.word	0x0800843e

08005e80 <_free_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4605      	mov	r5, r0
 8005e84:	2900      	cmp	r1, #0
 8005e86:	d040      	beq.n	8005f0a <_free_r+0x8a>
 8005e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e8c:	1f0c      	subs	r4, r1, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bfb8      	it	lt
 8005e92:	18e4      	addlt	r4, r4, r3
 8005e94:	f000 f8e6 	bl	8006064 <__malloc_lock>
 8005e98:	4a1c      	ldr	r2, [pc, #112]	@ (8005f0c <_free_r+0x8c>)
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	b933      	cbnz	r3, 8005eac <_free_r+0x2c>
 8005e9e:	6063      	str	r3, [r4, #4]
 8005ea0:	6014      	str	r4, [r2, #0]
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea8:	f000 b8e2 	b.w	8006070 <__malloc_unlock>
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	d908      	bls.n	8005ec2 <_free_r+0x42>
 8005eb0:	6820      	ldr	r0, [r4, #0]
 8005eb2:	1821      	adds	r1, r4, r0
 8005eb4:	428b      	cmp	r3, r1
 8005eb6:	bf01      	itttt	eq
 8005eb8:	6819      	ldreq	r1, [r3, #0]
 8005eba:	685b      	ldreq	r3, [r3, #4]
 8005ebc:	1809      	addeq	r1, r1, r0
 8005ebe:	6021      	streq	r1, [r4, #0]
 8005ec0:	e7ed      	b.n	8005e9e <_free_r+0x1e>
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	b10b      	cbz	r3, 8005ecc <_free_r+0x4c>
 8005ec8:	42a3      	cmp	r3, r4
 8005eca:	d9fa      	bls.n	8005ec2 <_free_r+0x42>
 8005ecc:	6811      	ldr	r1, [r2, #0]
 8005ece:	1850      	adds	r0, r2, r1
 8005ed0:	42a0      	cmp	r0, r4
 8005ed2:	d10b      	bne.n	8005eec <_free_r+0x6c>
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	1850      	adds	r0, r2, r1
 8005eda:	4283      	cmp	r3, r0
 8005edc:	6011      	str	r1, [r2, #0]
 8005ede:	d1e0      	bne.n	8005ea2 <_free_r+0x22>
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4408      	add	r0, r1
 8005ee6:	6010      	str	r0, [r2, #0]
 8005ee8:	6053      	str	r3, [r2, #4]
 8005eea:	e7da      	b.n	8005ea2 <_free_r+0x22>
 8005eec:	d902      	bls.n	8005ef4 <_free_r+0x74>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	e7d6      	b.n	8005ea2 <_free_r+0x22>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	1821      	adds	r1, r4, r0
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	bf01      	itttt	eq
 8005efc:	6819      	ldreq	r1, [r3, #0]
 8005efe:	685b      	ldreq	r3, [r3, #4]
 8005f00:	1809      	addeq	r1, r1, r0
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	6054      	str	r4, [r2, #4]
 8005f08:	e7cb      	b.n	8005ea2 <_free_r+0x22>
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	20000864 	.word	0x20000864

08005f10 <malloc>:
 8005f10:	4b02      	ldr	r3, [pc, #8]	@ (8005f1c <malloc+0xc>)
 8005f12:	4601      	mov	r1, r0
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	f000 b825 	b.w	8005f64 <_malloc_r>
 8005f1a:	bf00      	nop
 8005f1c:	20000018 	.word	0x20000018

08005f20 <sbrk_aligned>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	4e0f      	ldr	r6, [pc, #60]	@ (8005f60 <sbrk_aligned+0x40>)
 8005f24:	460c      	mov	r4, r1
 8005f26:	6831      	ldr	r1, [r6, #0]
 8005f28:	4605      	mov	r5, r0
 8005f2a:	b911      	cbnz	r1, 8005f32 <sbrk_aligned+0x12>
 8005f2c:	f000 fe40 	bl	8006bb0 <_sbrk_r>
 8005f30:	6030      	str	r0, [r6, #0]
 8005f32:	4621      	mov	r1, r4
 8005f34:	4628      	mov	r0, r5
 8005f36:	f000 fe3b 	bl	8006bb0 <_sbrk_r>
 8005f3a:	1c43      	adds	r3, r0, #1
 8005f3c:	d103      	bne.n	8005f46 <sbrk_aligned+0x26>
 8005f3e:	f04f 34ff 	mov.w	r4, #4294967295
 8005f42:	4620      	mov	r0, r4
 8005f44:	bd70      	pop	{r4, r5, r6, pc}
 8005f46:	1cc4      	adds	r4, r0, #3
 8005f48:	f024 0403 	bic.w	r4, r4, #3
 8005f4c:	42a0      	cmp	r0, r4
 8005f4e:	d0f8      	beq.n	8005f42 <sbrk_aligned+0x22>
 8005f50:	1a21      	subs	r1, r4, r0
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 fe2c 	bl	8006bb0 <_sbrk_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d1f2      	bne.n	8005f42 <sbrk_aligned+0x22>
 8005f5c:	e7ef      	b.n	8005f3e <sbrk_aligned+0x1e>
 8005f5e:	bf00      	nop
 8005f60:	20000860 	.word	0x20000860

08005f64 <_malloc_r>:
 8005f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f68:	1ccd      	adds	r5, r1, #3
 8005f6a:	f025 0503 	bic.w	r5, r5, #3
 8005f6e:	3508      	adds	r5, #8
 8005f70:	2d0c      	cmp	r5, #12
 8005f72:	bf38      	it	cc
 8005f74:	250c      	movcc	r5, #12
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	4606      	mov	r6, r0
 8005f7a:	db01      	blt.n	8005f80 <_malloc_r+0x1c>
 8005f7c:	42a9      	cmp	r1, r5
 8005f7e:	d904      	bls.n	8005f8a <_malloc_r+0x26>
 8005f80:	230c      	movs	r3, #12
 8005f82:	6033      	str	r3, [r6, #0]
 8005f84:	2000      	movs	r0, #0
 8005f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006060 <_malloc_r+0xfc>
 8005f8e:	f000 f869 	bl	8006064 <__malloc_lock>
 8005f92:	f8d8 3000 	ldr.w	r3, [r8]
 8005f96:	461c      	mov	r4, r3
 8005f98:	bb44      	cbnz	r4, 8005fec <_malloc_r+0x88>
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f7ff ffbf 	bl	8005f20 <sbrk_aligned>
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	d158      	bne.n	800605a <_malloc_r+0xf6>
 8005fa8:	f8d8 4000 	ldr.w	r4, [r8]
 8005fac:	4627      	mov	r7, r4
 8005fae:	2f00      	cmp	r7, #0
 8005fb0:	d143      	bne.n	800603a <_malloc_r+0xd6>
 8005fb2:	2c00      	cmp	r4, #0
 8005fb4:	d04b      	beq.n	800604e <_malloc_r+0xea>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	4639      	mov	r1, r7
 8005fba:	4630      	mov	r0, r6
 8005fbc:	eb04 0903 	add.w	r9, r4, r3
 8005fc0:	f000 fdf6 	bl	8006bb0 <_sbrk_r>
 8005fc4:	4581      	cmp	r9, r0
 8005fc6:	d142      	bne.n	800604e <_malloc_r+0xea>
 8005fc8:	6821      	ldr	r1, [r4, #0]
 8005fca:	4630      	mov	r0, r6
 8005fcc:	1a6d      	subs	r5, r5, r1
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7ff ffa6 	bl	8005f20 <sbrk_aligned>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d03a      	beq.n	800604e <_malloc_r+0xea>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	442b      	add	r3, r5
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	f8d8 3000 	ldr.w	r3, [r8]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	bb62      	cbnz	r2, 8006040 <_malloc_r+0xdc>
 8005fe6:	f8c8 7000 	str.w	r7, [r8]
 8005fea:	e00f      	b.n	800600c <_malloc_r+0xa8>
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	1b52      	subs	r2, r2, r5
 8005ff0:	d420      	bmi.n	8006034 <_malloc_r+0xd0>
 8005ff2:	2a0b      	cmp	r2, #11
 8005ff4:	d917      	bls.n	8006026 <_malloc_r+0xc2>
 8005ff6:	1961      	adds	r1, r4, r5
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	6025      	str	r5, [r4, #0]
 8005ffc:	bf18      	it	ne
 8005ffe:	6059      	strne	r1, [r3, #4]
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	bf08      	it	eq
 8006004:	f8c8 1000 	streq.w	r1, [r8]
 8006008:	5162      	str	r2, [r4, r5]
 800600a:	604b      	str	r3, [r1, #4]
 800600c:	4630      	mov	r0, r6
 800600e:	f000 f82f 	bl	8006070 <__malloc_unlock>
 8006012:	f104 000b 	add.w	r0, r4, #11
 8006016:	1d23      	adds	r3, r4, #4
 8006018:	f020 0007 	bic.w	r0, r0, #7
 800601c:	1ac2      	subs	r2, r0, r3
 800601e:	bf1c      	itt	ne
 8006020:	1a1b      	subne	r3, r3, r0
 8006022:	50a3      	strne	r3, [r4, r2]
 8006024:	e7af      	b.n	8005f86 <_malloc_r+0x22>
 8006026:	6862      	ldr	r2, [r4, #4]
 8006028:	42a3      	cmp	r3, r4
 800602a:	bf0c      	ite	eq
 800602c:	f8c8 2000 	streq.w	r2, [r8]
 8006030:	605a      	strne	r2, [r3, #4]
 8006032:	e7eb      	b.n	800600c <_malloc_r+0xa8>
 8006034:	4623      	mov	r3, r4
 8006036:	6864      	ldr	r4, [r4, #4]
 8006038:	e7ae      	b.n	8005f98 <_malloc_r+0x34>
 800603a:	463c      	mov	r4, r7
 800603c:	687f      	ldr	r7, [r7, #4]
 800603e:	e7b6      	b.n	8005fae <_malloc_r+0x4a>
 8006040:	461a      	mov	r2, r3
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	42a3      	cmp	r3, r4
 8006046:	d1fb      	bne.n	8006040 <_malloc_r+0xdc>
 8006048:	2300      	movs	r3, #0
 800604a:	6053      	str	r3, [r2, #4]
 800604c:	e7de      	b.n	800600c <_malloc_r+0xa8>
 800604e:	230c      	movs	r3, #12
 8006050:	4630      	mov	r0, r6
 8006052:	6033      	str	r3, [r6, #0]
 8006054:	f000 f80c 	bl	8006070 <__malloc_unlock>
 8006058:	e794      	b.n	8005f84 <_malloc_r+0x20>
 800605a:	6005      	str	r5, [r0, #0]
 800605c:	e7d6      	b.n	800600c <_malloc_r+0xa8>
 800605e:	bf00      	nop
 8006060:	20000864 	.word	0x20000864

08006064 <__malloc_lock>:
 8006064:	4801      	ldr	r0, [pc, #4]	@ (800606c <__malloc_lock+0x8>)
 8006066:	f7ff b89c 	b.w	80051a2 <__retarget_lock_acquire_recursive>
 800606a:	bf00      	nop
 800606c:	2000085c 	.word	0x2000085c

08006070 <__malloc_unlock>:
 8006070:	4801      	ldr	r0, [pc, #4]	@ (8006078 <__malloc_unlock+0x8>)
 8006072:	f7ff b897 	b.w	80051a4 <__retarget_lock_release_recursive>
 8006076:	bf00      	nop
 8006078:	2000085c 	.word	0x2000085c

0800607c <_Balloc>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	69c6      	ldr	r6, [r0, #28]
 8006080:	4604      	mov	r4, r0
 8006082:	460d      	mov	r5, r1
 8006084:	b976      	cbnz	r6, 80060a4 <_Balloc+0x28>
 8006086:	2010      	movs	r0, #16
 8006088:	f7ff ff42 	bl	8005f10 <malloc>
 800608c:	4602      	mov	r2, r0
 800608e:	61e0      	str	r0, [r4, #28]
 8006090:	b920      	cbnz	r0, 800609c <_Balloc+0x20>
 8006092:	216b      	movs	r1, #107	@ 0x6b
 8006094:	4b17      	ldr	r3, [pc, #92]	@ (80060f4 <_Balloc+0x78>)
 8006096:	4818      	ldr	r0, [pc, #96]	@ (80060f8 <_Balloc+0x7c>)
 8006098:	f000 fd9a 	bl	8006bd0 <__assert_func>
 800609c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060a0:	6006      	str	r6, [r0, #0]
 80060a2:	60c6      	str	r6, [r0, #12]
 80060a4:	69e6      	ldr	r6, [r4, #28]
 80060a6:	68f3      	ldr	r3, [r6, #12]
 80060a8:	b183      	cbz	r3, 80060cc <_Balloc+0x50>
 80060aa:	69e3      	ldr	r3, [r4, #28]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060b2:	b9b8      	cbnz	r0, 80060e4 <_Balloc+0x68>
 80060b4:	2101      	movs	r1, #1
 80060b6:	fa01 f605 	lsl.w	r6, r1, r5
 80060ba:	1d72      	adds	r2, r6, #5
 80060bc:	4620      	mov	r0, r4
 80060be:	0092      	lsls	r2, r2, #2
 80060c0:	f000 fda4 	bl	8006c0c <_calloc_r>
 80060c4:	b160      	cbz	r0, 80060e0 <_Balloc+0x64>
 80060c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060ca:	e00e      	b.n	80060ea <_Balloc+0x6e>
 80060cc:	2221      	movs	r2, #33	@ 0x21
 80060ce:	2104      	movs	r1, #4
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 fd9b 	bl	8006c0c <_calloc_r>
 80060d6:	69e3      	ldr	r3, [r4, #28]
 80060d8:	60f0      	str	r0, [r6, #12]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e4      	bne.n	80060aa <_Balloc+0x2e>
 80060e0:	2000      	movs	r0, #0
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	6802      	ldr	r2, [r0, #0]
 80060e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060ea:	2300      	movs	r3, #0
 80060ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060f0:	e7f7      	b.n	80060e2 <_Balloc+0x66>
 80060f2:	bf00      	nop
 80060f4:	0800844b 	.word	0x0800844b
 80060f8:	080084cb 	.word	0x080084cb

080060fc <_Bfree>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	69c6      	ldr	r6, [r0, #28]
 8006100:	4605      	mov	r5, r0
 8006102:	460c      	mov	r4, r1
 8006104:	b976      	cbnz	r6, 8006124 <_Bfree+0x28>
 8006106:	2010      	movs	r0, #16
 8006108:	f7ff ff02 	bl	8005f10 <malloc>
 800610c:	4602      	mov	r2, r0
 800610e:	61e8      	str	r0, [r5, #28]
 8006110:	b920      	cbnz	r0, 800611c <_Bfree+0x20>
 8006112:	218f      	movs	r1, #143	@ 0x8f
 8006114:	4b08      	ldr	r3, [pc, #32]	@ (8006138 <_Bfree+0x3c>)
 8006116:	4809      	ldr	r0, [pc, #36]	@ (800613c <_Bfree+0x40>)
 8006118:	f000 fd5a 	bl	8006bd0 <__assert_func>
 800611c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006120:	6006      	str	r6, [r0, #0]
 8006122:	60c6      	str	r6, [r0, #12]
 8006124:	b13c      	cbz	r4, 8006136 <_Bfree+0x3a>
 8006126:	69eb      	ldr	r3, [r5, #28]
 8006128:	6862      	ldr	r2, [r4, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006130:	6021      	str	r1, [r4, #0]
 8006132:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	0800844b 	.word	0x0800844b
 800613c:	080084cb 	.word	0x080084cb

08006140 <__multadd>:
 8006140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006144:	4607      	mov	r7, r0
 8006146:	460c      	mov	r4, r1
 8006148:	461e      	mov	r6, r3
 800614a:	2000      	movs	r0, #0
 800614c:	690d      	ldr	r5, [r1, #16]
 800614e:	f101 0c14 	add.w	ip, r1, #20
 8006152:	f8dc 3000 	ldr.w	r3, [ip]
 8006156:	3001      	adds	r0, #1
 8006158:	b299      	uxth	r1, r3
 800615a:	fb02 6101 	mla	r1, r2, r1, r6
 800615e:	0c1e      	lsrs	r6, r3, #16
 8006160:	0c0b      	lsrs	r3, r1, #16
 8006162:	fb02 3306 	mla	r3, r2, r6, r3
 8006166:	b289      	uxth	r1, r1
 8006168:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800616c:	4285      	cmp	r5, r0
 800616e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006172:	f84c 1b04 	str.w	r1, [ip], #4
 8006176:	dcec      	bgt.n	8006152 <__multadd+0x12>
 8006178:	b30e      	cbz	r6, 80061be <__multadd+0x7e>
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	42ab      	cmp	r3, r5
 800617e:	dc19      	bgt.n	80061b4 <__multadd+0x74>
 8006180:	6861      	ldr	r1, [r4, #4]
 8006182:	4638      	mov	r0, r7
 8006184:	3101      	adds	r1, #1
 8006186:	f7ff ff79 	bl	800607c <_Balloc>
 800618a:	4680      	mov	r8, r0
 800618c:	b928      	cbnz	r0, 800619a <__multadd+0x5a>
 800618e:	4602      	mov	r2, r0
 8006190:	21ba      	movs	r1, #186	@ 0xba
 8006192:	4b0c      	ldr	r3, [pc, #48]	@ (80061c4 <__multadd+0x84>)
 8006194:	480c      	ldr	r0, [pc, #48]	@ (80061c8 <__multadd+0x88>)
 8006196:	f000 fd1b 	bl	8006bd0 <__assert_func>
 800619a:	6922      	ldr	r2, [r4, #16]
 800619c:	f104 010c 	add.w	r1, r4, #12
 80061a0:	3202      	adds	r2, #2
 80061a2:	0092      	lsls	r2, r2, #2
 80061a4:	300c      	adds	r0, #12
 80061a6:	f7ff f80c 	bl	80051c2 <memcpy>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4638      	mov	r0, r7
 80061ae:	f7ff ffa5 	bl	80060fc <_Bfree>
 80061b2:	4644      	mov	r4, r8
 80061b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061b8:	3501      	adds	r5, #1
 80061ba:	615e      	str	r6, [r3, #20]
 80061bc:	6125      	str	r5, [r4, #16]
 80061be:	4620      	mov	r0, r4
 80061c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c4:	080084ba 	.word	0x080084ba
 80061c8:	080084cb 	.word	0x080084cb

080061cc <__hi0bits>:
 80061cc:	4603      	mov	r3, r0
 80061ce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80061d2:	bf3a      	itte	cc
 80061d4:	0403      	lslcc	r3, r0, #16
 80061d6:	2010      	movcc	r0, #16
 80061d8:	2000      	movcs	r0, #0
 80061da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061de:	bf3c      	itt	cc
 80061e0:	021b      	lslcc	r3, r3, #8
 80061e2:	3008      	addcc	r0, #8
 80061e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061e8:	bf3c      	itt	cc
 80061ea:	011b      	lslcc	r3, r3, #4
 80061ec:	3004      	addcc	r0, #4
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f2:	bf3c      	itt	cc
 80061f4:	009b      	lslcc	r3, r3, #2
 80061f6:	3002      	addcc	r0, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	db05      	blt.n	8006208 <__hi0bits+0x3c>
 80061fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006200:	f100 0001 	add.w	r0, r0, #1
 8006204:	bf08      	it	eq
 8006206:	2020      	moveq	r0, #32
 8006208:	4770      	bx	lr

0800620a <__lo0bits>:
 800620a:	6803      	ldr	r3, [r0, #0]
 800620c:	4602      	mov	r2, r0
 800620e:	f013 0007 	ands.w	r0, r3, #7
 8006212:	d00b      	beq.n	800622c <__lo0bits+0x22>
 8006214:	07d9      	lsls	r1, r3, #31
 8006216:	d421      	bmi.n	800625c <__lo0bits+0x52>
 8006218:	0798      	lsls	r0, r3, #30
 800621a:	bf49      	itett	mi
 800621c:	085b      	lsrmi	r3, r3, #1
 800621e:	089b      	lsrpl	r3, r3, #2
 8006220:	2001      	movmi	r0, #1
 8006222:	6013      	strmi	r3, [r2, #0]
 8006224:	bf5c      	itt	pl
 8006226:	2002      	movpl	r0, #2
 8006228:	6013      	strpl	r3, [r2, #0]
 800622a:	4770      	bx	lr
 800622c:	b299      	uxth	r1, r3
 800622e:	b909      	cbnz	r1, 8006234 <__lo0bits+0x2a>
 8006230:	2010      	movs	r0, #16
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	b2d9      	uxtb	r1, r3
 8006236:	b909      	cbnz	r1, 800623c <__lo0bits+0x32>
 8006238:	3008      	adds	r0, #8
 800623a:	0a1b      	lsrs	r3, r3, #8
 800623c:	0719      	lsls	r1, r3, #28
 800623e:	bf04      	itt	eq
 8006240:	091b      	lsreq	r3, r3, #4
 8006242:	3004      	addeq	r0, #4
 8006244:	0799      	lsls	r1, r3, #30
 8006246:	bf04      	itt	eq
 8006248:	089b      	lsreq	r3, r3, #2
 800624a:	3002      	addeq	r0, #2
 800624c:	07d9      	lsls	r1, r3, #31
 800624e:	d403      	bmi.n	8006258 <__lo0bits+0x4e>
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	f100 0001 	add.w	r0, r0, #1
 8006256:	d003      	beq.n	8006260 <__lo0bits+0x56>
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	4770      	bx	lr
 800625c:	2000      	movs	r0, #0
 800625e:	4770      	bx	lr
 8006260:	2020      	movs	r0, #32
 8006262:	4770      	bx	lr

08006264 <__i2b>:
 8006264:	b510      	push	{r4, lr}
 8006266:	460c      	mov	r4, r1
 8006268:	2101      	movs	r1, #1
 800626a:	f7ff ff07 	bl	800607c <_Balloc>
 800626e:	4602      	mov	r2, r0
 8006270:	b928      	cbnz	r0, 800627e <__i2b+0x1a>
 8006272:	f240 1145 	movw	r1, #325	@ 0x145
 8006276:	4b04      	ldr	r3, [pc, #16]	@ (8006288 <__i2b+0x24>)
 8006278:	4804      	ldr	r0, [pc, #16]	@ (800628c <__i2b+0x28>)
 800627a:	f000 fca9 	bl	8006bd0 <__assert_func>
 800627e:	2301      	movs	r3, #1
 8006280:	6144      	str	r4, [r0, #20]
 8006282:	6103      	str	r3, [r0, #16]
 8006284:	bd10      	pop	{r4, pc}
 8006286:	bf00      	nop
 8006288:	080084ba 	.word	0x080084ba
 800628c:	080084cb 	.word	0x080084cb

08006290 <__multiply>:
 8006290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006294:	4614      	mov	r4, r2
 8006296:	690a      	ldr	r2, [r1, #16]
 8006298:	6923      	ldr	r3, [r4, #16]
 800629a:	460f      	mov	r7, r1
 800629c:	429a      	cmp	r2, r3
 800629e:	bfa2      	ittt	ge
 80062a0:	4623      	movge	r3, r4
 80062a2:	460c      	movge	r4, r1
 80062a4:	461f      	movge	r7, r3
 80062a6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80062aa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80062ae:	68a3      	ldr	r3, [r4, #8]
 80062b0:	6861      	ldr	r1, [r4, #4]
 80062b2:	eb0a 0609 	add.w	r6, sl, r9
 80062b6:	42b3      	cmp	r3, r6
 80062b8:	b085      	sub	sp, #20
 80062ba:	bfb8      	it	lt
 80062bc:	3101      	addlt	r1, #1
 80062be:	f7ff fedd 	bl	800607c <_Balloc>
 80062c2:	b930      	cbnz	r0, 80062d2 <__multiply+0x42>
 80062c4:	4602      	mov	r2, r0
 80062c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80062ca:	4b43      	ldr	r3, [pc, #268]	@ (80063d8 <__multiply+0x148>)
 80062cc:	4843      	ldr	r0, [pc, #268]	@ (80063dc <__multiply+0x14c>)
 80062ce:	f000 fc7f 	bl	8006bd0 <__assert_func>
 80062d2:	f100 0514 	add.w	r5, r0, #20
 80062d6:	462b      	mov	r3, r5
 80062d8:	2200      	movs	r2, #0
 80062da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062de:	4543      	cmp	r3, r8
 80062e0:	d321      	bcc.n	8006326 <__multiply+0x96>
 80062e2:	f107 0114 	add.w	r1, r7, #20
 80062e6:	f104 0214 	add.w	r2, r4, #20
 80062ea:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80062ee:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80062f2:	9302      	str	r3, [sp, #8]
 80062f4:	1b13      	subs	r3, r2, r4
 80062f6:	3b15      	subs	r3, #21
 80062f8:	f023 0303 	bic.w	r3, r3, #3
 80062fc:	3304      	adds	r3, #4
 80062fe:	f104 0715 	add.w	r7, r4, #21
 8006302:	42ba      	cmp	r2, r7
 8006304:	bf38      	it	cc
 8006306:	2304      	movcc	r3, #4
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	9b02      	ldr	r3, [sp, #8]
 800630c:	9103      	str	r1, [sp, #12]
 800630e:	428b      	cmp	r3, r1
 8006310:	d80c      	bhi.n	800632c <__multiply+0x9c>
 8006312:	2e00      	cmp	r6, #0
 8006314:	dd03      	ble.n	800631e <__multiply+0x8e>
 8006316:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800631a:	2b00      	cmp	r3, #0
 800631c:	d05a      	beq.n	80063d4 <__multiply+0x144>
 800631e:	6106      	str	r6, [r0, #16]
 8006320:	b005      	add	sp, #20
 8006322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006326:	f843 2b04 	str.w	r2, [r3], #4
 800632a:	e7d8      	b.n	80062de <__multiply+0x4e>
 800632c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006330:	f1ba 0f00 	cmp.w	sl, #0
 8006334:	d023      	beq.n	800637e <__multiply+0xee>
 8006336:	46a9      	mov	r9, r5
 8006338:	f04f 0c00 	mov.w	ip, #0
 800633c:	f104 0e14 	add.w	lr, r4, #20
 8006340:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006344:	f8d9 3000 	ldr.w	r3, [r9]
 8006348:	fa1f fb87 	uxth.w	fp, r7
 800634c:	b29b      	uxth	r3, r3
 800634e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006352:	4463      	add	r3, ip
 8006354:	f8d9 c000 	ldr.w	ip, [r9]
 8006358:	0c3f      	lsrs	r7, r7, #16
 800635a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800635e:	fb0a c707 	mla	r7, sl, r7, ip
 8006362:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006366:	b29b      	uxth	r3, r3
 8006368:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800636c:	4572      	cmp	r2, lr
 800636e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006372:	f849 3b04 	str.w	r3, [r9], #4
 8006376:	d8e3      	bhi.n	8006340 <__multiply+0xb0>
 8006378:	9b01      	ldr	r3, [sp, #4]
 800637a:	f845 c003 	str.w	ip, [r5, r3]
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	3104      	adds	r1, #4
 8006382:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006386:	f1b9 0f00 	cmp.w	r9, #0
 800638a:	d021      	beq.n	80063d0 <__multiply+0x140>
 800638c:	46ae      	mov	lr, r5
 800638e:	f04f 0a00 	mov.w	sl, #0
 8006392:	682b      	ldr	r3, [r5, #0]
 8006394:	f104 0c14 	add.w	ip, r4, #20
 8006398:	f8bc b000 	ldrh.w	fp, [ip]
 800639c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	fb09 770b 	mla	r7, r9, fp, r7
 80063a6:	4457      	add	r7, sl
 80063a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80063ac:	f84e 3b04 	str.w	r3, [lr], #4
 80063b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063b8:	f8be 3000 	ldrh.w	r3, [lr]
 80063bc:	4562      	cmp	r2, ip
 80063be:	fb09 330a 	mla	r3, r9, sl, r3
 80063c2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80063c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063ca:	d8e5      	bhi.n	8006398 <__multiply+0x108>
 80063cc:	9f01      	ldr	r7, [sp, #4]
 80063ce:	51eb      	str	r3, [r5, r7]
 80063d0:	3504      	adds	r5, #4
 80063d2:	e79a      	b.n	800630a <__multiply+0x7a>
 80063d4:	3e01      	subs	r6, #1
 80063d6:	e79c      	b.n	8006312 <__multiply+0x82>
 80063d8:	080084ba 	.word	0x080084ba
 80063dc:	080084cb 	.word	0x080084cb

080063e0 <__pow5mult>:
 80063e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e4:	4615      	mov	r5, r2
 80063e6:	f012 0203 	ands.w	r2, r2, #3
 80063ea:	4607      	mov	r7, r0
 80063ec:	460e      	mov	r6, r1
 80063ee:	d007      	beq.n	8006400 <__pow5mult+0x20>
 80063f0:	4c25      	ldr	r4, [pc, #148]	@ (8006488 <__pow5mult+0xa8>)
 80063f2:	3a01      	subs	r2, #1
 80063f4:	2300      	movs	r3, #0
 80063f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063fa:	f7ff fea1 	bl	8006140 <__multadd>
 80063fe:	4606      	mov	r6, r0
 8006400:	10ad      	asrs	r5, r5, #2
 8006402:	d03d      	beq.n	8006480 <__pow5mult+0xa0>
 8006404:	69fc      	ldr	r4, [r7, #28]
 8006406:	b97c      	cbnz	r4, 8006428 <__pow5mult+0x48>
 8006408:	2010      	movs	r0, #16
 800640a:	f7ff fd81 	bl	8005f10 <malloc>
 800640e:	4602      	mov	r2, r0
 8006410:	61f8      	str	r0, [r7, #28]
 8006412:	b928      	cbnz	r0, 8006420 <__pow5mult+0x40>
 8006414:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006418:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <__pow5mult+0xac>)
 800641a:	481d      	ldr	r0, [pc, #116]	@ (8006490 <__pow5mult+0xb0>)
 800641c:	f000 fbd8 	bl	8006bd0 <__assert_func>
 8006420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006424:	6004      	str	r4, [r0, #0]
 8006426:	60c4      	str	r4, [r0, #12]
 8006428:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800642c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006430:	b94c      	cbnz	r4, 8006446 <__pow5mult+0x66>
 8006432:	f240 2171 	movw	r1, #625	@ 0x271
 8006436:	4638      	mov	r0, r7
 8006438:	f7ff ff14 	bl	8006264 <__i2b>
 800643c:	2300      	movs	r3, #0
 800643e:	4604      	mov	r4, r0
 8006440:	f8c8 0008 	str.w	r0, [r8, #8]
 8006444:	6003      	str	r3, [r0, #0]
 8006446:	f04f 0900 	mov.w	r9, #0
 800644a:	07eb      	lsls	r3, r5, #31
 800644c:	d50a      	bpl.n	8006464 <__pow5mult+0x84>
 800644e:	4631      	mov	r1, r6
 8006450:	4622      	mov	r2, r4
 8006452:	4638      	mov	r0, r7
 8006454:	f7ff ff1c 	bl	8006290 <__multiply>
 8006458:	4680      	mov	r8, r0
 800645a:	4631      	mov	r1, r6
 800645c:	4638      	mov	r0, r7
 800645e:	f7ff fe4d 	bl	80060fc <_Bfree>
 8006462:	4646      	mov	r6, r8
 8006464:	106d      	asrs	r5, r5, #1
 8006466:	d00b      	beq.n	8006480 <__pow5mult+0xa0>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	b938      	cbnz	r0, 800647c <__pow5mult+0x9c>
 800646c:	4622      	mov	r2, r4
 800646e:	4621      	mov	r1, r4
 8006470:	4638      	mov	r0, r7
 8006472:	f7ff ff0d 	bl	8006290 <__multiply>
 8006476:	6020      	str	r0, [r4, #0]
 8006478:	f8c0 9000 	str.w	r9, [r0]
 800647c:	4604      	mov	r4, r0
 800647e:	e7e4      	b.n	800644a <__pow5mult+0x6a>
 8006480:	4630      	mov	r0, r6
 8006482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006486:	bf00      	nop
 8006488:	08008524 	.word	0x08008524
 800648c:	0800844b 	.word	0x0800844b
 8006490:	080084cb 	.word	0x080084cb

08006494 <__lshift>:
 8006494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	460c      	mov	r4, r1
 800649a:	4607      	mov	r7, r0
 800649c:	4691      	mov	r9, r2
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	6849      	ldr	r1, [r1, #4]
 80064a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064a6:	68a3      	ldr	r3, [r4, #8]
 80064a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064ac:	f108 0601 	add.w	r6, r8, #1
 80064b0:	42b3      	cmp	r3, r6
 80064b2:	db0b      	blt.n	80064cc <__lshift+0x38>
 80064b4:	4638      	mov	r0, r7
 80064b6:	f7ff fde1 	bl	800607c <_Balloc>
 80064ba:	4605      	mov	r5, r0
 80064bc:	b948      	cbnz	r0, 80064d2 <__lshift+0x3e>
 80064be:	4602      	mov	r2, r0
 80064c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80064c4:	4b27      	ldr	r3, [pc, #156]	@ (8006564 <__lshift+0xd0>)
 80064c6:	4828      	ldr	r0, [pc, #160]	@ (8006568 <__lshift+0xd4>)
 80064c8:	f000 fb82 	bl	8006bd0 <__assert_func>
 80064cc:	3101      	adds	r1, #1
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	e7ee      	b.n	80064b0 <__lshift+0x1c>
 80064d2:	2300      	movs	r3, #0
 80064d4:	f100 0114 	add.w	r1, r0, #20
 80064d8:	f100 0210 	add.w	r2, r0, #16
 80064dc:	4618      	mov	r0, r3
 80064de:	4553      	cmp	r3, sl
 80064e0:	db33      	blt.n	800654a <__lshift+0xb6>
 80064e2:	6920      	ldr	r0, [r4, #16]
 80064e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064e8:	f104 0314 	add.w	r3, r4, #20
 80064ec:	f019 091f 	ands.w	r9, r9, #31
 80064f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064f8:	d02b      	beq.n	8006552 <__lshift+0xbe>
 80064fa:	468a      	mov	sl, r1
 80064fc:	2200      	movs	r2, #0
 80064fe:	f1c9 0e20 	rsb	lr, r9, #32
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	fa00 f009 	lsl.w	r0, r0, r9
 8006508:	4310      	orrs	r0, r2
 800650a:	f84a 0b04 	str.w	r0, [sl], #4
 800650e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006512:	459c      	cmp	ip, r3
 8006514:	fa22 f20e 	lsr.w	r2, r2, lr
 8006518:	d8f3      	bhi.n	8006502 <__lshift+0x6e>
 800651a:	ebac 0304 	sub.w	r3, ip, r4
 800651e:	3b15      	subs	r3, #21
 8006520:	f023 0303 	bic.w	r3, r3, #3
 8006524:	3304      	adds	r3, #4
 8006526:	f104 0015 	add.w	r0, r4, #21
 800652a:	4584      	cmp	ip, r0
 800652c:	bf38      	it	cc
 800652e:	2304      	movcc	r3, #4
 8006530:	50ca      	str	r2, [r1, r3]
 8006532:	b10a      	cbz	r2, 8006538 <__lshift+0xa4>
 8006534:	f108 0602 	add.w	r6, r8, #2
 8006538:	3e01      	subs	r6, #1
 800653a:	4638      	mov	r0, r7
 800653c:	4621      	mov	r1, r4
 800653e:	612e      	str	r6, [r5, #16]
 8006540:	f7ff fddc 	bl	80060fc <_Bfree>
 8006544:	4628      	mov	r0, r5
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654a:	f842 0f04 	str.w	r0, [r2, #4]!
 800654e:	3301      	adds	r3, #1
 8006550:	e7c5      	b.n	80064de <__lshift+0x4a>
 8006552:	3904      	subs	r1, #4
 8006554:	f853 2b04 	ldr.w	r2, [r3], #4
 8006558:	459c      	cmp	ip, r3
 800655a:	f841 2f04 	str.w	r2, [r1, #4]!
 800655e:	d8f9      	bhi.n	8006554 <__lshift+0xc0>
 8006560:	e7ea      	b.n	8006538 <__lshift+0xa4>
 8006562:	bf00      	nop
 8006564:	080084ba 	.word	0x080084ba
 8006568:	080084cb 	.word	0x080084cb

0800656c <__mcmp>:
 800656c:	4603      	mov	r3, r0
 800656e:	690a      	ldr	r2, [r1, #16]
 8006570:	6900      	ldr	r0, [r0, #16]
 8006572:	b530      	push	{r4, r5, lr}
 8006574:	1a80      	subs	r0, r0, r2
 8006576:	d10e      	bne.n	8006596 <__mcmp+0x2a>
 8006578:	3314      	adds	r3, #20
 800657a:	3114      	adds	r1, #20
 800657c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006580:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006584:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006588:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800658c:	4295      	cmp	r5, r2
 800658e:	d003      	beq.n	8006598 <__mcmp+0x2c>
 8006590:	d205      	bcs.n	800659e <__mcmp+0x32>
 8006592:	f04f 30ff 	mov.w	r0, #4294967295
 8006596:	bd30      	pop	{r4, r5, pc}
 8006598:	42a3      	cmp	r3, r4
 800659a:	d3f3      	bcc.n	8006584 <__mcmp+0x18>
 800659c:	e7fb      	b.n	8006596 <__mcmp+0x2a>
 800659e:	2001      	movs	r0, #1
 80065a0:	e7f9      	b.n	8006596 <__mcmp+0x2a>
	...

080065a4 <__mdiff>:
 80065a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	4689      	mov	r9, r1
 80065aa:	4606      	mov	r6, r0
 80065ac:	4611      	mov	r1, r2
 80065ae:	4648      	mov	r0, r9
 80065b0:	4614      	mov	r4, r2
 80065b2:	f7ff ffdb 	bl	800656c <__mcmp>
 80065b6:	1e05      	subs	r5, r0, #0
 80065b8:	d112      	bne.n	80065e0 <__mdiff+0x3c>
 80065ba:	4629      	mov	r1, r5
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff fd5d 	bl	800607c <_Balloc>
 80065c2:	4602      	mov	r2, r0
 80065c4:	b928      	cbnz	r0, 80065d2 <__mdiff+0x2e>
 80065c6:	f240 2137 	movw	r1, #567	@ 0x237
 80065ca:	4b3e      	ldr	r3, [pc, #248]	@ (80066c4 <__mdiff+0x120>)
 80065cc:	483e      	ldr	r0, [pc, #248]	@ (80066c8 <__mdiff+0x124>)
 80065ce:	f000 faff 	bl	8006bd0 <__assert_func>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065d8:	4610      	mov	r0, r2
 80065da:	b003      	add	sp, #12
 80065dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e0:	bfbc      	itt	lt
 80065e2:	464b      	movlt	r3, r9
 80065e4:	46a1      	movlt	r9, r4
 80065e6:	4630      	mov	r0, r6
 80065e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80065ec:	bfba      	itte	lt
 80065ee:	461c      	movlt	r4, r3
 80065f0:	2501      	movlt	r5, #1
 80065f2:	2500      	movge	r5, #0
 80065f4:	f7ff fd42 	bl	800607c <_Balloc>
 80065f8:	4602      	mov	r2, r0
 80065fa:	b918      	cbnz	r0, 8006604 <__mdiff+0x60>
 80065fc:	f240 2145 	movw	r1, #581	@ 0x245
 8006600:	4b30      	ldr	r3, [pc, #192]	@ (80066c4 <__mdiff+0x120>)
 8006602:	e7e3      	b.n	80065cc <__mdiff+0x28>
 8006604:	f100 0b14 	add.w	fp, r0, #20
 8006608:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800660c:	f109 0310 	add.w	r3, r9, #16
 8006610:	60c5      	str	r5, [r0, #12]
 8006612:	f04f 0c00 	mov.w	ip, #0
 8006616:	f109 0514 	add.w	r5, r9, #20
 800661a:	46d9      	mov	r9, fp
 800661c:	6926      	ldr	r6, [r4, #16]
 800661e:	f104 0e14 	add.w	lr, r4, #20
 8006622:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006626:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	9b01      	ldr	r3, [sp, #4]
 800662e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006632:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006636:	b281      	uxth	r1, r0
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	fa1f f38a 	uxth.w	r3, sl
 800663e:	1a5b      	subs	r3, r3, r1
 8006640:	0c00      	lsrs	r0, r0, #16
 8006642:	4463      	add	r3, ip
 8006644:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006648:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800664c:	b29b      	uxth	r3, r3
 800664e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006652:	4576      	cmp	r6, lr
 8006654:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006658:	f849 3b04 	str.w	r3, [r9], #4
 800665c:	d8e6      	bhi.n	800662c <__mdiff+0x88>
 800665e:	1b33      	subs	r3, r6, r4
 8006660:	3b15      	subs	r3, #21
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	3415      	adds	r4, #21
 8006668:	3304      	adds	r3, #4
 800666a:	42a6      	cmp	r6, r4
 800666c:	bf38      	it	cc
 800666e:	2304      	movcc	r3, #4
 8006670:	441d      	add	r5, r3
 8006672:	445b      	add	r3, fp
 8006674:	461e      	mov	r6, r3
 8006676:	462c      	mov	r4, r5
 8006678:	4544      	cmp	r4, r8
 800667a:	d30e      	bcc.n	800669a <__mdiff+0xf6>
 800667c:	f108 0103 	add.w	r1, r8, #3
 8006680:	1b49      	subs	r1, r1, r5
 8006682:	f021 0103 	bic.w	r1, r1, #3
 8006686:	3d03      	subs	r5, #3
 8006688:	45a8      	cmp	r8, r5
 800668a:	bf38      	it	cc
 800668c:	2100      	movcc	r1, #0
 800668e:	440b      	add	r3, r1
 8006690:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006694:	b199      	cbz	r1, 80066be <__mdiff+0x11a>
 8006696:	6117      	str	r7, [r2, #16]
 8006698:	e79e      	b.n	80065d8 <__mdiff+0x34>
 800669a:	46e6      	mov	lr, ip
 800669c:	f854 1b04 	ldr.w	r1, [r4], #4
 80066a0:	fa1f fc81 	uxth.w	ip, r1
 80066a4:	44f4      	add	ip, lr
 80066a6:	0c08      	lsrs	r0, r1, #16
 80066a8:	4471      	add	r1, lr
 80066aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80066ae:	b289      	uxth	r1, r1
 80066b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80066b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066b8:	f846 1b04 	str.w	r1, [r6], #4
 80066bc:	e7dc      	b.n	8006678 <__mdiff+0xd4>
 80066be:	3f01      	subs	r7, #1
 80066c0:	e7e6      	b.n	8006690 <__mdiff+0xec>
 80066c2:	bf00      	nop
 80066c4:	080084ba 	.word	0x080084ba
 80066c8:	080084cb 	.word	0x080084cb

080066cc <__d2b>:
 80066cc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80066d0:	2101      	movs	r1, #1
 80066d2:	4690      	mov	r8, r2
 80066d4:	4699      	mov	r9, r3
 80066d6:	9e08      	ldr	r6, [sp, #32]
 80066d8:	f7ff fcd0 	bl	800607c <_Balloc>
 80066dc:	4604      	mov	r4, r0
 80066de:	b930      	cbnz	r0, 80066ee <__d2b+0x22>
 80066e0:	4602      	mov	r2, r0
 80066e2:	f240 310f 	movw	r1, #783	@ 0x30f
 80066e6:	4b23      	ldr	r3, [pc, #140]	@ (8006774 <__d2b+0xa8>)
 80066e8:	4823      	ldr	r0, [pc, #140]	@ (8006778 <__d2b+0xac>)
 80066ea:	f000 fa71 	bl	8006bd0 <__assert_func>
 80066ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066f6:	b10d      	cbz	r5, 80066fc <__d2b+0x30>
 80066f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	f1b8 0300 	subs.w	r3, r8, #0
 8006702:	d024      	beq.n	800674e <__d2b+0x82>
 8006704:	4668      	mov	r0, sp
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	f7ff fd7f 	bl	800620a <__lo0bits>
 800670c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006710:	b1d8      	cbz	r0, 800674a <__d2b+0x7e>
 8006712:	f1c0 0320 	rsb	r3, r0, #32
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	430b      	orrs	r3, r1
 800671c:	40c2      	lsrs	r2, r0
 800671e:	6163      	str	r3, [r4, #20]
 8006720:	9201      	str	r2, [sp, #4]
 8006722:	9b01      	ldr	r3, [sp, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	bf0c      	ite	eq
 8006728:	2201      	moveq	r2, #1
 800672a:	2202      	movne	r2, #2
 800672c:	61a3      	str	r3, [r4, #24]
 800672e:	6122      	str	r2, [r4, #16]
 8006730:	b1ad      	cbz	r5, 800675e <__d2b+0x92>
 8006732:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006736:	4405      	add	r5, r0
 8006738:	6035      	str	r5, [r6, #0]
 800673a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800673e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006740:	6018      	str	r0, [r3, #0]
 8006742:	4620      	mov	r0, r4
 8006744:	b002      	add	sp, #8
 8006746:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800674a:	6161      	str	r1, [r4, #20]
 800674c:	e7e9      	b.n	8006722 <__d2b+0x56>
 800674e:	a801      	add	r0, sp, #4
 8006750:	f7ff fd5b 	bl	800620a <__lo0bits>
 8006754:	9b01      	ldr	r3, [sp, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	6163      	str	r3, [r4, #20]
 800675a:	3020      	adds	r0, #32
 800675c:	e7e7      	b.n	800672e <__d2b+0x62>
 800675e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006762:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006766:	6030      	str	r0, [r6, #0]
 8006768:	6918      	ldr	r0, [r3, #16]
 800676a:	f7ff fd2f 	bl	80061cc <__hi0bits>
 800676e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006772:	e7e4      	b.n	800673e <__d2b+0x72>
 8006774:	080084ba 	.word	0x080084ba
 8006778:	080084cb 	.word	0x080084cb

0800677c <__ssputs_r>:
 800677c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	461f      	mov	r7, r3
 8006782:	688e      	ldr	r6, [r1, #8]
 8006784:	4682      	mov	sl, r0
 8006786:	42be      	cmp	r6, r7
 8006788:	460c      	mov	r4, r1
 800678a:	4690      	mov	r8, r2
 800678c:	680b      	ldr	r3, [r1, #0]
 800678e:	d82d      	bhi.n	80067ec <__ssputs_r+0x70>
 8006790:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006794:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006798:	d026      	beq.n	80067e8 <__ssputs_r+0x6c>
 800679a:	6965      	ldr	r5, [r4, #20]
 800679c:	6909      	ldr	r1, [r1, #16]
 800679e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067a2:	eba3 0901 	sub.w	r9, r3, r1
 80067a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067aa:	1c7b      	adds	r3, r7, #1
 80067ac:	444b      	add	r3, r9
 80067ae:	106d      	asrs	r5, r5, #1
 80067b0:	429d      	cmp	r5, r3
 80067b2:	bf38      	it	cc
 80067b4:	461d      	movcc	r5, r3
 80067b6:	0553      	lsls	r3, r2, #21
 80067b8:	d527      	bpl.n	800680a <__ssputs_r+0x8e>
 80067ba:	4629      	mov	r1, r5
 80067bc:	f7ff fbd2 	bl	8005f64 <_malloc_r>
 80067c0:	4606      	mov	r6, r0
 80067c2:	b360      	cbz	r0, 800681e <__ssputs_r+0xa2>
 80067c4:	464a      	mov	r2, r9
 80067c6:	6921      	ldr	r1, [r4, #16]
 80067c8:	f7fe fcfb 	bl	80051c2 <memcpy>
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	6126      	str	r6, [r4, #16]
 80067da:	444e      	add	r6, r9
 80067dc:	6026      	str	r6, [r4, #0]
 80067de:	463e      	mov	r6, r7
 80067e0:	6165      	str	r5, [r4, #20]
 80067e2:	eba5 0509 	sub.w	r5, r5, r9
 80067e6:	60a5      	str	r5, [r4, #8]
 80067e8:	42be      	cmp	r6, r7
 80067ea:	d900      	bls.n	80067ee <__ssputs_r+0x72>
 80067ec:	463e      	mov	r6, r7
 80067ee:	4632      	mov	r2, r6
 80067f0:	4641      	mov	r1, r8
 80067f2:	6820      	ldr	r0, [r4, #0]
 80067f4:	f000 f9c2 	bl	8006b7c <memmove>
 80067f8:	2000      	movs	r0, #0
 80067fa:	68a3      	ldr	r3, [r4, #8]
 80067fc:	1b9b      	subs	r3, r3, r6
 80067fe:	60a3      	str	r3, [r4, #8]
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	4433      	add	r3, r6
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680a:	462a      	mov	r2, r5
 800680c:	f000 fa24 	bl	8006c58 <_realloc_r>
 8006810:	4606      	mov	r6, r0
 8006812:	2800      	cmp	r0, #0
 8006814:	d1e0      	bne.n	80067d8 <__ssputs_r+0x5c>
 8006816:	4650      	mov	r0, sl
 8006818:	6921      	ldr	r1, [r4, #16]
 800681a:	f7ff fb31 	bl	8005e80 <_free_r>
 800681e:	230c      	movs	r3, #12
 8006820:	f8ca 3000 	str.w	r3, [sl]
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	f04f 30ff 	mov.w	r0, #4294967295
 800682a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	e7e9      	b.n	8006806 <__ssputs_r+0x8a>
	...

08006834 <_svfiprintf_r>:
 8006834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	4698      	mov	r8, r3
 800683a:	898b      	ldrh	r3, [r1, #12]
 800683c:	4607      	mov	r7, r0
 800683e:	061b      	lsls	r3, r3, #24
 8006840:	460d      	mov	r5, r1
 8006842:	4614      	mov	r4, r2
 8006844:	b09d      	sub	sp, #116	@ 0x74
 8006846:	d510      	bpl.n	800686a <_svfiprintf_r+0x36>
 8006848:	690b      	ldr	r3, [r1, #16]
 800684a:	b973      	cbnz	r3, 800686a <_svfiprintf_r+0x36>
 800684c:	2140      	movs	r1, #64	@ 0x40
 800684e:	f7ff fb89 	bl	8005f64 <_malloc_r>
 8006852:	6028      	str	r0, [r5, #0]
 8006854:	6128      	str	r0, [r5, #16]
 8006856:	b930      	cbnz	r0, 8006866 <_svfiprintf_r+0x32>
 8006858:	230c      	movs	r3, #12
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	f04f 30ff 	mov.w	r0, #4294967295
 8006860:	b01d      	add	sp, #116	@ 0x74
 8006862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006866:	2340      	movs	r3, #64	@ 0x40
 8006868:	616b      	str	r3, [r5, #20]
 800686a:	2300      	movs	r3, #0
 800686c:	9309      	str	r3, [sp, #36]	@ 0x24
 800686e:	2320      	movs	r3, #32
 8006870:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006874:	2330      	movs	r3, #48	@ 0x30
 8006876:	f04f 0901 	mov.w	r9, #1
 800687a:	f8cd 800c 	str.w	r8, [sp, #12]
 800687e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006a18 <_svfiprintf_r+0x1e4>
 8006882:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006886:	4623      	mov	r3, r4
 8006888:	469a      	mov	sl, r3
 800688a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800688e:	b10a      	cbz	r2, 8006894 <_svfiprintf_r+0x60>
 8006890:	2a25      	cmp	r2, #37	@ 0x25
 8006892:	d1f9      	bne.n	8006888 <_svfiprintf_r+0x54>
 8006894:	ebba 0b04 	subs.w	fp, sl, r4
 8006898:	d00b      	beq.n	80068b2 <_svfiprintf_r+0x7e>
 800689a:	465b      	mov	r3, fp
 800689c:	4622      	mov	r2, r4
 800689e:	4629      	mov	r1, r5
 80068a0:	4638      	mov	r0, r7
 80068a2:	f7ff ff6b 	bl	800677c <__ssputs_r>
 80068a6:	3001      	adds	r0, #1
 80068a8:	f000 80a7 	beq.w	80069fa <_svfiprintf_r+0x1c6>
 80068ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068ae:	445a      	add	r2, fp
 80068b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80068b2:	f89a 3000 	ldrb.w	r3, [sl]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 809f 	beq.w	80069fa <_svfiprintf_r+0x1c6>
 80068bc:	2300      	movs	r3, #0
 80068be:	f04f 32ff 	mov.w	r2, #4294967295
 80068c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068c6:	f10a 0a01 	add.w	sl, sl, #1
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	9307      	str	r3, [sp, #28]
 80068ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80068d4:	4654      	mov	r4, sl
 80068d6:	2205      	movs	r2, #5
 80068d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068dc:	484e      	ldr	r0, [pc, #312]	@ (8006a18 <_svfiprintf_r+0x1e4>)
 80068de:	f7fe fc62 	bl	80051a6 <memchr>
 80068e2:	9a04      	ldr	r2, [sp, #16]
 80068e4:	b9d8      	cbnz	r0, 800691e <_svfiprintf_r+0xea>
 80068e6:	06d0      	lsls	r0, r2, #27
 80068e8:	bf44      	itt	mi
 80068ea:	2320      	movmi	r3, #32
 80068ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068f0:	0711      	lsls	r1, r2, #28
 80068f2:	bf44      	itt	mi
 80068f4:	232b      	movmi	r3, #43	@ 0x2b
 80068f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068fa:	f89a 3000 	ldrb.w	r3, [sl]
 80068fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006900:	d015      	beq.n	800692e <_svfiprintf_r+0xfa>
 8006902:	4654      	mov	r4, sl
 8006904:	2000      	movs	r0, #0
 8006906:	f04f 0c0a 	mov.w	ip, #10
 800690a:	9a07      	ldr	r2, [sp, #28]
 800690c:	4621      	mov	r1, r4
 800690e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006912:	3b30      	subs	r3, #48	@ 0x30
 8006914:	2b09      	cmp	r3, #9
 8006916:	d94b      	bls.n	80069b0 <_svfiprintf_r+0x17c>
 8006918:	b1b0      	cbz	r0, 8006948 <_svfiprintf_r+0x114>
 800691a:	9207      	str	r2, [sp, #28]
 800691c:	e014      	b.n	8006948 <_svfiprintf_r+0x114>
 800691e:	eba0 0308 	sub.w	r3, r0, r8
 8006922:	fa09 f303 	lsl.w	r3, r9, r3
 8006926:	4313      	orrs	r3, r2
 8006928:	46a2      	mov	sl, r4
 800692a:	9304      	str	r3, [sp, #16]
 800692c:	e7d2      	b.n	80068d4 <_svfiprintf_r+0xa0>
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	1d19      	adds	r1, r3, #4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	9103      	str	r1, [sp, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	bfbb      	ittet	lt
 800693a:	425b      	neglt	r3, r3
 800693c:	f042 0202 	orrlt.w	r2, r2, #2
 8006940:	9307      	strge	r3, [sp, #28]
 8006942:	9307      	strlt	r3, [sp, #28]
 8006944:	bfb8      	it	lt
 8006946:	9204      	strlt	r2, [sp, #16]
 8006948:	7823      	ldrb	r3, [r4, #0]
 800694a:	2b2e      	cmp	r3, #46	@ 0x2e
 800694c:	d10a      	bne.n	8006964 <_svfiprintf_r+0x130>
 800694e:	7863      	ldrb	r3, [r4, #1]
 8006950:	2b2a      	cmp	r3, #42	@ 0x2a
 8006952:	d132      	bne.n	80069ba <_svfiprintf_r+0x186>
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	3402      	adds	r4, #2
 8006958:	1d1a      	adds	r2, r3, #4
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	9203      	str	r2, [sp, #12]
 800695e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006962:	9305      	str	r3, [sp, #20]
 8006964:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006a1c <_svfiprintf_r+0x1e8>
 8006968:	2203      	movs	r2, #3
 800696a:	4650      	mov	r0, sl
 800696c:	7821      	ldrb	r1, [r4, #0]
 800696e:	f7fe fc1a 	bl	80051a6 <memchr>
 8006972:	b138      	cbz	r0, 8006984 <_svfiprintf_r+0x150>
 8006974:	2240      	movs	r2, #64	@ 0x40
 8006976:	9b04      	ldr	r3, [sp, #16]
 8006978:	eba0 000a 	sub.w	r0, r0, sl
 800697c:	4082      	lsls	r2, r0
 800697e:	4313      	orrs	r3, r2
 8006980:	3401      	adds	r4, #1
 8006982:	9304      	str	r3, [sp, #16]
 8006984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006988:	2206      	movs	r2, #6
 800698a:	4825      	ldr	r0, [pc, #148]	@ (8006a20 <_svfiprintf_r+0x1ec>)
 800698c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006990:	f7fe fc09 	bl	80051a6 <memchr>
 8006994:	2800      	cmp	r0, #0
 8006996:	d036      	beq.n	8006a06 <_svfiprintf_r+0x1d2>
 8006998:	4b22      	ldr	r3, [pc, #136]	@ (8006a24 <_svfiprintf_r+0x1f0>)
 800699a:	bb1b      	cbnz	r3, 80069e4 <_svfiprintf_r+0x1b0>
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	3307      	adds	r3, #7
 80069a0:	f023 0307 	bic.w	r3, r3, #7
 80069a4:	3308      	adds	r3, #8
 80069a6:	9303      	str	r3, [sp, #12]
 80069a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069aa:	4433      	add	r3, r6
 80069ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ae:	e76a      	b.n	8006886 <_svfiprintf_r+0x52>
 80069b0:	460c      	mov	r4, r1
 80069b2:	2001      	movs	r0, #1
 80069b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069b8:	e7a8      	b.n	800690c <_svfiprintf_r+0xd8>
 80069ba:	2300      	movs	r3, #0
 80069bc:	f04f 0c0a 	mov.w	ip, #10
 80069c0:	4619      	mov	r1, r3
 80069c2:	3401      	adds	r4, #1
 80069c4:	9305      	str	r3, [sp, #20]
 80069c6:	4620      	mov	r0, r4
 80069c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069cc:	3a30      	subs	r2, #48	@ 0x30
 80069ce:	2a09      	cmp	r2, #9
 80069d0:	d903      	bls.n	80069da <_svfiprintf_r+0x1a6>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0c6      	beq.n	8006964 <_svfiprintf_r+0x130>
 80069d6:	9105      	str	r1, [sp, #20]
 80069d8:	e7c4      	b.n	8006964 <_svfiprintf_r+0x130>
 80069da:	4604      	mov	r4, r0
 80069dc:	2301      	movs	r3, #1
 80069de:	fb0c 2101 	mla	r1, ip, r1, r2
 80069e2:	e7f0      	b.n	80069c6 <_svfiprintf_r+0x192>
 80069e4:	ab03      	add	r3, sp, #12
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	462a      	mov	r2, r5
 80069ea:	4638      	mov	r0, r7
 80069ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006a28 <_svfiprintf_r+0x1f4>)
 80069ee:	a904      	add	r1, sp, #16
 80069f0:	f7fd fe66 	bl	80046c0 <_printf_float>
 80069f4:	1c42      	adds	r2, r0, #1
 80069f6:	4606      	mov	r6, r0
 80069f8:	d1d6      	bne.n	80069a8 <_svfiprintf_r+0x174>
 80069fa:	89ab      	ldrh	r3, [r5, #12]
 80069fc:	065b      	lsls	r3, r3, #25
 80069fe:	f53f af2d 	bmi.w	800685c <_svfiprintf_r+0x28>
 8006a02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a04:	e72c      	b.n	8006860 <_svfiprintf_r+0x2c>
 8006a06:	ab03      	add	r3, sp, #12
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	4b06      	ldr	r3, [pc, #24]	@ (8006a28 <_svfiprintf_r+0x1f4>)
 8006a10:	a904      	add	r1, sp, #16
 8006a12:	f7fe f8f3 	bl	8004bfc <_printf_i>
 8006a16:	e7ed      	b.n	80069f4 <_svfiprintf_r+0x1c0>
 8006a18:	08008620 	.word	0x08008620
 8006a1c:	08008626 	.word	0x08008626
 8006a20:	0800862a 	.word	0x0800862a
 8006a24:	080046c1 	.word	0x080046c1
 8006a28:	0800677d 	.word	0x0800677d

08006a2c <__sflush_r>:
 8006a2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	0716      	lsls	r6, r2, #28
 8006a34:	4605      	mov	r5, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	d454      	bmi.n	8006ae4 <__sflush_r+0xb8>
 8006a3a:	684b      	ldr	r3, [r1, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	dc02      	bgt.n	8006a46 <__sflush_r+0x1a>
 8006a40:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	dd48      	ble.n	8006ad8 <__sflush_r+0xac>
 8006a46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a48:	2e00      	cmp	r6, #0
 8006a4a:	d045      	beq.n	8006ad8 <__sflush_r+0xac>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a52:	682f      	ldr	r7, [r5, #0]
 8006a54:	6a21      	ldr	r1, [r4, #32]
 8006a56:	602b      	str	r3, [r5, #0]
 8006a58:	d030      	beq.n	8006abc <__sflush_r+0x90>
 8006a5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	0759      	lsls	r1, r3, #29
 8006a60:	d505      	bpl.n	8006a6e <__sflush_r+0x42>
 8006a62:	6863      	ldr	r3, [r4, #4]
 8006a64:	1ad2      	subs	r2, r2, r3
 8006a66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a68:	b10b      	cbz	r3, 8006a6e <__sflush_r+0x42>
 8006a6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a6c:	1ad2      	subs	r2, r2, r3
 8006a6e:	2300      	movs	r3, #0
 8006a70:	4628      	mov	r0, r5
 8006a72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a74:	6a21      	ldr	r1, [r4, #32]
 8006a76:	47b0      	blx	r6
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	d106      	bne.n	8006a8c <__sflush_r+0x60>
 8006a7e:	6829      	ldr	r1, [r5, #0]
 8006a80:	291d      	cmp	r1, #29
 8006a82:	d82b      	bhi.n	8006adc <__sflush_r+0xb0>
 8006a84:	4a28      	ldr	r2, [pc, #160]	@ (8006b28 <__sflush_r+0xfc>)
 8006a86:	410a      	asrs	r2, r1
 8006a88:	07d6      	lsls	r6, r2, #31
 8006a8a:	d427      	bmi.n	8006adc <__sflush_r+0xb0>
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	6062      	str	r2, [r4, #4]
 8006a90:	6922      	ldr	r2, [r4, #16]
 8006a92:	04d9      	lsls	r1, r3, #19
 8006a94:	6022      	str	r2, [r4, #0]
 8006a96:	d504      	bpl.n	8006aa2 <__sflush_r+0x76>
 8006a98:	1c42      	adds	r2, r0, #1
 8006a9a:	d101      	bne.n	8006aa0 <__sflush_r+0x74>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b903      	cbnz	r3, 8006aa2 <__sflush_r+0x76>
 8006aa0:	6560      	str	r0, [r4, #84]	@ 0x54
 8006aa2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006aa4:	602f      	str	r7, [r5, #0]
 8006aa6:	b1b9      	cbz	r1, 8006ad8 <__sflush_r+0xac>
 8006aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006aac:	4299      	cmp	r1, r3
 8006aae:	d002      	beq.n	8006ab6 <__sflush_r+0x8a>
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f7ff f9e5 	bl	8005e80 <_free_r>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006aba:	e00d      	b.n	8006ad8 <__sflush_r+0xac>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b0      	blx	r6
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	1c50      	adds	r0, r2, #1
 8006ac6:	d1c9      	bne.n	8006a5c <__sflush_r+0x30>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0c6      	beq.n	8006a5c <__sflush_r+0x30>
 8006ace:	2b1d      	cmp	r3, #29
 8006ad0:	d001      	beq.n	8006ad6 <__sflush_r+0xaa>
 8006ad2:	2b16      	cmp	r3, #22
 8006ad4:	d11d      	bne.n	8006b12 <__sflush_r+0xe6>
 8006ad6:	602f      	str	r7, [r5, #0]
 8006ad8:	2000      	movs	r0, #0
 8006ada:	e021      	b.n	8006b20 <__sflush_r+0xf4>
 8006adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ae0:	b21b      	sxth	r3, r3
 8006ae2:	e01a      	b.n	8006b1a <__sflush_r+0xee>
 8006ae4:	690f      	ldr	r7, [r1, #16]
 8006ae6:	2f00      	cmp	r7, #0
 8006ae8:	d0f6      	beq.n	8006ad8 <__sflush_r+0xac>
 8006aea:	0793      	lsls	r3, r2, #30
 8006aec:	bf18      	it	ne
 8006aee:	2300      	movne	r3, #0
 8006af0:	680e      	ldr	r6, [r1, #0]
 8006af2:	bf08      	it	eq
 8006af4:	694b      	ldreq	r3, [r1, #20]
 8006af6:	1bf6      	subs	r6, r6, r7
 8006af8:	600f      	str	r7, [r1, #0]
 8006afa:	608b      	str	r3, [r1, #8]
 8006afc:	2e00      	cmp	r6, #0
 8006afe:	ddeb      	ble.n	8006ad8 <__sflush_r+0xac>
 8006b00:	4633      	mov	r3, r6
 8006b02:	463a      	mov	r2, r7
 8006b04:	4628      	mov	r0, r5
 8006b06:	6a21      	ldr	r1, [r4, #32]
 8006b08:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006b0c:	47e0      	blx	ip
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	dc07      	bgt.n	8006b22 <__sflush_r+0xf6>
 8006b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b22:	4407      	add	r7, r0
 8006b24:	1a36      	subs	r6, r6, r0
 8006b26:	e7e9      	b.n	8006afc <__sflush_r+0xd0>
 8006b28:	dfbffffe 	.word	0xdfbffffe

08006b2c <_fflush_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	690b      	ldr	r3, [r1, #16]
 8006b30:	4605      	mov	r5, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	b913      	cbnz	r3, 8006b3c <_fflush_r+0x10>
 8006b36:	2500      	movs	r5, #0
 8006b38:	4628      	mov	r0, r5
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	b118      	cbz	r0, 8006b46 <_fflush_r+0x1a>
 8006b3e:	6a03      	ldr	r3, [r0, #32]
 8006b40:	b90b      	cbnz	r3, 8006b46 <_fflush_r+0x1a>
 8006b42:	f7fe fa07 	bl	8004f54 <__sinit>
 8006b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0f3      	beq.n	8006b36 <_fflush_r+0xa>
 8006b4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b50:	07d0      	lsls	r0, r2, #31
 8006b52:	d404      	bmi.n	8006b5e <_fflush_r+0x32>
 8006b54:	0599      	lsls	r1, r3, #22
 8006b56:	d402      	bmi.n	8006b5e <_fflush_r+0x32>
 8006b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b5a:	f7fe fb22 	bl	80051a2 <__retarget_lock_acquire_recursive>
 8006b5e:	4628      	mov	r0, r5
 8006b60:	4621      	mov	r1, r4
 8006b62:	f7ff ff63 	bl	8006a2c <__sflush_r>
 8006b66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b68:	4605      	mov	r5, r0
 8006b6a:	07da      	lsls	r2, r3, #31
 8006b6c:	d4e4      	bmi.n	8006b38 <_fflush_r+0xc>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	059b      	lsls	r3, r3, #22
 8006b72:	d4e1      	bmi.n	8006b38 <_fflush_r+0xc>
 8006b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b76:	f7fe fb15 	bl	80051a4 <__retarget_lock_release_recursive>
 8006b7a:	e7dd      	b.n	8006b38 <_fflush_r+0xc>

08006b7c <memmove>:
 8006b7c:	4288      	cmp	r0, r1
 8006b7e:	b510      	push	{r4, lr}
 8006b80:	eb01 0402 	add.w	r4, r1, r2
 8006b84:	d902      	bls.n	8006b8c <memmove+0x10>
 8006b86:	4284      	cmp	r4, r0
 8006b88:	4623      	mov	r3, r4
 8006b8a:	d807      	bhi.n	8006b9c <memmove+0x20>
 8006b8c:	1e43      	subs	r3, r0, #1
 8006b8e:	42a1      	cmp	r1, r4
 8006b90:	d008      	beq.n	8006ba4 <memmove+0x28>
 8006b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b9a:	e7f8      	b.n	8006b8e <memmove+0x12>
 8006b9c:	4601      	mov	r1, r0
 8006b9e:	4402      	add	r2, r0
 8006ba0:	428a      	cmp	r2, r1
 8006ba2:	d100      	bne.n	8006ba6 <memmove+0x2a>
 8006ba4:	bd10      	pop	{r4, pc}
 8006ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bae:	e7f7      	b.n	8006ba0 <memmove+0x24>

08006bb0 <_sbrk_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4d05      	ldr	r5, [pc, #20]	@ (8006bcc <_sbrk_r+0x1c>)
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	602b      	str	r3, [r5, #0]
 8006bbc:	f7fa fe4e 	bl	800185c <_sbrk>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d102      	bne.n	8006bca <_sbrk_r+0x1a>
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	b103      	cbz	r3, 8006bca <_sbrk_r+0x1a>
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	20000858 	.word	0x20000858

08006bd0 <__assert_func>:
 8006bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bd2:	4614      	mov	r4, r2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4b09      	ldr	r3, [pc, #36]	@ (8006bfc <__assert_func+0x2c>)
 8006bd8:	4605      	mov	r5, r0
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68d8      	ldr	r0, [r3, #12]
 8006bde:	b954      	cbnz	r4, 8006bf6 <__assert_func+0x26>
 8006be0:	4b07      	ldr	r3, [pc, #28]	@ (8006c00 <__assert_func+0x30>)
 8006be2:	461c      	mov	r4, r3
 8006be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006be8:	9100      	str	r1, [sp, #0]
 8006bea:	462b      	mov	r3, r5
 8006bec:	4905      	ldr	r1, [pc, #20]	@ (8006c04 <__assert_func+0x34>)
 8006bee:	f000 f86f 	bl	8006cd0 <fiprintf>
 8006bf2:	f000 f87f 	bl	8006cf4 <abort>
 8006bf6:	4b04      	ldr	r3, [pc, #16]	@ (8006c08 <__assert_func+0x38>)
 8006bf8:	e7f4      	b.n	8006be4 <__assert_func+0x14>
 8006bfa:	bf00      	nop
 8006bfc:	20000018 	.word	0x20000018
 8006c00:	08008676 	.word	0x08008676
 8006c04:	08008648 	.word	0x08008648
 8006c08:	0800863b 	.word	0x0800863b

08006c0c <_calloc_r>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	fba1 5402 	umull	r5, r4, r1, r2
 8006c12:	b93c      	cbnz	r4, 8006c24 <_calloc_r+0x18>
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7ff f9a5 	bl	8005f64 <_malloc_r>
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	b928      	cbnz	r0, 8006c2a <_calloc_r+0x1e>
 8006c1e:	2600      	movs	r6, #0
 8006c20:	4630      	mov	r0, r6
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	220c      	movs	r2, #12
 8006c26:	6002      	str	r2, [r0, #0]
 8006c28:	e7f9      	b.n	8006c1e <_calloc_r+0x12>
 8006c2a:	462a      	mov	r2, r5
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f7fe fa3a 	bl	80050a6 <memset>
 8006c32:	e7f5      	b.n	8006c20 <_calloc_r+0x14>

08006c34 <__ascii_mbtowc>:
 8006c34:	b082      	sub	sp, #8
 8006c36:	b901      	cbnz	r1, 8006c3a <__ascii_mbtowc+0x6>
 8006c38:	a901      	add	r1, sp, #4
 8006c3a:	b142      	cbz	r2, 8006c4e <__ascii_mbtowc+0x1a>
 8006c3c:	b14b      	cbz	r3, 8006c52 <__ascii_mbtowc+0x1e>
 8006c3e:	7813      	ldrb	r3, [r2, #0]
 8006c40:	600b      	str	r3, [r1, #0]
 8006c42:	7812      	ldrb	r2, [r2, #0]
 8006c44:	1e10      	subs	r0, r2, #0
 8006c46:	bf18      	it	ne
 8006c48:	2001      	movne	r0, #1
 8006c4a:	b002      	add	sp, #8
 8006c4c:	4770      	bx	lr
 8006c4e:	4610      	mov	r0, r2
 8006c50:	e7fb      	b.n	8006c4a <__ascii_mbtowc+0x16>
 8006c52:	f06f 0001 	mvn.w	r0, #1
 8006c56:	e7f8      	b.n	8006c4a <__ascii_mbtowc+0x16>

08006c58 <_realloc_r>:
 8006c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5c:	4680      	mov	r8, r0
 8006c5e:	4615      	mov	r5, r2
 8006c60:	460c      	mov	r4, r1
 8006c62:	b921      	cbnz	r1, 8006c6e <_realloc_r+0x16>
 8006c64:	4611      	mov	r1, r2
 8006c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6a:	f7ff b97b 	b.w	8005f64 <_malloc_r>
 8006c6e:	b92a      	cbnz	r2, 8006c7c <_realloc_r+0x24>
 8006c70:	f7ff f906 	bl	8005e80 <_free_r>
 8006c74:	2400      	movs	r4, #0
 8006c76:	4620      	mov	r0, r4
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	f000 f841 	bl	8006d02 <_malloc_usable_size_r>
 8006c80:	4285      	cmp	r5, r0
 8006c82:	4606      	mov	r6, r0
 8006c84:	d802      	bhi.n	8006c8c <_realloc_r+0x34>
 8006c86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c8a:	d8f4      	bhi.n	8006c76 <_realloc_r+0x1e>
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4640      	mov	r0, r8
 8006c90:	f7ff f968 	bl	8005f64 <_malloc_r>
 8006c94:	4607      	mov	r7, r0
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d0ec      	beq.n	8006c74 <_realloc_r+0x1c>
 8006c9a:	42b5      	cmp	r5, r6
 8006c9c:	462a      	mov	r2, r5
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	bf28      	it	cs
 8006ca2:	4632      	movcs	r2, r6
 8006ca4:	f7fe fa8d 	bl	80051c2 <memcpy>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4640      	mov	r0, r8
 8006cac:	f7ff f8e8 	bl	8005e80 <_free_r>
 8006cb0:	463c      	mov	r4, r7
 8006cb2:	e7e0      	b.n	8006c76 <_realloc_r+0x1e>

08006cb4 <__ascii_wctomb>:
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	4608      	mov	r0, r1
 8006cb8:	b141      	cbz	r1, 8006ccc <__ascii_wctomb+0x18>
 8006cba:	2aff      	cmp	r2, #255	@ 0xff
 8006cbc:	d904      	bls.n	8006cc8 <__ascii_wctomb+0x14>
 8006cbe:	228a      	movs	r2, #138	@ 0x8a
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	4770      	bx	lr
 8006cc8:	2001      	movs	r0, #1
 8006cca:	700a      	strb	r2, [r1, #0]
 8006ccc:	4770      	bx	lr
	...

08006cd0 <fiprintf>:
 8006cd0:	b40e      	push	{r1, r2, r3}
 8006cd2:	b503      	push	{r0, r1, lr}
 8006cd4:	4601      	mov	r1, r0
 8006cd6:	ab03      	add	r3, sp, #12
 8006cd8:	4805      	ldr	r0, [pc, #20]	@ (8006cf0 <fiprintf+0x20>)
 8006cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cde:	6800      	ldr	r0, [r0, #0]
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	f000 f83d 	bl	8006d60 <_vfiprintf_r>
 8006ce6:	b002      	add	sp, #8
 8006ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cec:	b003      	add	sp, #12
 8006cee:	4770      	bx	lr
 8006cf0:	20000018 	.word	0x20000018

08006cf4 <abort>:
 8006cf4:	2006      	movs	r0, #6
 8006cf6:	b508      	push	{r3, lr}
 8006cf8:	f000 fa06 	bl	8007108 <raise>
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	f7fa fd38 	bl	8001772 <_exit>

08006d02 <_malloc_usable_size_r>:
 8006d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d06:	1f18      	subs	r0, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bfbc      	itt	lt
 8006d0c:	580b      	ldrlt	r3, [r1, r0]
 8006d0e:	18c0      	addlt	r0, r0, r3
 8006d10:	4770      	bx	lr

08006d12 <__sfputc_r>:
 8006d12:	6893      	ldr	r3, [r2, #8]
 8006d14:	b410      	push	{r4}
 8006d16:	3b01      	subs	r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	6093      	str	r3, [r2, #8]
 8006d1c:	da07      	bge.n	8006d2e <__sfputc_r+0x1c>
 8006d1e:	6994      	ldr	r4, [r2, #24]
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	db01      	blt.n	8006d28 <__sfputc_r+0x16>
 8006d24:	290a      	cmp	r1, #10
 8006d26:	d102      	bne.n	8006d2e <__sfputc_r+0x1c>
 8006d28:	bc10      	pop	{r4}
 8006d2a:	f000 b931 	b.w	8006f90 <__swbuf_r>
 8006d2e:	6813      	ldr	r3, [r2, #0]
 8006d30:	1c58      	adds	r0, r3, #1
 8006d32:	6010      	str	r0, [r2, #0]
 8006d34:	7019      	strb	r1, [r3, #0]
 8006d36:	4608      	mov	r0, r1
 8006d38:	bc10      	pop	{r4}
 8006d3a:	4770      	bx	lr

08006d3c <__sfputs_r>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	4606      	mov	r6, r0
 8006d40:	460f      	mov	r7, r1
 8006d42:	4614      	mov	r4, r2
 8006d44:	18d5      	adds	r5, r2, r3
 8006d46:	42ac      	cmp	r4, r5
 8006d48:	d101      	bne.n	8006d4e <__sfputs_r+0x12>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	e007      	b.n	8006d5e <__sfputs_r+0x22>
 8006d4e:	463a      	mov	r2, r7
 8006d50:	4630      	mov	r0, r6
 8006d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d56:	f7ff ffdc 	bl	8006d12 <__sfputc_r>
 8006d5a:	1c43      	adds	r3, r0, #1
 8006d5c:	d1f3      	bne.n	8006d46 <__sfputs_r+0xa>
 8006d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d60 <_vfiprintf_r>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	460d      	mov	r5, r1
 8006d66:	4614      	mov	r4, r2
 8006d68:	4698      	mov	r8, r3
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	b09d      	sub	sp, #116	@ 0x74
 8006d6e:	b118      	cbz	r0, 8006d78 <_vfiprintf_r+0x18>
 8006d70:	6a03      	ldr	r3, [r0, #32]
 8006d72:	b90b      	cbnz	r3, 8006d78 <_vfiprintf_r+0x18>
 8006d74:	f7fe f8ee 	bl	8004f54 <__sinit>
 8006d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d7a:	07d9      	lsls	r1, r3, #31
 8006d7c:	d405      	bmi.n	8006d8a <_vfiprintf_r+0x2a>
 8006d7e:	89ab      	ldrh	r3, [r5, #12]
 8006d80:	059a      	lsls	r2, r3, #22
 8006d82:	d402      	bmi.n	8006d8a <_vfiprintf_r+0x2a>
 8006d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d86:	f7fe fa0c 	bl	80051a2 <__retarget_lock_acquire_recursive>
 8006d8a:	89ab      	ldrh	r3, [r5, #12]
 8006d8c:	071b      	lsls	r3, r3, #28
 8006d8e:	d501      	bpl.n	8006d94 <_vfiprintf_r+0x34>
 8006d90:	692b      	ldr	r3, [r5, #16]
 8006d92:	b99b      	cbnz	r3, 8006dbc <_vfiprintf_r+0x5c>
 8006d94:	4629      	mov	r1, r5
 8006d96:	4630      	mov	r0, r6
 8006d98:	f000 f938 	bl	800700c <__swsetup_r>
 8006d9c:	b170      	cbz	r0, 8006dbc <_vfiprintf_r+0x5c>
 8006d9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006da0:	07dc      	lsls	r4, r3, #31
 8006da2:	d504      	bpl.n	8006dae <_vfiprintf_r+0x4e>
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	b01d      	add	sp, #116	@ 0x74
 8006daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dae:	89ab      	ldrh	r3, [r5, #12]
 8006db0:	0598      	lsls	r0, r3, #22
 8006db2:	d4f7      	bmi.n	8006da4 <_vfiprintf_r+0x44>
 8006db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006db6:	f7fe f9f5 	bl	80051a4 <__retarget_lock_release_recursive>
 8006dba:	e7f3      	b.n	8006da4 <_vfiprintf_r+0x44>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc0:	2320      	movs	r3, #32
 8006dc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006dc6:	2330      	movs	r3, #48	@ 0x30
 8006dc8:	f04f 0901 	mov.w	r9, #1
 8006dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dd0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006f7c <_vfiprintf_r+0x21c>
 8006dd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dd8:	4623      	mov	r3, r4
 8006dda:	469a      	mov	sl, r3
 8006ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006de0:	b10a      	cbz	r2, 8006de6 <_vfiprintf_r+0x86>
 8006de2:	2a25      	cmp	r2, #37	@ 0x25
 8006de4:	d1f9      	bne.n	8006dda <_vfiprintf_r+0x7a>
 8006de6:	ebba 0b04 	subs.w	fp, sl, r4
 8006dea:	d00b      	beq.n	8006e04 <_vfiprintf_r+0xa4>
 8006dec:	465b      	mov	r3, fp
 8006dee:	4622      	mov	r2, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	4630      	mov	r0, r6
 8006df4:	f7ff ffa2 	bl	8006d3c <__sfputs_r>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f000 80a7 	beq.w	8006f4c <_vfiprintf_r+0x1ec>
 8006dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e00:	445a      	add	r2, fp
 8006e02:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e04:	f89a 3000 	ldrb.w	r3, [sl]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 809f 	beq.w	8006f4c <_vfiprintf_r+0x1ec>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f04f 32ff 	mov.w	r2, #4294967295
 8006e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e18:	f10a 0a01 	add.w	sl, sl, #1
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	9307      	str	r3, [sp, #28]
 8006e20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e24:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e26:	4654      	mov	r4, sl
 8006e28:	2205      	movs	r2, #5
 8006e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2e:	4853      	ldr	r0, [pc, #332]	@ (8006f7c <_vfiprintf_r+0x21c>)
 8006e30:	f7fe f9b9 	bl	80051a6 <memchr>
 8006e34:	9a04      	ldr	r2, [sp, #16]
 8006e36:	b9d8      	cbnz	r0, 8006e70 <_vfiprintf_r+0x110>
 8006e38:	06d1      	lsls	r1, r2, #27
 8006e3a:	bf44      	itt	mi
 8006e3c:	2320      	movmi	r3, #32
 8006e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e42:	0713      	lsls	r3, r2, #28
 8006e44:	bf44      	itt	mi
 8006e46:	232b      	movmi	r3, #43	@ 0x2b
 8006e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e52:	d015      	beq.n	8006e80 <_vfiprintf_r+0x120>
 8006e54:	4654      	mov	r4, sl
 8006e56:	2000      	movs	r0, #0
 8006e58:	f04f 0c0a 	mov.w	ip, #10
 8006e5c:	9a07      	ldr	r2, [sp, #28]
 8006e5e:	4621      	mov	r1, r4
 8006e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e64:	3b30      	subs	r3, #48	@ 0x30
 8006e66:	2b09      	cmp	r3, #9
 8006e68:	d94b      	bls.n	8006f02 <_vfiprintf_r+0x1a2>
 8006e6a:	b1b0      	cbz	r0, 8006e9a <_vfiprintf_r+0x13a>
 8006e6c:	9207      	str	r2, [sp, #28]
 8006e6e:	e014      	b.n	8006e9a <_vfiprintf_r+0x13a>
 8006e70:	eba0 0308 	sub.w	r3, r0, r8
 8006e74:	fa09 f303 	lsl.w	r3, r9, r3
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	46a2      	mov	sl, r4
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	e7d2      	b.n	8006e26 <_vfiprintf_r+0xc6>
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	1d19      	adds	r1, r3, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	9103      	str	r1, [sp, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	bfbb      	ittet	lt
 8006e8c:	425b      	neglt	r3, r3
 8006e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e92:	9307      	strge	r3, [sp, #28]
 8006e94:	9307      	strlt	r3, [sp, #28]
 8006e96:	bfb8      	it	lt
 8006e98:	9204      	strlt	r2, [sp, #16]
 8006e9a:	7823      	ldrb	r3, [r4, #0]
 8006e9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e9e:	d10a      	bne.n	8006eb6 <_vfiprintf_r+0x156>
 8006ea0:	7863      	ldrb	r3, [r4, #1]
 8006ea2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ea4:	d132      	bne.n	8006f0c <_vfiprintf_r+0x1ac>
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	3402      	adds	r4, #2
 8006eaa:	1d1a      	adds	r2, r3, #4
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	9203      	str	r2, [sp, #12]
 8006eb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006eb4:	9305      	str	r3, [sp, #20]
 8006eb6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006f80 <_vfiprintf_r+0x220>
 8006eba:	2203      	movs	r2, #3
 8006ebc:	4650      	mov	r0, sl
 8006ebe:	7821      	ldrb	r1, [r4, #0]
 8006ec0:	f7fe f971 	bl	80051a6 <memchr>
 8006ec4:	b138      	cbz	r0, 8006ed6 <_vfiprintf_r+0x176>
 8006ec6:	2240      	movs	r2, #64	@ 0x40
 8006ec8:	9b04      	ldr	r3, [sp, #16]
 8006eca:	eba0 000a 	sub.w	r0, r0, sl
 8006ece:	4082      	lsls	r2, r0
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	3401      	adds	r4, #1
 8006ed4:	9304      	str	r3, [sp, #16]
 8006ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eda:	2206      	movs	r2, #6
 8006edc:	4829      	ldr	r0, [pc, #164]	@ (8006f84 <_vfiprintf_r+0x224>)
 8006ede:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ee2:	f7fe f960 	bl	80051a6 <memchr>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d03f      	beq.n	8006f6a <_vfiprintf_r+0x20a>
 8006eea:	4b27      	ldr	r3, [pc, #156]	@ (8006f88 <_vfiprintf_r+0x228>)
 8006eec:	bb1b      	cbnz	r3, 8006f36 <_vfiprintf_r+0x1d6>
 8006eee:	9b03      	ldr	r3, [sp, #12]
 8006ef0:	3307      	adds	r3, #7
 8006ef2:	f023 0307 	bic.w	r3, r3, #7
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	9303      	str	r3, [sp, #12]
 8006efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006efc:	443b      	add	r3, r7
 8006efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f00:	e76a      	b.n	8006dd8 <_vfiprintf_r+0x78>
 8006f02:	460c      	mov	r4, r1
 8006f04:	2001      	movs	r0, #1
 8006f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f0a:	e7a8      	b.n	8006e5e <_vfiprintf_r+0xfe>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f04f 0c0a 	mov.w	ip, #10
 8006f12:	4619      	mov	r1, r3
 8006f14:	3401      	adds	r4, #1
 8006f16:	9305      	str	r3, [sp, #20]
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f1e:	3a30      	subs	r2, #48	@ 0x30
 8006f20:	2a09      	cmp	r2, #9
 8006f22:	d903      	bls.n	8006f2c <_vfiprintf_r+0x1cc>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0c6      	beq.n	8006eb6 <_vfiprintf_r+0x156>
 8006f28:	9105      	str	r1, [sp, #20]
 8006f2a:	e7c4      	b.n	8006eb6 <_vfiprintf_r+0x156>
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	2301      	movs	r3, #1
 8006f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f34:	e7f0      	b.n	8006f18 <_vfiprintf_r+0x1b8>
 8006f36:	ab03      	add	r3, sp, #12
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	4b13      	ldr	r3, [pc, #76]	@ (8006f8c <_vfiprintf_r+0x22c>)
 8006f40:	a904      	add	r1, sp, #16
 8006f42:	f7fd fbbd 	bl	80046c0 <_printf_float>
 8006f46:	4607      	mov	r7, r0
 8006f48:	1c78      	adds	r0, r7, #1
 8006f4a:	d1d6      	bne.n	8006efa <_vfiprintf_r+0x19a>
 8006f4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f4e:	07d9      	lsls	r1, r3, #31
 8006f50:	d405      	bmi.n	8006f5e <_vfiprintf_r+0x1fe>
 8006f52:	89ab      	ldrh	r3, [r5, #12]
 8006f54:	059a      	lsls	r2, r3, #22
 8006f56:	d402      	bmi.n	8006f5e <_vfiprintf_r+0x1fe>
 8006f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f5a:	f7fe f923 	bl	80051a4 <__retarget_lock_release_recursive>
 8006f5e:	89ab      	ldrh	r3, [r5, #12]
 8006f60:	065b      	lsls	r3, r3, #25
 8006f62:	f53f af1f 	bmi.w	8006da4 <_vfiprintf_r+0x44>
 8006f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f68:	e71e      	b.n	8006da8 <_vfiprintf_r+0x48>
 8006f6a:	ab03      	add	r3, sp, #12
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	462a      	mov	r2, r5
 8006f70:	4630      	mov	r0, r6
 8006f72:	4b06      	ldr	r3, [pc, #24]	@ (8006f8c <_vfiprintf_r+0x22c>)
 8006f74:	a904      	add	r1, sp, #16
 8006f76:	f7fd fe41 	bl	8004bfc <_printf_i>
 8006f7a:	e7e4      	b.n	8006f46 <_vfiprintf_r+0x1e6>
 8006f7c:	08008620 	.word	0x08008620
 8006f80:	08008626 	.word	0x08008626
 8006f84:	0800862a 	.word	0x0800862a
 8006f88:	080046c1 	.word	0x080046c1
 8006f8c:	08006d3d 	.word	0x08006d3d

08006f90 <__swbuf_r>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	460e      	mov	r6, r1
 8006f94:	4614      	mov	r4, r2
 8006f96:	4605      	mov	r5, r0
 8006f98:	b118      	cbz	r0, 8006fa2 <__swbuf_r+0x12>
 8006f9a:	6a03      	ldr	r3, [r0, #32]
 8006f9c:	b90b      	cbnz	r3, 8006fa2 <__swbuf_r+0x12>
 8006f9e:	f7fd ffd9 	bl	8004f54 <__sinit>
 8006fa2:	69a3      	ldr	r3, [r4, #24]
 8006fa4:	60a3      	str	r3, [r4, #8]
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	071a      	lsls	r2, r3, #28
 8006faa:	d501      	bpl.n	8006fb0 <__swbuf_r+0x20>
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	b943      	cbnz	r3, 8006fc2 <__swbuf_r+0x32>
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 f82a 	bl	800700c <__swsetup_r>
 8006fb8:	b118      	cbz	r0, 8006fc2 <__swbuf_r+0x32>
 8006fba:	f04f 37ff 	mov.w	r7, #4294967295
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	6922      	ldr	r2, [r4, #16]
 8006fc6:	b2f6      	uxtb	r6, r6
 8006fc8:	1a98      	subs	r0, r3, r2
 8006fca:	6963      	ldr	r3, [r4, #20]
 8006fcc:	4637      	mov	r7, r6
 8006fce:	4283      	cmp	r3, r0
 8006fd0:	dc05      	bgt.n	8006fde <__swbuf_r+0x4e>
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f7ff fda9 	bl	8006b2c <_fflush_r>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d1ed      	bne.n	8006fba <__swbuf_r+0x2a>
 8006fde:	68a3      	ldr	r3, [r4, #8]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	60a3      	str	r3, [r4, #8]
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	6022      	str	r2, [r4, #0]
 8006fea:	701e      	strb	r6, [r3, #0]
 8006fec:	6962      	ldr	r2, [r4, #20]
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d004      	beq.n	8006ffe <__swbuf_r+0x6e>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	07db      	lsls	r3, r3, #31
 8006ff8:	d5e1      	bpl.n	8006fbe <__swbuf_r+0x2e>
 8006ffa:	2e0a      	cmp	r6, #10
 8006ffc:	d1df      	bne.n	8006fbe <__swbuf_r+0x2e>
 8006ffe:	4621      	mov	r1, r4
 8007000:	4628      	mov	r0, r5
 8007002:	f7ff fd93 	bl	8006b2c <_fflush_r>
 8007006:	2800      	cmp	r0, #0
 8007008:	d0d9      	beq.n	8006fbe <__swbuf_r+0x2e>
 800700a:	e7d6      	b.n	8006fba <__swbuf_r+0x2a>

0800700c <__swsetup_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4b29      	ldr	r3, [pc, #164]	@ (80070b4 <__swsetup_r+0xa8>)
 8007010:	4605      	mov	r5, r0
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	460c      	mov	r4, r1
 8007016:	b118      	cbz	r0, 8007020 <__swsetup_r+0x14>
 8007018:	6a03      	ldr	r3, [r0, #32]
 800701a:	b90b      	cbnz	r3, 8007020 <__swsetup_r+0x14>
 800701c:	f7fd ff9a 	bl	8004f54 <__sinit>
 8007020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007024:	0719      	lsls	r1, r3, #28
 8007026:	d422      	bmi.n	800706e <__swsetup_r+0x62>
 8007028:	06da      	lsls	r2, r3, #27
 800702a:	d407      	bmi.n	800703c <__swsetup_r+0x30>
 800702c:	2209      	movs	r2, #9
 800702e:	602a      	str	r2, [r5, #0]
 8007030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	e033      	b.n	80070a4 <__swsetup_r+0x98>
 800703c:	0758      	lsls	r0, r3, #29
 800703e:	d512      	bpl.n	8007066 <__swsetup_r+0x5a>
 8007040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007042:	b141      	cbz	r1, 8007056 <__swsetup_r+0x4a>
 8007044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007048:	4299      	cmp	r1, r3
 800704a:	d002      	beq.n	8007052 <__swsetup_r+0x46>
 800704c:	4628      	mov	r0, r5
 800704e:	f7fe ff17 	bl	8005e80 <_free_r>
 8007052:	2300      	movs	r3, #0
 8007054:	6363      	str	r3, [r4, #52]	@ 0x34
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	2300      	movs	r3, #0
 8007060:	6063      	str	r3, [r4, #4]
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f043 0308 	orr.w	r3, r3, #8
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	b94b      	cbnz	r3, 8007086 <__swsetup_r+0x7a>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800707c:	d003      	beq.n	8007086 <__swsetup_r+0x7a>
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f000 f882 	bl	800718a <__smakebuf_r>
 8007086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800708a:	f013 0201 	ands.w	r2, r3, #1
 800708e:	d00a      	beq.n	80070a6 <__swsetup_r+0x9a>
 8007090:	2200      	movs	r2, #0
 8007092:	60a2      	str	r2, [r4, #8]
 8007094:	6962      	ldr	r2, [r4, #20]
 8007096:	4252      	negs	r2, r2
 8007098:	61a2      	str	r2, [r4, #24]
 800709a:	6922      	ldr	r2, [r4, #16]
 800709c:	b942      	cbnz	r2, 80070b0 <__swsetup_r+0xa4>
 800709e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070a2:	d1c5      	bne.n	8007030 <__swsetup_r+0x24>
 80070a4:	bd38      	pop	{r3, r4, r5, pc}
 80070a6:	0799      	lsls	r1, r3, #30
 80070a8:	bf58      	it	pl
 80070aa:	6962      	ldrpl	r2, [r4, #20]
 80070ac:	60a2      	str	r2, [r4, #8]
 80070ae:	e7f4      	b.n	800709a <__swsetup_r+0x8e>
 80070b0:	2000      	movs	r0, #0
 80070b2:	e7f7      	b.n	80070a4 <__swsetup_r+0x98>
 80070b4:	20000018 	.word	0x20000018

080070b8 <_raise_r>:
 80070b8:	291f      	cmp	r1, #31
 80070ba:	b538      	push	{r3, r4, r5, lr}
 80070bc:	4605      	mov	r5, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	d904      	bls.n	80070cc <_raise_r+0x14>
 80070c2:	2316      	movs	r3, #22
 80070c4:	6003      	str	r3, [r0, #0]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80070ce:	b112      	cbz	r2, 80070d6 <_raise_r+0x1e>
 80070d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070d4:	b94b      	cbnz	r3, 80070ea <_raise_r+0x32>
 80070d6:	4628      	mov	r0, r5
 80070d8:	f000 f830 	bl	800713c <_getpid_r>
 80070dc:	4622      	mov	r2, r4
 80070de:	4601      	mov	r1, r0
 80070e0:	4628      	mov	r0, r5
 80070e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e6:	f000 b817 	b.w	8007118 <_kill_r>
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d00a      	beq.n	8007104 <_raise_r+0x4c>
 80070ee:	1c59      	adds	r1, r3, #1
 80070f0:	d103      	bne.n	80070fa <_raise_r+0x42>
 80070f2:	2316      	movs	r3, #22
 80070f4:	6003      	str	r3, [r0, #0]
 80070f6:	2001      	movs	r0, #1
 80070f8:	e7e7      	b.n	80070ca <_raise_r+0x12>
 80070fa:	2100      	movs	r1, #0
 80070fc:	4620      	mov	r0, r4
 80070fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007102:	4798      	blx	r3
 8007104:	2000      	movs	r0, #0
 8007106:	e7e0      	b.n	80070ca <_raise_r+0x12>

08007108 <raise>:
 8007108:	4b02      	ldr	r3, [pc, #8]	@ (8007114 <raise+0xc>)
 800710a:	4601      	mov	r1, r0
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	f7ff bfd3 	b.w	80070b8 <_raise_r>
 8007112:	bf00      	nop
 8007114:	20000018 	.word	0x20000018

08007118 <_kill_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	2300      	movs	r3, #0
 800711c:	4d06      	ldr	r5, [pc, #24]	@ (8007138 <_kill_r+0x20>)
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	4611      	mov	r1, r2
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	f7fa fb14 	bl	8001752 <_kill>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d102      	bne.n	8007134 <_kill_r+0x1c>
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	b103      	cbz	r3, 8007134 <_kill_r+0x1c>
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	bd38      	pop	{r3, r4, r5, pc}
 8007136:	bf00      	nop
 8007138:	20000858 	.word	0x20000858

0800713c <_getpid_r>:
 800713c:	f7fa bb02 	b.w	8001744 <_getpid>

08007140 <__swhatbuf_r>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	460c      	mov	r4, r1
 8007144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007148:	4615      	mov	r5, r2
 800714a:	2900      	cmp	r1, #0
 800714c:	461e      	mov	r6, r3
 800714e:	b096      	sub	sp, #88	@ 0x58
 8007150:	da0c      	bge.n	800716c <__swhatbuf_r+0x2c>
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	2100      	movs	r1, #0
 8007156:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800715a:	bf14      	ite	ne
 800715c:	2340      	movne	r3, #64	@ 0x40
 800715e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007162:	2000      	movs	r0, #0
 8007164:	6031      	str	r1, [r6, #0]
 8007166:	602b      	str	r3, [r5, #0]
 8007168:	b016      	add	sp, #88	@ 0x58
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	466a      	mov	r2, sp
 800716e:	f000 f849 	bl	8007204 <_fstat_r>
 8007172:	2800      	cmp	r0, #0
 8007174:	dbed      	blt.n	8007152 <__swhatbuf_r+0x12>
 8007176:	9901      	ldr	r1, [sp, #4]
 8007178:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800717c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007180:	4259      	negs	r1, r3
 8007182:	4159      	adcs	r1, r3
 8007184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007188:	e7eb      	b.n	8007162 <__swhatbuf_r+0x22>

0800718a <__smakebuf_r>:
 800718a:	898b      	ldrh	r3, [r1, #12]
 800718c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800718e:	079d      	lsls	r5, r3, #30
 8007190:	4606      	mov	r6, r0
 8007192:	460c      	mov	r4, r1
 8007194:	d507      	bpl.n	80071a6 <__smakebuf_r+0x1c>
 8007196:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800719a:	6023      	str	r3, [r4, #0]
 800719c:	6123      	str	r3, [r4, #16]
 800719e:	2301      	movs	r3, #1
 80071a0:	6163      	str	r3, [r4, #20]
 80071a2:	b003      	add	sp, #12
 80071a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a6:	466a      	mov	r2, sp
 80071a8:	ab01      	add	r3, sp, #4
 80071aa:	f7ff ffc9 	bl	8007140 <__swhatbuf_r>
 80071ae:	9f00      	ldr	r7, [sp, #0]
 80071b0:	4605      	mov	r5, r0
 80071b2:	4639      	mov	r1, r7
 80071b4:	4630      	mov	r0, r6
 80071b6:	f7fe fed5 	bl	8005f64 <_malloc_r>
 80071ba:	b948      	cbnz	r0, 80071d0 <__smakebuf_r+0x46>
 80071bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c0:	059a      	lsls	r2, r3, #22
 80071c2:	d4ee      	bmi.n	80071a2 <__smakebuf_r+0x18>
 80071c4:	f023 0303 	bic.w	r3, r3, #3
 80071c8:	f043 0302 	orr.w	r3, r3, #2
 80071cc:	81a3      	strh	r3, [r4, #12]
 80071ce:	e7e2      	b.n	8007196 <__smakebuf_r+0xc>
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	9b01      	ldr	r3, [sp, #4]
 80071de:	6020      	str	r0, [r4, #0]
 80071e0:	b15b      	cbz	r3, 80071fa <__smakebuf_r+0x70>
 80071e2:	4630      	mov	r0, r6
 80071e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e8:	f000 f81e 	bl	8007228 <_isatty_r>
 80071ec:	b128      	cbz	r0, 80071fa <__smakebuf_r+0x70>
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	f023 0303 	bic.w	r3, r3, #3
 80071f4:	f043 0301 	orr.w	r3, r3, #1
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	431d      	orrs	r5, r3
 80071fe:	81a5      	strh	r5, [r4, #12]
 8007200:	e7cf      	b.n	80071a2 <__smakebuf_r+0x18>
	...

08007204 <_fstat_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	2300      	movs	r3, #0
 8007208:	4d06      	ldr	r5, [pc, #24]	@ (8007224 <_fstat_r+0x20>)
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	4611      	mov	r1, r2
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	f7fa fafd 	bl	8001810 <_fstat>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	d102      	bne.n	8007220 <_fstat_r+0x1c>
 800721a:	682b      	ldr	r3, [r5, #0]
 800721c:	b103      	cbz	r3, 8007220 <_fstat_r+0x1c>
 800721e:	6023      	str	r3, [r4, #0]
 8007220:	bd38      	pop	{r3, r4, r5, pc}
 8007222:	bf00      	nop
 8007224:	20000858 	.word	0x20000858

08007228 <_isatty_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	2300      	movs	r3, #0
 800722c:	4d05      	ldr	r5, [pc, #20]	@ (8007244 <_isatty_r+0x1c>)
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	f7fa fafb 	bl	800182e <_isatty>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_isatty_r+0x1a>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_isatty_r+0x1a>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	20000858 	.word	0x20000858

08007248 <_init>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	bf00      	nop
 800724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724e:	bc08      	pop	{r3}
 8007250:	469e      	mov	lr, r3
 8007252:	4770      	bx	lr

08007254 <_fini>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr
